
Led_Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000066fc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000194  0800688c  0800688c  0001688c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a20  08006a20  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08006a20  08006a20  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006a20  08006a20  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a20  08006a20  00016a20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a24  08006a24  00016a24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006a28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          000024a8  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000251c  2000251c  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   000153b2  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002bd8  00000000  00000000  00035456  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001000  00000000  00000000  00038030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ea8  00000000  00000000  00039030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003c94  00000000  00000000  00039ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001295c  00000000  00000000  0003db6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b8619  00000000  00000000  000504c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00108ae1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004490  00000000  00000000  00108b34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006874 	.word	0x08006874

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08006874 	.word	0x08006874

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20001b44 	.word	0x20001b44

08000264 <EXTI0_IRQHandler>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void EXTI0_IRQHandler(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0

	traceISR_ENTER();
 8000268:	f005 ff64 	bl	8006134 <SEGGER_SYSVIEW_RecordEnterISR>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800026c:	2001      	movs	r0, #1
 800026e:	f000 fd0b 	bl	8000c88 <HAL_GPIO_EXTI_IRQHandler>

  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)==GPIO_PIN_SET){
 8000272:	2101      	movs	r1, #1
 8000274:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000278:	f000 fcbc 	bl	8000bf4 <HAL_GPIO_ReadPin>
 800027c:	4603      	mov	r3, r0
 800027e:	2b01      	cmp	r3, #1
 8000280:	d10c      	bne.n	800029c <EXTI0_IRQHandler+0x38>

	  if(count==5){
 8000282:	4b08      	ldr	r3, [pc, #32]	; (80002a4 <EXTI0_IRQHandler+0x40>)
 8000284:	781b      	ldrb	r3, [r3, #0]
 8000286:	2b05      	cmp	r3, #5
 8000288:	d102      	bne.n	8000290 <EXTI0_IRQHandler+0x2c>

		  count=0;
 800028a:	4b06      	ldr	r3, [pc, #24]	; (80002a4 <EXTI0_IRQHandler+0x40>)
 800028c:	2200      	movs	r2, #0
 800028e:	701a      	strb	r2, [r3, #0]
	  }
	  count++;
 8000290:	4b04      	ldr	r3, [pc, #16]	; (80002a4 <EXTI0_IRQHandler+0x40>)
 8000292:	781b      	ldrb	r3, [r3, #0]
 8000294:	3301      	adds	r3, #1
 8000296:	b2da      	uxtb	r2, r3
 8000298:	4b02      	ldr	r3, [pc, #8]	; (80002a4 <EXTI0_IRQHandler+0x40>)
 800029a:	701a      	strb	r2, [r3, #0]


  }

	traceISR_EXIT();
 800029c:	f005 ff8c 	bl	80061b8 <SEGGER_SYSVIEW_RecordExitISR>

}
 80002a0:	bf00      	nop
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	20000090 	.word	0x20000090

080002a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b082      	sub	sp, #8
 80002ac:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

	DWT->CTRL|=(1<<0);
 80002ae:	4b15      	ldr	r3, [pc, #84]	; (8000304 <main+0x5c>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	4a14      	ldr	r2, [pc, #80]	; (8000304 <main+0x5c>)
 80002b4:	f043 0301 	orr.w	r3, r3, #1
 80002b8:	6013      	str	r3, [r2, #0]
	  SEGGER_SYSVIEW_Conf();
 80002ba:	f004 fce5 	bl	8004c88 <SEGGER_SYSVIEW_Conf>
	  SEGGER_SYSVIEW_Start();
 80002be:	f005 fc71 	bl	8005ba4 <SEGGER_SYSVIEW_Start>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002c2:	f000 f9a5 	bl	8000610 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002c6:	f000 f827 	bl	8000318 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002ca:	f000 f861 	bl	8000390 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */



  xTaskCreate(led, "led", configMINIMAL_STACK_SIZE, NULL, 3, NULL);
 80002ce:	2300      	movs	r3, #0
 80002d0:	9301      	str	r3, [sp, #4]
 80002d2:	2303      	movs	r3, #3
 80002d4:	9300      	str	r3, [sp, #0]
 80002d6:	2300      	movs	r3, #0
 80002d8:	2280      	movs	r2, #128	; 0x80
 80002da:	490b      	ldr	r1, [pc, #44]	; (8000308 <main+0x60>)
 80002dc:	480b      	ldr	r0, [pc, #44]	; (800030c <main+0x64>)
 80002de:	f002 fe27 	bl	8002f30 <xTaskCreate>
  xTaskCreate(task1, "task1 ", configMINIMAL_STACK_SIZE, NULL, 3, NULL);
 80002e2:	2300      	movs	r3, #0
 80002e4:	9301      	str	r3, [sp, #4]
 80002e6:	2303      	movs	r3, #3
 80002e8:	9300      	str	r3, [sp, #0]
 80002ea:	2300      	movs	r3, #0
 80002ec:	2280      	movs	r2, #128	; 0x80
 80002ee:	4908      	ldr	r1, [pc, #32]	; (8000310 <main+0x68>)
 80002f0:	4808      	ldr	r0, [pc, #32]	; (8000314 <main+0x6c>)
 80002f2:	f002 fe1d 	bl	8002f30 <xTaskCreate>
  vTaskStartScheduler();
 80002f6:	f002 ffc5 	bl	8003284 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80002fa:	f001 ff0d 	bl	8002118 <osKernelInitialize>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80002fe:	f001 ff3f 	bl	8002180 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000302:	e7fe      	b.n	8000302 <main+0x5a>
 8000304:	e0001000 	.word	0xe0001000
 8000308:	0800688c 	.word	0x0800688c
 800030c:	0800043d 	.word	0x0800043d
 8000310:	08006890 	.word	0x08006890
 8000314:	080004ed 	.word	0x080004ed

08000318 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b090      	sub	sp, #64	; 0x40
 800031c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800031e:	f107 0318 	add.w	r3, r7, #24
 8000322:	2228      	movs	r2, #40	; 0x28
 8000324:	2100      	movs	r1, #0
 8000326:	4618      	mov	r0, r3
 8000328:	f006 f9da 	bl	80066e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800032c:	1d3b      	adds	r3, r7, #4
 800032e:	2200      	movs	r2, #0
 8000330:	601a      	str	r2, [r3, #0]
 8000332:	605a      	str	r2, [r3, #4]
 8000334:	609a      	str	r2, [r3, #8]
 8000336:	60da      	str	r2, [r3, #12]
 8000338:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800033a:	2302      	movs	r3, #2
 800033c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800033e:	2301      	movs	r3, #1
 8000340:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000342:	2310      	movs	r3, #16
 8000344:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000346:	2300      	movs	r3, #0
 8000348:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800034a:	f107 0318 	add.w	r3, r7, #24
 800034e:	4618      	mov	r0, r3
 8000350:	f000 fcbe 	bl	8000cd0 <HAL_RCC_OscConfig>
 8000354:	4603      	mov	r3, r0
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800035a:	f000 f8cc 	bl	80004f6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800035e:	230f      	movs	r3, #15
 8000360:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000362:	2300      	movs	r3, #0
 8000364:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000366:	2300      	movs	r3, #0
 8000368:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800036a:	2300      	movs	r3, #0
 800036c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800036e:	2300      	movs	r3, #0
 8000370:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000372:	1d3b      	adds	r3, r7, #4
 8000374:	2100      	movs	r1, #0
 8000376:	4618      	mov	r0, r3
 8000378:	f001 fce8 	bl	8001d4c <HAL_RCC_ClockConfig>
 800037c:	4603      	mov	r3, r0
 800037e:	2b00      	cmp	r3, #0
 8000380:	d001      	beq.n	8000386 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000382:	f000 f8b8 	bl	80004f6 <Error_Handler>
  }
}
 8000386:	bf00      	nop
 8000388:	3740      	adds	r7, #64	; 0x40
 800038a:	46bd      	mov	sp, r7
 800038c:	bd80      	pop	{r7, pc}
	...

08000390 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b088      	sub	sp, #32
 8000394:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000396:	f107 030c 	add.w	r3, r7, #12
 800039a:	2200      	movs	r2, #0
 800039c:	601a      	str	r2, [r3, #0]
 800039e:	605a      	str	r2, [r3, #4]
 80003a0:	609a      	str	r2, [r3, #8]
 80003a2:	60da      	str	r2, [r3, #12]
 80003a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003a6:	4b23      	ldr	r3, [pc, #140]	; (8000434 <MX_GPIO_Init+0xa4>)
 80003a8:	695b      	ldr	r3, [r3, #20]
 80003aa:	4a22      	ldr	r2, [pc, #136]	; (8000434 <MX_GPIO_Init+0xa4>)
 80003ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003b0:	6153      	str	r3, [r2, #20]
 80003b2:	4b20      	ldr	r3, [pc, #128]	; (8000434 <MX_GPIO_Init+0xa4>)
 80003b4:	695b      	ldr	r3, [r3, #20]
 80003b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003ba:	60bb      	str	r3, [r7, #8]
 80003bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80003be:	4b1d      	ldr	r3, [pc, #116]	; (8000434 <MX_GPIO_Init+0xa4>)
 80003c0:	695b      	ldr	r3, [r3, #20]
 80003c2:	4a1c      	ldr	r2, [pc, #112]	; (8000434 <MX_GPIO_Init+0xa4>)
 80003c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80003c8:	6153      	str	r3, [r2, #20]
 80003ca:	4b1a      	ldr	r3, [pc, #104]	; (8000434 <MX_GPIO_Init+0xa4>)
 80003cc:	695b      	ldr	r3, [r3, #20]
 80003ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80003d2:	607b      	str	r3, [r7, #4]
 80003d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 80003d6:	2200      	movs	r2, #0
 80003d8:	f44f 51f0 	mov.w	r1, #7680	; 0x1e00
 80003dc:	4816      	ldr	r0, [pc, #88]	; (8000438 <MX_GPIO_Init+0xa8>)
 80003de:	f000 fc21 	bl	8000c24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80003e2:	2301      	movs	r3, #1
 80003e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80003e6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80003ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ec:	2300      	movs	r3, #0
 80003ee:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003f0:	f107 030c 	add.w	r3, r7, #12
 80003f4:	4619      	mov	r1, r3
 80003f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003fa:	f000 fa81 	bl	8000900 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE9 PE10 PE11 PE12 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80003fe:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8000402:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000404:	2301      	movs	r3, #1
 8000406:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000408:	2300      	movs	r3, #0
 800040a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800040c:	2300      	movs	r3, #0
 800040e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000410:	f107 030c 	add.w	r3, r7, #12
 8000414:	4619      	mov	r1, r3
 8000416:	4808      	ldr	r0, [pc, #32]	; (8000438 <MX_GPIO_Init+0xa8>)
 8000418:	f000 fa72 	bl	8000900 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 800041c:	2200      	movs	r2, #0
 800041e:	2105      	movs	r1, #5
 8000420:	2006      	movs	r0, #6
 8000422:	f000 fa36 	bl	8000892 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000426:	2006      	movs	r0, #6
 8000428:	f000 fa4f 	bl	80008ca <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800042c:	bf00      	nop
 800042e:	3720      	adds	r7, #32
 8000430:	46bd      	mov	sp, r7
 8000432:	bd80      	pop	{r7, pc}
 8000434:	40021000 	.word	0x40021000
 8000438:	48001000 	.word	0x48001000

0800043c <led>:

/* USER CODE BEGIN 4 */


void led(void* params){
 800043c:	b580      	push	{r7, lr}
 800043e:	b082      	sub	sp, #8
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]


	while(1){


		if(count==1){
 8000444:	4b27      	ldr	r3, [pc, #156]	; (80004e4 <led+0xa8>)
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	2b01      	cmp	r3, #1
 800044a:	d108      	bne.n	800045e <led+0x22>

			HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_9);
 800044c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000450:	4825      	ldr	r0, [pc, #148]	; (80004e8 <led+0xac>)
 8000452:	f000 fbff 	bl	8000c54 <HAL_GPIO_TogglePin>
			vTaskDelay(pdMS_TO_TICKS(250));
 8000456:	20fa      	movs	r0, #250	; 0xfa
 8000458:	f002 fedc 	bl	8003214 <vTaskDelay>
 800045c:	e7f2      	b.n	8000444 <led+0x8>
		}

		else if(count==2){
 800045e:	4b21      	ldr	r3, [pc, #132]	; (80004e4 <led+0xa8>)
 8000460:	781b      	ldrb	r3, [r3, #0]
 8000462:	2b02      	cmp	r3, #2
 8000464:	d10f      	bne.n	8000486 <led+0x4a>

			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 8000466:	2200      	movs	r2, #0
 8000468:	f44f 7100 	mov.w	r1, #512	; 0x200
 800046c:	481e      	ldr	r0, [pc, #120]	; (80004e8 <led+0xac>)
 800046e:	f000 fbd9 	bl	8000c24 <HAL_GPIO_WritePin>

			HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_10);
 8000472:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000476:	481c      	ldr	r0, [pc, #112]	; (80004e8 <led+0xac>)
 8000478:	f000 fbec 	bl	8000c54 <HAL_GPIO_TogglePin>
			vTaskDelay(pdMS_TO_TICKS(500));
 800047c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000480:	f002 fec8 	bl	8003214 <vTaskDelay>
 8000484:	e7de      	b.n	8000444 <led+0x8>
		}


		else if(count==3){
 8000486:	4b17      	ldr	r3, [pc, #92]	; (80004e4 <led+0xa8>)
 8000488:	781b      	ldrb	r3, [r3, #0]
 800048a:	2b03      	cmp	r3, #3
 800048c:	d10f      	bne.n	80004ae <led+0x72>

			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 800048e:	2200      	movs	r2, #0
 8000490:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000494:	4814      	ldr	r0, [pc, #80]	; (80004e8 <led+0xac>)
 8000496:	f000 fbc5 	bl	8000c24 <HAL_GPIO_WritePin>

			HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_11);
 800049a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800049e:	4812      	ldr	r0, [pc, #72]	; (80004e8 <led+0xac>)
 80004a0:	f000 fbd8 	bl	8000c54 <HAL_GPIO_TogglePin>
			vTaskDelay(pdMS_TO_TICKS(750));
 80004a4:	f240 20ee 	movw	r0, #750	; 0x2ee
 80004a8:	f002 feb4 	bl	8003214 <vTaskDelay>
 80004ac:	e7ca      	b.n	8000444 <led+0x8>
		}


		else if(count==4){
 80004ae:	4b0d      	ldr	r3, [pc, #52]	; (80004e4 <led+0xa8>)
 80004b0:	781b      	ldrb	r3, [r3, #0]
 80004b2:	2b04      	cmp	r3, #4
 80004b4:	d10f      	bne.n	80004d6 <led+0x9a>

			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 80004b6:	2200      	movs	r2, #0
 80004b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004bc:	480a      	ldr	r0, [pc, #40]	; (80004e8 <led+0xac>)
 80004be:	f000 fbb1 	bl	8000c24 <HAL_GPIO_WritePin>

			HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_12);
 80004c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004c6:	4808      	ldr	r0, [pc, #32]	; (80004e8 <led+0xac>)
 80004c8:	f000 fbc4 	bl	8000c54 <HAL_GPIO_TogglePin>
			vTaskDelay(pdMS_TO_TICKS(1000));
 80004cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004d0:	f002 fea0 	bl	8003214 <vTaskDelay>
 80004d4:	e7b6      	b.n	8000444 <led+0x8>
		}

		else
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12, GPIO_PIN_RESET);
 80004d6:	2200      	movs	r2, #0
 80004d8:	f44f 51f0 	mov.w	r1, #7680	; 0x1e00
 80004dc:	4802      	ldr	r0, [pc, #8]	; (80004e8 <led+0xac>)
 80004de:	f000 fba1 	bl	8000c24 <HAL_GPIO_WritePin>
		if(count==1){
 80004e2:	e7af      	b.n	8000444 <led+0x8>
 80004e4:	20000090 	.word	0x20000090
 80004e8:	48001000 	.word	0x48001000

080004ec <task1>:

	}

}
void task1(void* params){
 80004ec:	b480      	push	{r7}
 80004ee:	b083      	sub	sp, #12
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]

	while(1);
 80004f4:	e7fe      	b.n	80004f4 <task1+0x8>

080004f6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004f6:	b480      	push	{r7}
 80004f8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004fa:	b672      	cpsid	i
}
 80004fc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004fe:	e7fe      	b.n	80004fe <Error_Handler+0x8>

08000500 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000506:	4b11      	ldr	r3, [pc, #68]	; (800054c <HAL_MspInit+0x4c>)
 8000508:	699b      	ldr	r3, [r3, #24]
 800050a:	4a10      	ldr	r2, [pc, #64]	; (800054c <HAL_MspInit+0x4c>)
 800050c:	f043 0301 	orr.w	r3, r3, #1
 8000510:	6193      	str	r3, [r2, #24]
 8000512:	4b0e      	ldr	r3, [pc, #56]	; (800054c <HAL_MspInit+0x4c>)
 8000514:	699b      	ldr	r3, [r3, #24]
 8000516:	f003 0301 	and.w	r3, r3, #1
 800051a:	607b      	str	r3, [r7, #4]
 800051c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800051e:	4b0b      	ldr	r3, [pc, #44]	; (800054c <HAL_MspInit+0x4c>)
 8000520:	69db      	ldr	r3, [r3, #28]
 8000522:	4a0a      	ldr	r2, [pc, #40]	; (800054c <HAL_MspInit+0x4c>)
 8000524:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000528:	61d3      	str	r3, [r2, #28]
 800052a:	4b08      	ldr	r3, [pc, #32]	; (800054c <HAL_MspInit+0x4c>)
 800052c:	69db      	ldr	r3, [r3, #28]
 800052e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000532:	603b      	str	r3, [r7, #0]
 8000534:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000536:	2200      	movs	r2, #0
 8000538:	210f      	movs	r1, #15
 800053a:	f06f 0001 	mvn.w	r0, #1
 800053e:	f000 f9a8 	bl	8000892 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000542:	bf00      	nop
 8000544:	3708      	adds	r7, #8
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	40021000 	.word	0x40021000

08000550 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000554:	e7fe      	b.n	8000554 <NMI_Handler+0x4>

08000556 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000556:	b480      	push	{r7}
 8000558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800055a:	e7fe      	b.n	800055a <HardFault_Handler+0x4>

0800055c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000560:	e7fe      	b.n	8000560 <MemManage_Handler+0x4>

08000562 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000562:	b480      	push	{r7}
 8000564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000566:	e7fe      	b.n	8000566 <BusFault_Handler+0x4>

08000568 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800056c:	e7fe      	b.n	800056c <UsageFault_Handler+0x4>

0800056e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800056e:	b480      	push	{r7}
 8000570:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000572:	bf00      	nop
 8000574:	46bd      	mov	sp, r7
 8000576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057a:	4770      	bx	lr

0800057c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000580:	f000 f88c 	bl	800069c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000584:	f003 fb50 	bl	8003c28 <xTaskGetSchedulerState>
 8000588:	4603      	mov	r3, r0
 800058a:	2b01      	cmp	r3, #1
 800058c:	d001      	beq.n	8000592 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800058e:	f004 f903 	bl	8004798 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000592:	bf00      	nop
 8000594:	bd80      	pop	{r7, pc}
	...

08000598 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800059c:	4b06      	ldr	r3, [pc, #24]	; (80005b8 <SystemInit+0x20>)
 800059e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005a2:	4a05      	ldr	r2, [pc, #20]	; (80005b8 <SystemInit+0x20>)
 80005a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005ac:	bf00      	nop
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	e000ed00 	.word	0xe000ed00

080005bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80005bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005f4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80005c0:	f7ff ffea 	bl	8000598 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005c4:	480c      	ldr	r0, [pc, #48]	; (80005f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80005c6:	490d      	ldr	r1, [pc, #52]	; (80005fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80005c8:	4a0d      	ldr	r2, [pc, #52]	; (8000600 <LoopForever+0xe>)
  movs r3, #0
 80005ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005cc:	e002      	b.n	80005d4 <LoopCopyDataInit>

080005ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005d2:	3304      	adds	r3, #4

080005d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005d8:	d3f9      	bcc.n	80005ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005da:	4a0a      	ldr	r2, [pc, #40]	; (8000604 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005dc:	4c0a      	ldr	r4, [pc, #40]	; (8000608 <LoopForever+0x16>)
  movs r3, #0
 80005de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005e0:	e001      	b.n	80005e6 <LoopFillZerobss>

080005e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005e4:	3204      	adds	r2, #4

080005e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005e8:	d3fb      	bcc.n	80005e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005ea:	f006 f835 	bl	8006658 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80005ee:	f7ff fe5b 	bl	80002a8 <main>

080005f2 <LoopForever>:

LoopForever:
    b LoopForever
 80005f2:	e7fe      	b.n	80005f2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80005f4:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80005f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005fc:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000600:	08006a28 	.word	0x08006a28
  ldr r2, =_sbss
 8000604:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000608:	2000251c 	.word	0x2000251c

0800060c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800060c:	e7fe      	b.n	800060c <ADC1_2_IRQHandler>
	...

08000610 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000614:	4b08      	ldr	r3, [pc, #32]	; (8000638 <HAL_Init+0x28>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a07      	ldr	r2, [pc, #28]	; (8000638 <HAL_Init+0x28>)
 800061a:	f043 0310 	orr.w	r3, r3, #16
 800061e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000620:	2003      	movs	r0, #3
 8000622:	f000 f92b 	bl	800087c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000626:	200f      	movs	r0, #15
 8000628:	f000 f808 	bl	800063c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800062c:	f7ff ff68 	bl	8000500 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000630:	2300      	movs	r3, #0
}
 8000632:	4618      	mov	r0, r3
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	40022000 	.word	0x40022000

0800063c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000644:	4b12      	ldr	r3, [pc, #72]	; (8000690 <HAL_InitTick+0x54>)
 8000646:	681a      	ldr	r2, [r3, #0]
 8000648:	4b12      	ldr	r3, [pc, #72]	; (8000694 <HAL_InitTick+0x58>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	4619      	mov	r1, r3
 800064e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000652:	fbb3 f3f1 	udiv	r3, r3, r1
 8000656:	fbb2 f3f3 	udiv	r3, r2, r3
 800065a:	4618      	mov	r0, r3
 800065c:	f000 f943 	bl	80008e6 <HAL_SYSTICK_Config>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000666:	2301      	movs	r3, #1
 8000668:	e00e      	b.n	8000688 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	2b0f      	cmp	r3, #15
 800066e:	d80a      	bhi.n	8000686 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000670:	2200      	movs	r2, #0
 8000672:	6879      	ldr	r1, [r7, #4]
 8000674:	f04f 30ff 	mov.w	r0, #4294967295
 8000678:	f000 f90b 	bl	8000892 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800067c:	4a06      	ldr	r2, [pc, #24]	; (8000698 <HAL_InitTick+0x5c>)
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000682:	2300      	movs	r3, #0
 8000684:	e000      	b.n	8000688 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000686:	2301      	movs	r3, #1
}
 8000688:	4618      	mov	r0, r3
 800068a:	3708      	adds	r7, #8
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	20000000 	.word	0x20000000
 8000694:	20000008 	.word	0x20000008
 8000698:	20000004 	.word	0x20000004

0800069c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006a0:	4b06      	ldr	r3, [pc, #24]	; (80006bc <HAL_IncTick+0x20>)
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	461a      	mov	r2, r3
 80006a6:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <HAL_IncTick+0x24>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	4413      	add	r3, r2
 80006ac:	4a04      	ldr	r2, [pc, #16]	; (80006c0 <HAL_IncTick+0x24>)
 80006ae:	6013      	str	r3, [r2, #0]
}
 80006b0:	bf00      	nop
 80006b2:	46bd      	mov	sp, r7
 80006b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop
 80006bc:	20000008 	.word	0x20000008
 80006c0:	20000094 	.word	0x20000094

080006c4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  return uwTick;  
 80006c8:	4b03      	ldr	r3, [pc, #12]	; (80006d8 <HAL_GetTick+0x14>)
 80006ca:	681b      	ldr	r3, [r3, #0]
}
 80006cc:	4618      	mov	r0, r3
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	20000094 	.word	0x20000094

080006dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006dc:	b480      	push	{r7}
 80006de:	b085      	sub	sp, #20
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	f003 0307 	and.w	r3, r3, #7
 80006ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006ec:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <__NVIC_SetPriorityGrouping+0x44>)
 80006ee:	68db      	ldr	r3, [r3, #12]
 80006f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006f2:	68ba      	ldr	r2, [r7, #8]
 80006f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006f8:	4013      	ands	r3, r2
 80006fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000700:	68bb      	ldr	r3, [r7, #8]
 8000702:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000704:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000708:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800070c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800070e:	4a04      	ldr	r2, [pc, #16]	; (8000720 <__NVIC_SetPriorityGrouping+0x44>)
 8000710:	68bb      	ldr	r3, [r7, #8]
 8000712:	60d3      	str	r3, [r2, #12]
}
 8000714:	bf00      	nop
 8000716:	3714      	adds	r7, #20
 8000718:	46bd      	mov	sp, r7
 800071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071e:	4770      	bx	lr
 8000720:	e000ed00 	.word	0xe000ed00

08000724 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000728:	4b04      	ldr	r3, [pc, #16]	; (800073c <__NVIC_GetPriorityGrouping+0x18>)
 800072a:	68db      	ldr	r3, [r3, #12]
 800072c:	0a1b      	lsrs	r3, r3, #8
 800072e:	f003 0307 	and.w	r3, r3, #7
}
 8000732:	4618      	mov	r0, r3
 8000734:	46bd      	mov	sp, r7
 8000736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073a:	4770      	bx	lr
 800073c:	e000ed00 	.word	0xe000ed00

08000740 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000740:	b480      	push	{r7}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0
 8000746:	4603      	mov	r3, r0
 8000748:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800074a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800074e:	2b00      	cmp	r3, #0
 8000750:	db0b      	blt.n	800076a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000752:	79fb      	ldrb	r3, [r7, #7]
 8000754:	f003 021f 	and.w	r2, r3, #31
 8000758:	4907      	ldr	r1, [pc, #28]	; (8000778 <__NVIC_EnableIRQ+0x38>)
 800075a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800075e:	095b      	lsrs	r3, r3, #5
 8000760:	2001      	movs	r0, #1
 8000762:	fa00 f202 	lsl.w	r2, r0, r2
 8000766:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800076a:	bf00      	nop
 800076c:	370c      	adds	r7, #12
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop
 8000778:	e000e100 	.word	0xe000e100

0800077c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
 8000782:	4603      	mov	r3, r0
 8000784:	6039      	str	r1, [r7, #0]
 8000786:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000788:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800078c:	2b00      	cmp	r3, #0
 800078e:	db0a      	blt.n	80007a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000790:	683b      	ldr	r3, [r7, #0]
 8000792:	b2da      	uxtb	r2, r3
 8000794:	490c      	ldr	r1, [pc, #48]	; (80007c8 <__NVIC_SetPriority+0x4c>)
 8000796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800079a:	0112      	lsls	r2, r2, #4
 800079c:	b2d2      	uxtb	r2, r2
 800079e:	440b      	add	r3, r1
 80007a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007a4:	e00a      	b.n	80007bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	b2da      	uxtb	r2, r3
 80007aa:	4908      	ldr	r1, [pc, #32]	; (80007cc <__NVIC_SetPriority+0x50>)
 80007ac:	79fb      	ldrb	r3, [r7, #7]
 80007ae:	f003 030f 	and.w	r3, r3, #15
 80007b2:	3b04      	subs	r3, #4
 80007b4:	0112      	lsls	r2, r2, #4
 80007b6:	b2d2      	uxtb	r2, r2
 80007b8:	440b      	add	r3, r1
 80007ba:	761a      	strb	r2, [r3, #24]
}
 80007bc:	bf00      	nop
 80007be:	370c      	adds	r7, #12
 80007c0:	46bd      	mov	sp, r7
 80007c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c6:	4770      	bx	lr
 80007c8:	e000e100 	.word	0xe000e100
 80007cc:	e000ed00 	.word	0xe000ed00

080007d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b089      	sub	sp, #36	; 0x24
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	60f8      	str	r0, [r7, #12]
 80007d8:	60b9      	str	r1, [r7, #8]
 80007da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	f003 0307 	and.w	r3, r3, #7
 80007e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007e4:	69fb      	ldr	r3, [r7, #28]
 80007e6:	f1c3 0307 	rsb	r3, r3, #7
 80007ea:	2b04      	cmp	r3, #4
 80007ec:	bf28      	it	cs
 80007ee:	2304      	movcs	r3, #4
 80007f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007f2:	69fb      	ldr	r3, [r7, #28]
 80007f4:	3304      	adds	r3, #4
 80007f6:	2b06      	cmp	r3, #6
 80007f8:	d902      	bls.n	8000800 <NVIC_EncodePriority+0x30>
 80007fa:	69fb      	ldr	r3, [r7, #28]
 80007fc:	3b03      	subs	r3, #3
 80007fe:	e000      	b.n	8000802 <NVIC_EncodePriority+0x32>
 8000800:	2300      	movs	r3, #0
 8000802:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000804:	f04f 32ff 	mov.w	r2, #4294967295
 8000808:	69bb      	ldr	r3, [r7, #24]
 800080a:	fa02 f303 	lsl.w	r3, r2, r3
 800080e:	43da      	mvns	r2, r3
 8000810:	68bb      	ldr	r3, [r7, #8]
 8000812:	401a      	ands	r2, r3
 8000814:	697b      	ldr	r3, [r7, #20]
 8000816:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000818:	f04f 31ff 	mov.w	r1, #4294967295
 800081c:	697b      	ldr	r3, [r7, #20]
 800081e:	fa01 f303 	lsl.w	r3, r1, r3
 8000822:	43d9      	mvns	r1, r3
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000828:	4313      	orrs	r3, r2
         );
}
 800082a:	4618      	mov	r0, r3
 800082c:	3724      	adds	r7, #36	; 0x24
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr
	...

08000838 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	3b01      	subs	r3, #1
 8000844:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000848:	d301      	bcc.n	800084e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800084a:	2301      	movs	r3, #1
 800084c:	e00f      	b.n	800086e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800084e:	4a0a      	ldr	r2, [pc, #40]	; (8000878 <SysTick_Config+0x40>)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	3b01      	subs	r3, #1
 8000854:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000856:	210f      	movs	r1, #15
 8000858:	f04f 30ff 	mov.w	r0, #4294967295
 800085c:	f7ff ff8e 	bl	800077c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000860:	4b05      	ldr	r3, [pc, #20]	; (8000878 <SysTick_Config+0x40>)
 8000862:	2200      	movs	r2, #0
 8000864:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000866:	4b04      	ldr	r3, [pc, #16]	; (8000878 <SysTick_Config+0x40>)
 8000868:	2207      	movs	r2, #7
 800086a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800086c:	2300      	movs	r3, #0
}
 800086e:	4618      	mov	r0, r3
 8000870:	3708      	adds	r7, #8
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	e000e010 	.word	0xe000e010

0800087c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000884:	6878      	ldr	r0, [r7, #4]
 8000886:	f7ff ff29 	bl	80006dc <__NVIC_SetPriorityGrouping>
}
 800088a:	bf00      	nop
 800088c:	3708      	adds	r7, #8
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}

08000892 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000892:	b580      	push	{r7, lr}
 8000894:	b086      	sub	sp, #24
 8000896:	af00      	add	r7, sp, #0
 8000898:	4603      	mov	r3, r0
 800089a:	60b9      	str	r1, [r7, #8]
 800089c:	607a      	str	r2, [r7, #4]
 800089e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008a0:	2300      	movs	r3, #0
 80008a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008a4:	f7ff ff3e 	bl	8000724 <__NVIC_GetPriorityGrouping>
 80008a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008aa:	687a      	ldr	r2, [r7, #4]
 80008ac:	68b9      	ldr	r1, [r7, #8]
 80008ae:	6978      	ldr	r0, [r7, #20]
 80008b0:	f7ff ff8e 	bl	80007d0 <NVIC_EncodePriority>
 80008b4:	4602      	mov	r2, r0
 80008b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008ba:	4611      	mov	r1, r2
 80008bc:	4618      	mov	r0, r3
 80008be:	f7ff ff5d 	bl	800077c <__NVIC_SetPriority>
}
 80008c2:	bf00      	nop
 80008c4:	3718      	adds	r7, #24
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}

080008ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008ca:	b580      	push	{r7, lr}
 80008cc:	b082      	sub	sp, #8
 80008ce:	af00      	add	r7, sp, #0
 80008d0:	4603      	mov	r3, r0
 80008d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d8:	4618      	mov	r0, r3
 80008da:	f7ff ff31 	bl	8000740 <__NVIC_EnableIRQ>
}
 80008de:	bf00      	nop
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}

080008e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008e6:	b580      	push	{r7, lr}
 80008e8:	b082      	sub	sp, #8
 80008ea:	af00      	add	r7, sp, #0
 80008ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008ee:	6878      	ldr	r0, [r7, #4]
 80008f0:	f7ff ffa2 	bl	8000838 <SysTick_Config>
 80008f4:	4603      	mov	r3, r0
}
 80008f6:	4618      	mov	r0, r3
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
	...

08000900 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000900:	b480      	push	{r7}
 8000902:	b087      	sub	sp, #28
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
 8000908:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800090a:	2300      	movs	r3, #0
 800090c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800090e:	e154      	b.n	8000bba <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	681a      	ldr	r2, [r3, #0]
 8000914:	2101      	movs	r1, #1
 8000916:	697b      	ldr	r3, [r7, #20]
 8000918:	fa01 f303 	lsl.w	r3, r1, r3
 800091c:	4013      	ands	r3, r2
 800091e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	2b00      	cmp	r3, #0
 8000924:	f000 8146 	beq.w	8000bb4 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	685b      	ldr	r3, [r3, #4]
 800092c:	f003 0303 	and.w	r3, r3, #3
 8000930:	2b01      	cmp	r3, #1
 8000932:	d005      	beq.n	8000940 <HAL_GPIO_Init+0x40>
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	685b      	ldr	r3, [r3, #4]
 8000938:	f003 0303 	and.w	r3, r3, #3
 800093c:	2b02      	cmp	r3, #2
 800093e:	d130      	bne.n	80009a2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	689b      	ldr	r3, [r3, #8]
 8000944:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000946:	697b      	ldr	r3, [r7, #20]
 8000948:	005b      	lsls	r3, r3, #1
 800094a:	2203      	movs	r2, #3
 800094c:	fa02 f303 	lsl.w	r3, r2, r3
 8000950:	43db      	mvns	r3, r3
 8000952:	693a      	ldr	r2, [r7, #16]
 8000954:	4013      	ands	r3, r2
 8000956:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	68da      	ldr	r2, [r3, #12]
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	005b      	lsls	r3, r3, #1
 8000960:	fa02 f303 	lsl.w	r3, r2, r3
 8000964:	693a      	ldr	r2, [r7, #16]
 8000966:	4313      	orrs	r3, r2
 8000968:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	693a      	ldr	r2, [r7, #16]
 800096e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	685b      	ldr	r3, [r3, #4]
 8000974:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000976:	2201      	movs	r2, #1
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	fa02 f303 	lsl.w	r3, r2, r3
 800097e:	43db      	mvns	r3, r3
 8000980:	693a      	ldr	r2, [r7, #16]
 8000982:	4013      	ands	r3, r2
 8000984:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	685b      	ldr	r3, [r3, #4]
 800098a:	091b      	lsrs	r3, r3, #4
 800098c:	f003 0201 	and.w	r2, r3, #1
 8000990:	697b      	ldr	r3, [r7, #20]
 8000992:	fa02 f303 	lsl.w	r3, r2, r3
 8000996:	693a      	ldr	r2, [r7, #16]
 8000998:	4313      	orrs	r3, r2
 800099a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	693a      	ldr	r2, [r7, #16]
 80009a0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	685b      	ldr	r3, [r3, #4]
 80009a6:	f003 0303 	and.w	r3, r3, #3
 80009aa:	2b03      	cmp	r3, #3
 80009ac:	d017      	beq.n	80009de <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	68db      	ldr	r3, [r3, #12]
 80009b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80009b4:	697b      	ldr	r3, [r7, #20]
 80009b6:	005b      	lsls	r3, r3, #1
 80009b8:	2203      	movs	r2, #3
 80009ba:	fa02 f303 	lsl.w	r3, r2, r3
 80009be:	43db      	mvns	r3, r3
 80009c0:	693a      	ldr	r2, [r7, #16]
 80009c2:	4013      	ands	r3, r2
 80009c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	689a      	ldr	r2, [r3, #8]
 80009ca:	697b      	ldr	r3, [r7, #20]
 80009cc:	005b      	lsls	r3, r3, #1
 80009ce:	fa02 f303 	lsl.w	r3, r2, r3
 80009d2:	693a      	ldr	r2, [r7, #16]
 80009d4:	4313      	orrs	r3, r2
 80009d6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	693a      	ldr	r2, [r7, #16]
 80009dc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	685b      	ldr	r3, [r3, #4]
 80009e2:	f003 0303 	and.w	r3, r3, #3
 80009e6:	2b02      	cmp	r3, #2
 80009e8:	d123      	bne.n	8000a32 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80009ea:	697b      	ldr	r3, [r7, #20]
 80009ec:	08da      	lsrs	r2, r3, #3
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	3208      	adds	r2, #8
 80009f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	f003 0307 	and.w	r3, r3, #7
 80009fe:	009b      	lsls	r3, r3, #2
 8000a00:	220f      	movs	r2, #15
 8000a02:	fa02 f303 	lsl.w	r3, r2, r3
 8000a06:	43db      	mvns	r3, r3
 8000a08:	693a      	ldr	r2, [r7, #16]
 8000a0a:	4013      	ands	r3, r2
 8000a0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	691a      	ldr	r2, [r3, #16]
 8000a12:	697b      	ldr	r3, [r7, #20]
 8000a14:	f003 0307 	and.w	r3, r3, #7
 8000a18:	009b      	lsls	r3, r3, #2
 8000a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a1e:	693a      	ldr	r2, [r7, #16]
 8000a20:	4313      	orrs	r3, r2
 8000a22:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a24:	697b      	ldr	r3, [r7, #20]
 8000a26:	08da      	lsrs	r2, r3, #3
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	3208      	adds	r2, #8
 8000a2c:	6939      	ldr	r1, [r7, #16]
 8000a2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000a38:	697b      	ldr	r3, [r7, #20]
 8000a3a:	005b      	lsls	r3, r3, #1
 8000a3c:	2203      	movs	r2, #3
 8000a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a42:	43db      	mvns	r3, r3
 8000a44:	693a      	ldr	r2, [r7, #16]
 8000a46:	4013      	ands	r3, r2
 8000a48:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	685b      	ldr	r3, [r3, #4]
 8000a4e:	f003 0203 	and.w	r2, r3, #3
 8000a52:	697b      	ldr	r3, [r7, #20]
 8000a54:	005b      	lsls	r3, r3, #1
 8000a56:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5a:	693a      	ldr	r2, [r7, #16]
 8000a5c:	4313      	orrs	r3, r2
 8000a5e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	693a      	ldr	r2, [r7, #16]
 8000a64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	685b      	ldr	r3, [r3, #4]
 8000a6a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	f000 80a0 	beq.w	8000bb4 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a74:	4b58      	ldr	r3, [pc, #352]	; (8000bd8 <HAL_GPIO_Init+0x2d8>)
 8000a76:	699b      	ldr	r3, [r3, #24]
 8000a78:	4a57      	ldr	r2, [pc, #348]	; (8000bd8 <HAL_GPIO_Init+0x2d8>)
 8000a7a:	f043 0301 	orr.w	r3, r3, #1
 8000a7e:	6193      	str	r3, [r2, #24]
 8000a80:	4b55      	ldr	r3, [pc, #340]	; (8000bd8 <HAL_GPIO_Init+0x2d8>)
 8000a82:	699b      	ldr	r3, [r3, #24]
 8000a84:	f003 0301 	and.w	r3, r3, #1
 8000a88:	60bb      	str	r3, [r7, #8]
 8000a8a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000a8c:	4a53      	ldr	r2, [pc, #332]	; (8000bdc <HAL_GPIO_Init+0x2dc>)
 8000a8e:	697b      	ldr	r3, [r7, #20]
 8000a90:	089b      	lsrs	r3, r3, #2
 8000a92:	3302      	adds	r3, #2
 8000a94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a98:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a9a:	697b      	ldr	r3, [r7, #20]
 8000a9c:	f003 0303 	and.w	r3, r3, #3
 8000aa0:	009b      	lsls	r3, r3, #2
 8000aa2:	220f      	movs	r2, #15
 8000aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa8:	43db      	mvns	r3, r3
 8000aaa:	693a      	ldr	r2, [r7, #16]
 8000aac:	4013      	ands	r3, r2
 8000aae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000ab6:	d019      	beq.n	8000aec <HAL_GPIO_Init+0x1ec>
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	4a49      	ldr	r2, [pc, #292]	; (8000be0 <HAL_GPIO_Init+0x2e0>)
 8000abc:	4293      	cmp	r3, r2
 8000abe:	d013      	beq.n	8000ae8 <HAL_GPIO_Init+0x1e8>
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	4a48      	ldr	r2, [pc, #288]	; (8000be4 <HAL_GPIO_Init+0x2e4>)
 8000ac4:	4293      	cmp	r3, r2
 8000ac6:	d00d      	beq.n	8000ae4 <HAL_GPIO_Init+0x1e4>
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	4a47      	ldr	r2, [pc, #284]	; (8000be8 <HAL_GPIO_Init+0x2e8>)
 8000acc:	4293      	cmp	r3, r2
 8000ace:	d007      	beq.n	8000ae0 <HAL_GPIO_Init+0x1e0>
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	4a46      	ldr	r2, [pc, #280]	; (8000bec <HAL_GPIO_Init+0x2ec>)
 8000ad4:	4293      	cmp	r3, r2
 8000ad6:	d101      	bne.n	8000adc <HAL_GPIO_Init+0x1dc>
 8000ad8:	2304      	movs	r3, #4
 8000ada:	e008      	b.n	8000aee <HAL_GPIO_Init+0x1ee>
 8000adc:	2305      	movs	r3, #5
 8000ade:	e006      	b.n	8000aee <HAL_GPIO_Init+0x1ee>
 8000ae0:	2303      	movs	r3, #3
 8000ae2:	e004      	b.n	8000aee <HAL_GPIO_Init+0x1ee>
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	e002      	b.n	8000aee <HAL_GPIO_Init+0x1ee>
 8000ae8:	2301      	movs	r3, #1
 8000aea:	e000      	b.n	8000aee <HAL_GPIO_Init+0x1ee>
 8000aec:	2300      	movs	r3, #0
 8000aee:	697a      	ldr	r2, [r7, #20]
 8000af0:	f002 0203 	and.w	r2, r2, #3
 8000af4:	0092      	lsls	r2, r2, #2
 8000af6:	4093      	lsls	r3, r2
 8000af8:	693a      	ldr	r2, [r7, #16]
 8000afa:	4313      	orrs	r3, r2
 8000afc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000afe:	4937      	ldr	r1, [pc, #220]	; (8000bdc <HAL_GPIO_Init+0x2dc>)
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	089b      	lsrs	r3, r3, #2
 8000b04:	3302      	adds	r3, #2
 8000b06:	693a      	ldr	r2, [r7, #16]
 8000b08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b0c:	4b38      	ldr	r3, [pc, #224]	; (8000bf0 <HAL_GPIO_Init+0x2f0>)
 8000b0e:	689b      	ldr	r3, [r3, #8]
 8000b10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	43db      	mvns	r3, r3
 8000b16:	693a      	ldr	r2, [r7, #16]
 8000b18:	4013      	ands	r3, r2
 8000b1a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	685b      	ldr	r3, [r3, #4]
 8000b20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d003      	beq.n	8000b30 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000b28:	693a      	ldr	r2, [r7, #16]
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	4313      	orrs	r3, r2
 8000b2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000b30:	4a2f      	ldr	r2, [pc, #188]	; (8000bf0 <HAL_GPIO_Init+0x2f0>)
 8000b32:	693b      	ldr	r3, [r7, #16]
 8000b34:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000b36:	4b2e      	ldr	r3, [pc, #184]	; (8000bf0 <HAL_GPIO_Init+0x2f0>)
 8000b38:	68db      	ldr	r3, [r3, #12]
 8000b3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	43db      	mvns	r3, r3
 8000b40:	693a      	ldr	r2, [r7, #16]
 8000b42:	4013      	ands	r3, r2
 8000b44:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	685b      	ldr	r3, [r3, #4]
 8000b4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d003      	beq.n	8000b5a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000b52:	693a      	ldr	r2, [r7, #16]
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	4313      	orrs	r3, r2
 8000b58:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000b5a:	4a25      	ldr	r2, [pc, #148]	; (8000bf0 <HAL_GPIO_Init+0x2f0>)
 8000b5c:	693b      	ldr	r3, [r7, #16]
 8000b5e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000b60:	4b23      	ldr	r3, [pc, #140]	; (8000bf0 <HAL_GPIO_Init+0x2f0>)
 8000b62:	685b      	ldr	r3, [r3, #4]
 8000b64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	43db      	mvns	r3, r3
 8000b6a:	693a      	ldr	r2, [r7, #16]
 8000b6c:	4013      	ands	r3, r2
 8000b6e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	685b      	ldr	r3, [r3, #4]
 8000b74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d003      	beq.n	8000b84 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000b7c:	693a      	ldr	r2, [r7, #16]
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	4313      	orrs	r3, r2
 8000b82:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000b84:	4a1a      	ldr	r2, [pc, #104]	; (8000bf0 <HAL_GPIO_Init+0x2f0>)
 8000b86:	693b      	ldr	r3, [r7, #16]
 8000b88:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b8a:	4b19      	ldr	r3, [pc, #100]	; (8000bf0 <HAL_GPIO_Init+0x2f0>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	43db      	mvns	r3, r3
 8000b94:	693a      	ldr	r2, [r7, #16]
 8000b96:	4013      	ands	r3, r2
 8000b98:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	685b      	ldr	r3, [r3, #4]
 8000b9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d003      	beq.n	8000bae <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000ba6:	693a      	ldr	r2, [r7, #16]
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	4313      	orrs	r3, r2
 8000bac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000bae:	4a10      	ldr	r2, [pc, #64]	; (8000bf0 <HAL_GPIO_Init+0x2f0>)
 8000bb0:	693b      	ldr	r3, [r7, #16]
 8000bb2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	3301      	adds	r3, #1
 8000bb8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	681a      	ldr	r2, [r3, #0]
 8000bbe:	697b      	ldr	r3, [r7, #20]
 8000bc0:	fa22 f303 	lsr.w	r3, r2, r3
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	f47f aea3 	bne.w	8000910 <HAL_GPIO_Init+0x10>
  }
}
 8000bca:	bf00      	nop
 8000bcc:	bf00      	nop
 8000bce:	371c      	adds	r7, #28
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr
 8000bd8:	40021000 	.word	0x40021000
 8000bdc:	40010000 	.word	0x40010000
 8000be0:	48000400 	.word	0x48000400
 8000be4:	48000800 	.word	0x48000800
 8000be8:	48000c00 	.word	0x48000c00
 8000bec:	48001000 	.word	0x48001000
 8000bf0:	40010400 	.word	0x40010400

08000bf4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b085      	sub	sp, #20
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
 8000bfc:	460b      	mov	r3, r1
 8000bfe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	691a      	ldr	r2, [r3, #16]
 8000c04:	887b      	ldrh	r3, [r7, #2]
 8000c06:	4013      	ands	r3, r2
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d002      	beq.n	8000c12 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	73fb      	strb	r3, [r7, #15]
 8000c10:	e001      	b.n	8000c16 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000c12:	2300      	movs	r3, #0
 8000c14:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000c16:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3714      	adds	r7, #20
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr

08000c24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
 8000c2c:	460b      	mov	r3, r1
 8000c2e:	807b      	strh	r3, [r7, #2]
 8000c30:	4613      	mov	r3, r2
 8000c32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c34:	787b      	ldrb	r3, [r7, #1]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d003      	beq.n	8000c42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c3a:	887a      	ldrh	r2, [r7, #2]
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c40:	e002      	b.n	8000c48 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c42:	887a      	ldrh	r2, [r7, #2]
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c48:	bf00      	nop
 8000c4a:	370c      	adds	r7, #12
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr

08000c54 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b085      	sub	sp, #20
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
 8000c5c:	460b      	mov	r3, r1
 8000c5e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	695b      	ldr	r3, [r3, #20]
 8000c64:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000c66:	887a      	ldrh	r2, [r7, #2]
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	4013      	ands	r3, r2
 8000c6c:	041a      	lsls	r2, r3, #16
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	43d9      	mvns	r1, r3
 8000c72:	887b      	ldrh	r3, [r7, #2]
 8000c74:	400b      	ands	r3, r1
 8000c76:	431a      	orrs	r2, r3
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	619a      	str	r2, [r3, #24]
}
 8000c7c:	bf00      	nop
 8000c7e:	3714      	adds	r7, #20
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr

08000c88 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	4603      	mov	r3, r0
 8000c90:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000c92:	4b08      	ldr	r3, [pc, #32]	; (8000cb4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000c94:	695a      	ldr	r2, [r3, #20]
 8000c96:	88fb      	ldrh	r3, [r7, #6]
 8000c98:	4013      	ands	r3, r2
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d006      	beq.n	8000cac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000c9e:	4a05      	ldr	r2, [pc, #20]	; (8000cb4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000ca0:	88fb      	ldrh	r3, [r7, #6]
 8000ca2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000ca4:	88fb      	ldrh	r3, [r7, #6]
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f000 f806 	bl	8000cb8 <HAL_GPIO_EXTI_Callback>
  }
}
 8000cac:	bf00      	nop
 8000cae:	3708      	adds	r7, #8
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	40010400 	.word	0x40010400

08000cb8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000cc2:	bf00      	nop
 8000cc4:	370c      	adds	r7, #12
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
	...

08000cd0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000cdc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ce0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ce2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ce6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d102      	bne.n	8000cf6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	f001 b823 	b.w	8001d3c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cf6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000cfa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f003 0301 	and.w	r3, r3, #1
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	f000 817d 	beq.w	8001006 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000d0c:	4bbc      	ldr	r3, [pc, #752]	; (8001000 <HAL_RCC_OscConfig+0x330>)
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	f003 030c 	and.w	r3, r3, #12
 8000d14:	2b04      	cmp	r3, #4
 8000d16:	d00c      	beq.n	8000d32 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d18:	4bb9      	ldr	r3, [pc, #740]	; (8001000 <HAL_RCC_OscConfig+0x330>)
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	f003 030c 	and.w	r3, r3, #12
 8000d20:	2b08      	cmp	r3, #8
 8000d22:	d15c      	bne.n	8000dde <HAL_RCC_OscConfig+0x10e>
 8000d24:	4bb6      	ldr	r3, [pc, #728]	; (8001000 <HAL_RCC_OscConfig+0x330>)
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d30:	d155      	bne.n	8000dde <HAL_RCC_OscConfig+0x10e>
 8000d32:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d36:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d3a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000d3e:	fa93 f3a3 	rbit	r3, r3
 8000d42:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000d46:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d4a:	fab3 f383 	clz	r3, r3
 8000d4e:	b2db      	uxtb	r3, r3
 8000d50:	095b      	lsrs	r3, r3, #5
 8000d52:	b2db      	uxtb	r3, r3
 8000d54:	f043 0301 	orr.w	r3, r3, #1
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	2b01      	cmp	r3, #1
 8000d5c:	d102      	bne.n	8000d64 <HAL_RCC_OscConfig+0x94>
 8000d5e:	4ba8      	ldr	r3, [pc, #672]	; (8001000 <HAL_RCC_OscConfig+0x330>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	e015      	b.n	8000d90 <HAL_RCC_OscConfig+0xc0>
 8000d64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d68:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d6c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000d70:	fa93 f3a3 	rbit	r3, r3
 8000d74:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000d78:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d7c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000d80:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000d84:	fa93 f3a3 	rbit	r3, r3
 8000d88:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000d8c:	4b9c      	ldr	r3, [pc, #624]	; (8001000 <HAL_RCC_OscConfig+0x330>)
 8000d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d90:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000d94:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000d98:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000d9c:	fa92 f2a2 	rbit	r2, r2
 8000da0:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000da4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000da8:	fab2 f282 	clz	r2, r2
 8000dac:	b2d2      	uxtb	r2, r2
 8000dae:	f042 0220 	orr.w	r2, r2, #32
 8000db2:	b2d2      	uxtb	r2, r2
 8000db4:	f002 021f 	and.w	r2, r2, #31
 8000db8:	2101      	movs	r1, #1
 8000dba:	fa01 f202 	lsl.w	r2, r1, r2
 8000dbe:	4013      	ands	r3, r2
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	f000 811f 	beq.w	8001004 <HAL_RCC_OscConfig+0x334>
 8000dc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000dca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	f040 8116 	bne.w	8001004 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	f000 bfaf 	b.w	8001d3c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000de2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000dee:	d106      	bne.n	8000dfe <HAL_RCC_OscConfig+0x12e>
 8000df0:	4b83      	ldr	r3, [pc, #524]	; (8001000 <HAL_RCC_OscConfig+0x330>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a82      	ldr	r2, [pc, #520]	; (8001000 <HAL_RCC_OscConfig+0x330>)
 8000df6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dfa:	6013      	str	r3, [r2, #0]
 8000dfc:	e036      	b.n	8000e6c <HAL_RCC_OscConfig+0x19c>
 8000dfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e02:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d10c      	bne.n	8000e28 <HAL_RCC_OscConfig+0x158>
 8000e0e:	4b7c      	ldr	r3, [pc, #496]	; (8001000 <HAL_RCC_OscConfig+0x330>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a7b      	ldr	r2, [pc, #492]	; (8001000 <HAL_RCC_OscConfig+0x330>)
 8000e14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e18:	6013      	str	r3, [r2, #0]
 8000e1a:	4b79      	ldr	r3, [pc, #484]	; (8001000 <HAL_RCC_OscConfig+0x330>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4a78      	ldr	r2, [pc, #480]	; (8001000 <HAL_RCC_OscConfig+0x330>)
 8000e20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e24:	6013      	str	r3, [r2, #0]
 8000e26:	e021      	b.n	8000e6c <HAL_RCC_OscConfig+0x19c>
 8000e28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e2c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e38:	d10c      	bne.n	8000e54 <HAL_RCC_OscConfig+0x184>
 8000e3a:	4b71      	ldr	r3, [pc, #452]	; (8001000 <HAL_RCC_OscConfig+0x330>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4a70      	ldr	r2, [pc, #448]	; (8001000 <HAL_RCC_OscConfig+0x330>)
 8000e40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e44:	6013      	str	r3, [r2, #0]
 8000e46:	4b6e      	ldr	r3, [pc, #440]	; (8001000 <HAL_RCC_OscConfig+0x330>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4a6d      	ldr	r2, [pc, #436]	; (8001000 <HAL_RCC_OscConfig+0x330>)
 8000e4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e50:	6013      	str	r3, [r2, #0]
 8000e52:	e00b      	b.n	8000e6c <HAL_RCC_OscConfig+0x19c>
 8000e54:	4b6a      	ldr	r3, [pc, #424]	; (8001000 <HAL_RCC_OscConfig+0x330>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a69      	ldr	r2, [pc, #420]	; (8001000 <HAL_RCC_OscConfig+0x330>)
 8000e5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e5e:	6013      	str	r3, [r2, #0]
 8000e60:	4b67      	ldr	r3, [pc, #412]	; (8001000 <HAL_RCC_OscConfig+0x330>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a66      	ldr	r2, [pc, #408]	; (8001000 <HAL_RCC_OscConfig+0x330>)
 8000e66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e6a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000e6c:	4b64      	ldr	r3, [pc, #400]	; (8001000 <HAL_RCC_OscConfig+0x330>)
 8000e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e70:	f023 020f 	bic.w	r2, r3, #15
 8000e74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e78:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	689b      	ldr	r3, [r3, #8]
 8000e80:	495f      	ldr	r1, [pc, #380]	; (8001000 <HAL_RCC_OscConfig+0x330>)
 8000e82:	4313      	orrs	r3, r2
 8000e84:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e8a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d059      	beq.n	8000f4a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e96:	f7ff fc15 	bl	80006c4 <HAL_GetTick>
 8000e9a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e9e:	e00a      	b.n	8000eb6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ea0:	f7ff fc10 	bl	80006c4 <HAL_GetTick>
 8000ea4:	4602      	mov	r2, r0
 8000ea6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000eaa:	1ad3      	subs	r3, r2, r3
 8000eac:	2b64      	cmp	r3, #100	; 0x64
 8000eae:	d902      	bls.n	8000eb6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8000eb0:	2303      	movs	r3, #3
 8000eb2:	f000 bf43 	b.w	8001d3c <HAL_RCC_OscConfig+0x106c>
 8000eb6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000eba:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ebe:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000ec2:	fa93 f3a3 	rbit	r3, r3
 8000ec6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000eca:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ece:	fab3 f383 	clz	r3, r3
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	095b      	lsrs	r3, r3, #5
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	f043 0301 	orr.w	r3, r3, #1
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	d102      	bne.n	8000ee8 <HAL_RCC_OscConfig+0x218>
 8000ee2:	4b47      	ldr	r3, [pc, #284]	; (8001000 <HAL_RCC_OscConfig+0x330>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	e015      	b.n	8000f14 <HAL_RCC_OscConfig+0x244>
 8000ee8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000eec:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ef0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000ef4:	fa93 f3a3 	rbit	r3, r3
 8000ef8:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000efc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f00:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000f04:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000f08:	fa93 f3a3 	rbit	r3, r3
 8000f0c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000f10:	4b3b      	ldr	r3, [pc, #236]	; (8001000 <HAL_RCC_OscConfig+0x330>)
 8000f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f14:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f18:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8000f1c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000f20:	fa92 f2a2 	rbit	r2, r2
 8000f24:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8000f28:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8000f2c:	fab2 f282 	clz	r2, r2
 8000f30:	b2d2      	uxtb	r2, r2
 8000f32:	f042 0220 	orr.w	r2, r2, #32
 8000f36:	b2d2      	uxtb	r2, r2
 8000f38:	f002 021f 	and.w	r2, r2, #31
 8000f3c:	2101      	movs	r1, #1
 8000f3e:	fa01 f202 	lsl.w	r2, r1, r2
 8000f42:	4013      	ands	r3, r2
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d0ab      	beq.n	8000ea0 <HAL_RCC_OscConfig+0x1d0>
 8000f48:	e05d      	b.n	8001006 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f4a:	f7ff fbbb 	bl	80006c4 <HAL_GetTick>
 8000f4e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f52:	e00a      	b.n	8000f6a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f54:	f7ff fbb6 	bl	80006c4 <HAL_GetTick>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000f5e:	1ad3      	subs	r3, r2, r3
 8000f60:	2b64      	cmp	r3, #100	; 0x64
 8000f62:	d902      	bls.n	8000f6a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8000f64:	2303      	movs	r3, #3
 8000f66:	f000 bee9 	b.w	8001d3c <HAL_RCC_OscConfig+0x106c>
 8000f6a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f6e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f72:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000f76:	fa93 f3a3 	rbit	r3, r3
 8000f7a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8000f7e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f82:	fab3 f383 	clz	r3, r3
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	095b      	lsrs	r3, r3, #5
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	f043 0301 	orr.w	r3, r3, #1
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d102      	bne.n	8000f9c <HAL_RCC_OscConfig+0x2cc>
 8000f96:	4b1a      	ldr	r3, [pc, #104]	; (8001000 <HAL_RCC_OscConfig+0x330>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	e015      	b.n	8000fc8 <HAL_RCC_OscConfig+0x2f8>
 8000f9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fa0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fa4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8000fa8:	fa93 f3a3 	rbit	r3, r3
 8000fac:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000fb0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fb4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000fb8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8000fbc:	fa93 f3a3 	rbit	r3, r3
 8000fc0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8000fc4:	4b0e      	ldr	r3, [pc, #56]	; (8001000 <HAL_RCC_OscConfig+0x330>)
 8000fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fc8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000fcc:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8000fd0:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000fd4:	fa92 f2a2 	rbit	r2, r2
 8000fd8:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8000fdc:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8000fe0:	fab2 f282 	clz	r2, r2
 8000fe4:	b2d2      	uxtb	r2, r2
 8000fe6:	f042 0220 	orr.w	r2, r2, #32
 8000fea:	b2d2      	uxtb	r2, r2
 8000fec:	f002 021f 	and.w	r2, r2, #31
 8000ff0:	2101      	movs	r1, #1
 8000ff2:	fa01 f202 	lsl.w	r2, r1, r2
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d1ab      	bne.n	8000f54 <HAL_RCC_OscConfig+0x284>
 8000ffc:	e003      	b.n	8001006 <HAL_RCC_OscConfig+0x336>
 8000ffe:	bf00      	nop
 8001000:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001004:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001006:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800100a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f003 0302 	and.w	r3, r3, #2
 8001016:	2b00      	cmp	r3, #0
 8001018:	f000 817d 	beq.w	8001316 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800101c:	4ba6      	ldr	r3, [pc, #664]	; (80012b8 <HAL_RCC_OscConfig+0x5e8>)
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	f003 030c 	and.w	r3, r3, #12
 8001024:	2b00      	cmp	r3, #0
 8001026:	d00b      	beq.n	8001040 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001028:	4ba3      	ldr	r3, [pc, #652]	; (80012b8 <HAL_RCC_OscConfig+0x5e8>)
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f003 030c 	and.w	r3, r3, #12
 8001030:	2b08      	cmp	r3, #8
 8001032:	d172      	bne.n	800111a <HAL_RCC_OscConfig+0x44a>
 8001034:	4ba0      	ldr	r3, [pc, #640]	; (80012b8 <HAL_RCC_OscConfig+0x5e8>)
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800103c:	2b00      	cmp	r3, #0
 800103e:	d16c      	bne.n	800111a <HAL_RCC_OscConfig+0x44a>
 8001040:	2302      	movs	r3, #2
 8001042:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001046:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800104a:	fa93 f3a3 	rbit	r3, r3
 800104e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001052:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001056:	fab3 f383 	clz	r3, r3
 800105a:	b2db      	uxtb	r3, r3
 800105c:	095b      	lsrs	r3, r3, #5
 800105e:	b2db      	uxtb	r3, r3
 8001060:	f043 0301 	orr.w	r3, r3, #1
 8001064:	b2db      	uxtb	r3, r3
 8001066:	2b01      	cmp	r3, #1
 8001068:	d102      	bne.n	8001070 <HAL_RCC_OscConfig+0x3a0>
 800106a:	4b93      	ldr	r3, [pc, #588]	; (80012b8 <HAL_RCC_OscConfig+0x5e8>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	e013      	b.n	8001098 <HAL_RCC_OscConfig+0x3c8>
 8001070:	2302      	movs	r3, #2
 8001072:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001076:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800107a:	fa93 f3a3 	rbit	r3, r3
 800107e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001082:	2302      	movs	r3, #2
 8001084:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001088:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800108c:	fa93 f3a3 	rbit	r3, r3
 8001090:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001094:	4b88      	ldr	r3, [pc, #544]	; (80012b8 <HAL_RCC_OscConfig+0x5e8>)
 8001096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001098:	2202      	movs	r2, #2
 800109a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800109e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80010a2:	fa92 f2a2 	rbit	r2, r2
 80010a6:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80010aa:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80010ae:	fab2 f282 	clz	r2, r2
 80010b2:	b2d2      	uxtb	r2, r2
 80010b4:	f042 0220 	orr.w	r2, r2, #32
 80010b8:	b2d2      	uxtb	r2, r2
 80010ba:	f002 021f 	and.w	r2, r2, #31
 80010be:	2101      	movs	r1, #1
 80010c0:	fa01 f202 	lsl.w	r2, r1, r2
 80010c4:	4013      	ands	r3, r2
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d00a      	beq.n	80010e0 <HAL_RCC_OscConfig+0x410>
 80010ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	691b      	ldr	r3, [r3, #16]
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d002      	beq.n	80010e0 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	f000 be2e 	b.w	8001d3c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010e0:	4b75      	ldr	r3, [pc, #468]	; (80012b8 <HAL_RCC_OscConfig+0x5e8>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010ec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	695b      	ldr	r3, [r3, #20]
 80010f4:	21f8      	movs	r1, #248	; 0xf8
 80010f6:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010fa:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80010fe:	fa91 f1a1 	rbit	r1, r1
 8001102:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001106:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800110a:	fab1 f181 	clz	r1, r1
 800110e:	b2c9      	uxtb	r1, r1
 8001110:	408b      	lsls	r3, r1
 8001112:	4969      	ldr	r1, [pc, #420]	; (80012b8 <HAL_RCC_OscConfig+0x5e8>)
 8001114:	4313      	orrs	r3, r2
 8001116:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001118:	e0fd      	b.n	8001316 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800111a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800111e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	691b      	ldr	r3, [r3, #16]
 8001126:	2b00      	cmp	r3, #0
 8001128:	f000 8088 	beq.w	800123c <HAL_RCC_OscConfig+0x56c>
 800112c:	2301      	movs	r3, #1
 800112e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001132:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001136:	fa93 f3a3 	rbit	r3, r3
 800113a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800113e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001142:	fab3 f383 	clz	r3, r3
 8001146:	b2db      	uxtb	r3, r3
 8001148:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800114c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001150:	009b      	lsls	r3, r3, #2
 8001152:	461a      	mov	r2, r3
 8001154:	2301      	movs	r3, #1
 8001156:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001158:	f7ff fab4 	bl	80006c4 <HAL_GetTick>
 800115c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001160:	e00a      	b.n	8001178 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001162:	f7ff faaf 	bl	80006c4 <HAL_GetTick>
 8001166:	4602      	mov	r2, r0
 8001168:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	2b02      	cmp	r3, #2
 8001170:	d902      	bls.n	8001178 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001172:	2303      	movs	r3, #3
 8001174:	f000 bde2 	b.w	8001d3c <HAL_RCC_OscConfig+0x106c>
 8001178:	2302      	movs	r3, #2
 800117a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800117e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001182:	fa93 f3a3 	rbit	r3, r3
 8001186:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800118a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800118e:	fab3 f383 	clz	r3, r3
 8001192:	b2db      	uxtb	r3, r3
 8001194:	095b      	lsrs	r3, r3, #5
 8001196:	b2db      	uxtb	r3, r3
 8001198:	f043 0301 	orr.w	r3, r3, #1
 800119c:	b2db      	uxtb	r3, r3
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d102      	bne.n	80011a8 <HAL_RCC_OscConfig+0x4d8>
 80011a2:	4b45      	ldr	r3, [pc, #276]	; (80012b8 <HAL_RCC_OscConfig+0x5e8>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	e013      	b.n	80011d0 <HAL_RCC_OscConfig+0x500>
 80011a8:	2302      	movs	r3, #2
 80011aa:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011ae:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80011b2:	fa93 f3a3 	rbit	r3, r3
 80011b6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80011ba:	2302      	movs	r3, #2
 80011bc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80011c0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80011c4:	fa93 f3a3 	rbit	r3, r3
 80011c8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80011cc:	4b3a      	ldr	r3, [pc, #232]	; (80012b8 <HAL_RCC_OscConfig+0x5e8>)
 80011ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d0:	2202      	movs	r2, #2
 80011d2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80011d6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80011da:	fa92 f2a2 	rbit	r2, r2
 80011de:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80011e2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80011e6:	fab2 f282 	clz	r2, r2
 80011ea:	b2d2      	uxtb	r2, r2
 80011ec:	f042 0220 	orr.w	r2, r2, #32
 80011f0:	b2d2      	uxtb	r2, r2
 80011f2:	f002 021f 	and.w	r2, r2, #31
 80011f6:	2101      	movs	r1, #1
 80011f8:	fa01 f202 	lsl.w	r2, r1, r2
 80011fc:	4013      	ands	r3, r2
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d0af      	beq.n	8001162 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001202:	4b2d      	ldr	r3, [pc, #180]	; (80012b8 <HAL_RCC_OscConfig+0x5e8>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800120a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800120e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	695b      	ldr	r3, [r3, #20]
 8001216:	21f8      	movs	r1, #248	; 0xf8
 8001218:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800121c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001220:	fa91 f1a1 	rbit	r1, r1
 8001224:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001228:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800122c:	fab1 f181 	clz	r1, r1
 8001230:	b2c9      	uxtb	r1, r1
 8001232:	408b      	lsls	r3, r1
 8001234:	4920      	ldr	r1, [pc, #128]	; (80012b8 <HAL_RCC_OscConfig+0x5e8>)
 8001236:	4313      	orrs	r3, r2
 8001238:	600b      	str	r3, [r1, #0]
 800123a:	e06c      	b.n	8001316 <HAL_RCC_OscConfig+0x646>
 800123c:	2301      	movs	r3, #1
 800123e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001242:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001246:	fa93 f3a3 	rbit	r3, r3
 800124a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800124e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001252:	fab3 f383 	clz	r3, r3
 8001256:	b2db      	uxtb	r3, r3
 8001258:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800125c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	461a      	mov	r2, r3
 8001264:	2300      	movs	r3, #0
 8001266:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001268:	f7ff fa2c 	bl	80006c4 <HAL_GetTick>
 800126c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001270:	e00a      	b.n	8001288 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001272:	f7ff fa27 	bl	80006c4 <HAL_GetTick>
 8001276:	4602      	mov	r2, r0
 8001278:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	2b02      	cmp	r3, #2
 8001280:	d902      	bls.n	8001288 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001282:	2303      	movs	r3, #3
 8001284:	f000 bd5a 	b.w	8001d3c <HAL_RCC_OscConfig+0x106c>
 8001288:	2302      	movs	r3, #2
 800128a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800128e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001292:	fa93 f3a3 	rbit	r3, r3
 8001296:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800129a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800129e:	fab3 f383 	clz	r3, r3
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	095b      	lsrs	r3, r3, #5
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	f043 0301 	orr.w	r3, r3, #1
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d104      	bne.n	80012bc <HAL_RCC_OscConfig+0x5ec>
 80012b2:	4b01      	ldr	r3, [pc, #4]	; (80012b8 <HAL_RCC_OscConfig+0x5e8>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	e015      	b.n	80012e4 <HAL_RCC_OscConfig+0x614>
 80012b8:	40021000 	.word	0x40021000
 80012bc:	2302      	movs	r3, #2
 80012be:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80012c6:	fa93 f3a3 	rbit	r3, r3
 80012ca:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80012ce:	2302      	movs	r3, #2
 80012d0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80012d4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80012d8:	fa93 f3a3 	rbit	r3, r3
 80012dc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80012e0:	4bc8      	ldr	r3, [pc, #800]	; (8001604 <HAL_RCC_OscConfig+0x934>)
 80012e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e4:	2202      	movs	r2, #2
 80012e6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80012ea:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80012ee:	fa92 f2a2 	rbit	r2, r2
 80012f2:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80012f6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80012fa:	fab2 f282 	clz	r2, r2
 80012fe:	b2d2      	uxtb	r2, r2
 8001300:	f042 0220 	orr.w	r2, r2, #32
 8001304:	b2d2      	uxtb	r2, r2
 8001306:	f002 021f 	and.w	r2, r2, #31
 800130a:	2101      	movs	r1, #1
 800130c:	fa01 f202 	lsl.w	r2, r1, r2
 8001310:	4013      	ands	r3, r2
 8001312:	2b00      	cmp	r3, #0
 8001314:	d1ad      	bne.n	8001272 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001316:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800131a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f003 0308 	and.w	r3, r3, #8
 8001326:	2b00      	cmp	r3, #0
 8001328:	f000 8110 	beq.w	800154c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800132c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001330:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	699b      	ldr	r3, [r3, #24]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d079      	beq.n	8001430 <HAL_RCC_OscConfig+0x760>
 800133c:	2301      	movs	r3, #1
 800133e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001342:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001346:	fa93 f3a3 	rbit	r3, r3
 800134a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800134e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001352:	fab3 f383 	clz	r3, r3
 8001356:	b2db      	uxtb	r3, r3
 8001358:	461a      	mov	r2, r3
 800135a:	4bab      	ldr	r3, [pc, #684]	; (8001608 <HAL_RCC_OscConfig+0x938>)
 800135c:	4413      	add	r3, r2
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	461a      	mov	r2, r3
 8001362:	2301      	movs	r3, #1
 8001364:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001366:	f7ff f9ad 	bl	80006c4 <HAL_GetTick>
 800136a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800136e:	e00a      	b.n	8001386 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001370:	f7ff f9a8 	bl	80006c4 <HAL_GetTick>
 8001374:	4602      	mov	r2, r0
 8001376:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800137a:	1ad3      	subs	r3, r2, r3
 800137c:	2b02      	cmp	r3, #2
 800137e:	d902      	bls.n	8001386 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001380:	2303      	movs	r3, #3
 8001382:	f000 bcdb 	b.w	8001d3c <HAL_RCC_OscConfig+0x106c>
 8001386:	2302      	movs	r3, #2
 8001388:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800138c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001390:	fa93 f3a3 	rbit	r3, r3
 8001394:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001398:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800139c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80013a0:	2202      	movs	r2, #2
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013a8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	fa93 f2a3 	rbit	r2, r3
 80013b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80013c4:	2202      	movs	r2, #2
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	fa93 f2a3 	rbit	r2, r3
 80013d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013da:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80013de:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013e0:	4b88      	ldr	r3, [pc, #544]	; (8001604 <HAL_RCC_OscConfig+0x934>)
 80013e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013e8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80013ec:	2102      	movs	r1, #2
 80013ee:	6019      	str	r1, [r3, #0]
 80013f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013f4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	fa93 f1a3 	rbit	r1, r3
 80013fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001402:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001406:	6019      	str	r1, [r3, #0]
  return result;
 8001408:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800140c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	fab3 f383 	clz	r3, r3
 8001416:	b2db      	uxtb	r3, r3
 8001418:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800141c:	b2db      	uxtb	r3, r3
 800141e:	f003 031f 	and.w	r3, r3, #31
 8001422:	2101      	movs	r1, #1
 8001424:	fa01 f303 	lsl.w	r3, r1, r3
 8001428:	4013      	ands	r3, r2
 800142a:	2b00      	cmp	r3, #0
 800142c:	d0a0      	beq.n	8001370 <HAL_RCC_OscConfig+0x6a0>
 800142e:	e08d      	b.n	800154c <HAL_RCC_OscConfig+0x87c>
 8001430:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001434:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001438:	2201      	movs	r2, #1
 800143a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800143c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001440:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	fa93 f2a3 	rbit	r2, r3
 800144a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800144e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001452:	601a      	str	r2, [r3, #0]
  return result;
 8001454:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001458:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800145c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800145e:	fab3 f383 	clz	r3, r3
 8001462:	b2db      	uxtb	r3, r3
 8001464:	461a      	mov	r2, r3
 8001466:	4b68      	ldr	r3, [pc, #416]	; (8001608 <HAL_RCC_OscConfig+0x938>)
 8001468:	4413      	add	r3, r2
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	461a      	mov	r2, r3
 800146e:	2300      	movs	r3, #0
 8001470:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001472:	f7ff f927 	bl	80006c4 <HAL_GetTick>
 8001476:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800147a:	e00a      	b.n	8001492 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800147c:	f7ff f922 	bl	80006c4 <HAL_GetTick>
 8001480:	4602      	mov	r2, r0
 8001482:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001486:	1ad3      	subs	r3, r2, r3
 8001488:	2b02      	cmp	r3, #2
 800148a:	d902      	bls.n	8001492 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800148c:	2303      	movs	r3, #3
 800148e:	f000 bc55 	b.w	8001d3c <HAL_RCC_OscConfig+0x106c>
 8001492:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001496:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800149a:	2202      	movs	r2, #2
 800149c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800149e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014a2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	fa93 f2a3 	rbit	r2, r3
 80014ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014b0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80014b4:	601a      	str	r2, [r3, #0]
 80014b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014ba:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80014be:	2202      	movs	r2, #2
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014c6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	fa93 f2a3 	rbit	r2, r3
 80014d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80014d8:	601a      	str	r2, [r3, #0]
 80014da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80014e2:	2202      	movs	r2, #2
 80014e4:	601a      	str	r2, [r3, #0]
 80014e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	fa93 f2a3 	rbit	r2, r3
 80014f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014f8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80014fc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014fe:	4b41      	ldr	r3, [pc, #260]	; (8001604 <HAL_RCC_OscConfig+0x934>)
 8001500:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001502:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001506:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800150a:	2102      	movs	r1, #2
 800150c:	6019      	str	r1, [r3, #0]
 800150e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001512:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	fa93 f1a3 	rbit	r1, r3
 800151c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001520:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001524:	6019      	str	r1, [r3, #0]
  return result;
 8001526:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800152a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	fab3 f383 	clz	r3, r3
 8001534:	b2db      	uxtb	r3, r3
 8001536:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800153a:	b2db      	uxtb	r3, r3
 800153c:	f003 031f 	and.w	r3, r3, #31
 8001540:	2101      	movs	r1, #1
 8001542:	fa01 f303 	lsl.w	r3, r1, r3
 8001546:	4013      	ands	r3, r2
 8001548:	2b00      	cmp	r3, #0
 800154a:	d197      	bne.n	800147c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800154c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001550:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f003 0304 	and.w	r3, r3, #4
 800155c:	2b00      	cmp	r3, #0
 800155e:	f000 81a1 	beq.w	80018a4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001562:	2300      	movs	r3, #0
 8001564:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001568:	4b26      	ldr	r3, [pc, #152]	; (8001604 <HAL_RCC_OscConfig+0x934>)
 800156a:	69db      	ldr	r3, [r3, #28]
 800156c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001570:	2b00      	cmp	r3, #0
 8001572:	d116      	bne.n	80015a2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001574:	4b23      	ldr	r3, [pc, #140]	; (8001604 <HAL_RCC_OscConfig+0x934>)
 8001576:	69db      	ldr	r3, [r3, #28]
 8001578:	4a22      	ldr	r2, [pc, #136]	; (8001604 <HAL_RCC_OscConfig+0x934>)
 800157a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800157e:	61d3      	str	r3, [r2, #28]
 8001580:	4b20      	ldr	r3, [pc, #128]	; (8001604 <HAL_RCC_OscConfig+0x934>)
 8001582:	69db      	ldr	r3, [r3, #28]
 8001584:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001588:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800158c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001590:	601a      	str	r2, [r3, #0]
 8001592:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001596:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800159a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800159c:	2301      	movs	r3, #1
 800159e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015a2:	4b1a      	ldr	r3, [pc, #104]	; (800160c <HAL_RCC_OscConfig+0x93c>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d11a      	bne.n	80015e4 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015ae:	4b17      	ldr	r3, [pc, #92]	; (800160c <HAL_RCC_OscConfig+0x93c>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a16      	ldr	r2, [pc, #88]	; (800160c <HAL_RCC_OscConfig+0x93c>)
 80015b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015b8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015ba:	f7ff f883 	bl	80006c4 <HAL_GetTick>
 80015be:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015c2:	e009      	b.n	80015d8 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015c4:	f7ff f87e 	bl	80006c4 <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	2b64      	cmp	r3, #100	; 0x64
 80015d2:	d901      	bls.n	80015d8 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80015d4:	2303      	movs	r3, #3
 80015d6:	e3b1      	b.n	8001d3c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015d8:	4b0c      	ldr	r3, [pc, #48]	; (800160c <HAL_RCC_OscConfig+0x93c>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d0ef      	beq.n	80015c4 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015e8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d10d      	bne.n	8001610 <HAL_RCC_OscConfig+0x940>
 80015f4:	4b03      	ldr	r3, [pc, #12]	; (8001604 <HAL_RCC_OscConfig+0x934>)
 80015f6:	6a1b      	ldr	r3, [r3, #32]
 80015f8:	4a02      	ldr	r2, [pc, #8]	; (8001604 <HAL_RCC_OscConfig+0x934>)
 80015fa:	f043 0301 	orr.w	r3, r3, #1
 80015fe:	6213      	str	r3, [r2, #32]
 8001600:	e03c      	b.n	800167c <HAL_RCC_OscConfig+0x9ac>
 8001602:	bf00      	nop
 8001604:	40021000 	.word	0x40021000
 8001608:	10908120 	.word	0x10908120
 800160c:	40007000 	.word	0x40007000
 8001610:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001614:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d10c      	bne.n	800163a <HAL_RCC_OscConfig+0x96a>
 8001620:	4bc1      	ldr	r3, [pc, #772]	; (8001928 <HAL_RCC_OscConfig+0xc58>)
 8001622:	6a1b      	ldr	r3, [r3, #32]
 8001624:	4ac0      	ldr	r2, [pc, #768]	; (8001928 <HAL_RCC_OscConfig+0xc58>)
 8001626:	f023 0301 	bic.w	r3, r3, #1
 800162a:	6213      	str	r3, [r2, #32]
 800162c:	4bbe      	ldr	r3, [pc, #760]	; (8001928 <HAL_RCC_OscConfig+0xc58>)
 800162e:	6a1b      	ldr	r3, [r3, #32]
 8001630:	4abd      	ldr	r2, [pc, #756]	; (8001928 <HAL_RCC_OscConfig+0xc58>)
 8001632:	f023 0304 	bic.w	r3, r3, #4
 8001636:	6213      	str	r3, [r2, #32]
 8001638:	e020      	b.n	800167c <HAL_RCC_OscConfig+0x9ac>
 800163a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800163e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	68db      	ldr	r3, [r3, #12]
 8001646:	2b05      	cmp	r3, #5
 8001648:	d10c      	bne.n	8001664 <HAL_RCC_OscConfig+0x994>
 800164a:	4bb7      	ldr	r3, [pc, #732]	; (8001928 <HAL_RCC_OscConfig+0xc58>)
 800164c:	6a1b      	ldr	r3, [r3, #32]
 800164e:	4ab6      	ldr	r2, [pc, #728]	; (8001928 <HAL_RCC_OscConfig+0xc58>)
 8001650:	f043 0304 	orr.w	r3, r3, #4
 8001654:	6213      	str	r3, [r2, #32]
 8001656:	4bb4      	ldr	r3, [pc, #720]	; (8001928 <HAL_RCC_OscConfig+0xc58>)
 8001658:	6a1b      	ldr	r3, [r3, #32]
 800165a:	4ab3      	ldr	r2, [pc, #716]	; (8001928 <HAL_RCC_OscConfig+0xc58>)
 800165c:	f043 0301 	orr.w	r3, r3, #1
 8001660:	6213      	str	r3, [r2, #32]
 8001662:	e00b      	b.n	800167c <HAL_RCC_OscConfig+0x9ac>
 8001664:	4bb0      	ldr	r3, [pc, #704]	; (8001928 <HAL_RCC_OscConfig+0xc58>)
 8001666:	6a1b      	ldr	r3, [r3, #32]
 8001668:	4aaf      	ldr	r2, [pc, #700]	; (8001928 <HAL_RCC_OscConfig+0xc58>)
 800166a:	f023 0301 	bic.w	r3, r3, #1
 800166e:	6213      	str	r3, [r2, #32]
 8001670:	4bad      	ldr	r3, [pc, #692]	; (8001928 <HAL_RCC_OscConfig+0xc58>)
 8001672:	6a1b      	ldr	r3, [r3, #32]
 8001674:	4aac      	ldr	r2, [pc, #688]	; (8001928 <HAL_RCC_OscConfig+0xc58>)
 8001676:	f023 0304 	bic.w	r3, r3, #4
 800167a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800167c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001680:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	2b00      	cmp	r3, #0
 800168a:	f000 8081 	beq.w	8001790 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800168e:	f7ff f819 	bl	80006c4 <HAL_GetTick>
 8001692:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001696:	e00b      	b.n	80016b0 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001698:	f7ff f814 	bl	80006c4 <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80016a2:	1ad3      	subs	r3, r2, r3
 80016a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d901      	bls.n	80016b0 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80016ac:	2303      	movs	r3, #3
 80016ae:	e345      	b.n	8001d3c <HAL_RCC_OscConfig+0x106c>
 80016b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016b4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80016b8:	2202      	movs	r2, #2
 80016ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016c0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	fa93 f2a3 	rbit	r2, r3
 80016ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016ce:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80016d2:	601a      	str	r2, [r3, #0]
 80016d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016d8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80016dc:	2202      	movs	r2, #2
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016e4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	fa93 f2a3 	rbit	r2, r3
 80016ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016f2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80016f6:	601a      	str	r2, [r3, #0]
  return result;
 80016f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016fc:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001700:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001702:	fab3 f383 	clz	r3, r3
 8001706:	b2db      	uxtb	r3, r3
 8001708:	095b      	lsrs	r3, r3, #5
 800170a:	b2db      	uxtb	r3, r3
 800170c:	f043 0302 	orr.w	r3, r3, #2
 8001710:	b2db      	uxtb	r3, r3
 8001712:	2b02      	cmp	r3, #2
 8001714:	d102      	bne.n	800171c <HAL_RCC_OscConfig+0xa4c>
 8001716:	4b84      	ldr	r3, [pc, #528]	; (8001928 <HAL_RCC_OscConfig+0xc58>)
 8001718:	6a1b      	ldr	r3, [r3, #32]
 800171a:	e013      	b.n	8001744 <HAL_RCC_OscConfig+0xa74>
 800171c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001720:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001724:	2202      	movs	r2, #2
 8001726:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001728:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800172c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	fa93 f2a3 	rbit	r2, r3
 8001736:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800173a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	4b79      	ldr	r3, [pc, #484]	; (8001928 <HAL_RCC_OscConfig+0xc58>)
 8001742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001744:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001748:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800174c:	2102      	movs	r1, #2
 800174e:	6011      	str	r1, [r2, #0]
 8001750:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001754:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001758:	6812      	ldr	r2, [r2, #0]
 800175a:	fa92 f1a2 	rbit	r1, r2
 800175e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001762:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001766:	6011      	str	r1, [r2, #0]
  return result;
 8001768:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800176c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001770:	6812      	ldr	r2, [r2, #0]
 8001772:	fab2 f282 	clz	r2, r2
 8001776:	b2d2      	uxtb	r2, r2
 8001778:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800177c:	b2d2      	uxtb	r2, r2
 800177e:	f002 021f 	and.w	r2, r2, #31
 8001782:	2101      	movs	r1, #1
 8001784:	fa01 f202 	lsl.w	r2, r1, r2
 8001788:	4013      	ands	r3, r2
 800178a:	2b00      	cmp	r3, #0
 800178c:	d084      	beq.n	8001698 <HAL_RCC_OscConfig+0x9c8>
 800178e:	e07f      	b.n	8001890 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001790:	f7fe ff98 	bl	80006c4 <HAL_GetTick>
 8001794:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001798:	e00b      	b.n	80017b2 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800179a:	f7fe ff93 	bl	80006c4 <HAL_GetTick>
 800179e:	4602      	mov	r2, r0
 80017a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d901      	bls.n	80017b2 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e2c4      	b.n	8001d3c <HAL_RCC_OscConfig+0x106c>
 80017b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017b6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80017ba:	2202      	movs	r2, #2
 80017bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017c2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	fa93 f2a3 	rbit	r2, r3
 80017cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017d0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80017d4:	601a      	str	r2, [r3, #0]
 80017d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017da:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80017de:	2202      	movs	r2, #2
 80017e0:	601a      	str	r2, [r3, #0]
 80017e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017e6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	fa93 f2a3 	rbit	r2, r3
 80017f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017f4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80017f8:	601a      	str	r2, [r3, #0]
  return result;
 80017fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017fe:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001802:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001804:	fab3 f383 	clz	r3, r3
 8001808:	b2db      	uxtb	r3, r3
 800180a:	095b      	lsrs	r3, r3, #5
 800180c:	b2db      	uxtb	r3, r3
 800180e:	f043 0302 	orr.w	r3, r3, #2
 8001812:	b2db      	uxtb	r3, r3
 8001814:	2b02      	cmp	r3, #2
 8001816:	d102      	bne.n	800181e <HAL_RCC_OscConfig+0xb4e>
 8001818:	4b43      	ldr	r3, [pc, #268]	; (8001928 <HAL_RCC_OscConfig+0xc58>)
 800181a:	6a1b      	ldr	r3, [r3, #32]
 800181c:	e013      	b.n	8001846 <HAL_RCC_OscConfig+0xb76>
 800181e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001822:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001826:	2202      	movs	r2, #2
 8001828:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800182a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800182e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	fa93 f2a3 	rbit	r2, r3
 8001838:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800183c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001840:	601a      	str	r2, [r3, #0]
 8001842:	4b39      	ldr	r3, [pc, #228]	; (8001928 <HAL_RCC_OscConfig+0xc58>)
 8001844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001846:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800184a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800184e:	2102      	movs	r1, #2
 8001850:	6011      	str	r1, [r2, #0]
 8001852:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001856:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800185a:	6812      	ldr	r2, [r2, #0]
 800185c:	fa92 f1a2 	rbit	r1, r2
 8001860:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001864:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001868:	6011      	str	r1, [r2, #0]
  return result;
 800186a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800186e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001872:	6812      	ldr	r2, [r2, #0]
 8001874:	fab2 f282 	clz	r2, r2
 8001878:	b2d2      	uxtb	r2, r2
 800187a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800187e:	b2d2      	uxtb	r2, r2
 8001880:	f002 021f 	and.w	r2, r2, #31
 8001884:	2101      	movs	r1, #1
 8001886:	fa01 f202 	lsl.w	r2, r1, r2
 800188a:	4013      	ands	r3, r2
 800188c:	2b00      	cmp	r3, #0
 800188e:	d184      	bne.n	800179a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001890:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001894:	2b01      	cmp	r3, #1
 8001896:	d105      	bne.n	80018a4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001898:	4b23      	ldr	r3, [pc, #140]	; (8001928 <HAL_RCC_OscConfig+0xc58>)
 800189a:	69db      	ldr	r3, [r3, #28]
 800189c:	4a22      	ldr	r2, [pc, #136]	; (8001928 <HAL_RCC_OscConfig+0xc58>)
 800189e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018a2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018a8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	69db      	ldr	r3, [r3, #28]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	f000 8242 	beq.w	8001d3a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018b6:	4b1c      	ldr	r3, [pc, #112]	; (8001928 <HAL_RCC_OscConfig+0xc58>)
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	f003 030c 	and.w	r3, r3, #12
 80018be:	2b08      	cmp	r3, #8
 80018c0:	f000 8213 	beq.w	8001cea <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018c8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	69db      	ldr	r3, [r3, #28]
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	f040 8162 	bne.w	8001b9a <HAL_RCC_OscConfig+0xeca>
 80018d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018da:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80018de:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80018e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018e8:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	fa93 f2a3 	rbit	r2, r3
 80018f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018f6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80018fa:	601a      	str	r2, [r3, #0]
  return result;
 80018fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001900:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001904:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001906:	fab3 f383 	clz	r3, r3
 800190a:	b2db      	uxtb	r3, r3
 800190c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001910:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	461a      	mov	r2, r3
 8001918:	2300      	movs	r3, #0
 800191a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800191c:	f7fe fed2 	bl	80006c4 <HAL_GetTick>
 8001920:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001924:	e00c      	b.n	8001940 <HAL_RCC_OscConfig+0xc70>
 8001926:	bf00      	nop
 8001928:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800192c:	f7fe feca 	bl	80006c4 <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	2b02      	cmp	r3, #2
 800193a:	d901      	bls.n	8001940 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800193c:	2303      	movs	r3, #3
 800193e:	e1fd      	b.n	8001d3c <HAL_RCC_OscConfig+0x106c>
 8001940:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001944:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001948:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800194c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800194e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001952:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	fa93 f2a3 	rbit	r2, r3
 800195c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001960:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001964:	601a      	str	r2, [r3, #0]
  return result;
 8001966:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800196a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800196e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001970:	fab3 f383 	clz	r3, r3
 8001974:	b2db      	uxtb	r3, r3
 8001976:	095b      	lsrs	r3, r3, #5
 8001978:	b2db      	uxtb	r3, r3
 800197a:	f043 0301 	orr.w	r3, r3, #1
 800197e:	b2db      	uxtb	r3, r3
 8001980:	2b01      	cmp	r3, #1
 8001982:	d102      	bne.n	800198a <HAL_RCC_OscConfig+0xcba>
 8001984:	4bb0      	ldr	r3, [pc, #704]	; (8001c48 <HAL_RCC_OscConfig+0xf78>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	e027      	b.n	80019da <HAL_RCC_OscConfig+0xd0a>
 800198a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800198e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001992:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001996:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001998:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800199c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	fa93 f2a3 	rbit	r2, r3
 80019a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019aa:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80019ae:	601a      	str	r2, [r3, #0]
 80019b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019b4:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80019b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019bc:	601a      	str	r2, [r3, #0]
 80019be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019c2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	fa93 f2a3 	rbit	r2, r3
 80019cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019d0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80019d4:	601a      	str	r2, [r3, #0]
 80019d6:	4b9c      	ldr	r3, [pc, #624]	; (8001c48 <HAL_RCC_OscConfig+0xf78>)
 80019d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019da:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019de:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80019e2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80019e6:	6011      	str	r1, [r2, #0]
 80019e8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019ec:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80019f0:	6812      	ldr	r2, [r2, #0]
 80019f2:	fa92 f1a2 	rbit	r1, r2
 80019f6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019fa:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80019fe:	6011      	str	r1, [r2, #0]
  return result;
 8001a00:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a04:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001a08:	6812      	ldr	r2, [r2, #0]
 8001a0a:	fab2 f282 	clz	r2, r2
 8001a0e:	b2d2      	uxtb	r2, r2
 8001a10:	f042 0220 	orr.w	r2, r2, #32
 8001a14:	b2d2      	uxtb	r2, r2
 8001a16:	f002 021f 	and.w	r2, r2, #31
 8001a1a:	2101      	movs	r1, #1
 8001a1c:	fa01 f202 	lsl.w	r2, r1, r2
 8001a20:	4013      	ands	r3, r2
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d182      	bne.n	800192c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a26:	4b88      	ldr	r3, [pc, #544]	; (8001c48 <HAL_RCC_OscConfig+0xf78>)
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001a2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a32:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001a3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a3e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	6a1b      	ldr	r3, [r3, #32]
 8001a46:	430b      	orrs	r3, r1
 8001a48:	497f      	ldr	r1, [pc, #508]	; (8001c48 <HAL_RCC_OscConfig+0xf78>)
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	604b      	str	r3, [r1, #4]
 8001a4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a52:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001a56:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a60:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	fa93 f2a3 	rbit	r2, r3
 8001a6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a6e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001a72:	601a      	str	r2, [r3, #0]
  return result;
 8001a74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a78:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001a7c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a7e:	fab3 f383 	clz	r3, r3
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a88:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	461a      	mov	r2, r3
 8001a90:	2301      	movs	r3, #1
 8001a92:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a94:	f7fe fe16 	bl	80006c4 <HAL_GetTick>
 8001a98:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a9c:	e009      	b.n	8001ab2 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a9e:	f7fe fe11 	bl	80006c4 <HAL_GetTick>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d901      	bls.n	8001ab2 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e144      	b.n	8001d3c <HAL_RCC_OscConfig+0x106c>
 8001ab2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ab6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001aba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001abe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ac4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	fa93 f2a3 	rbit	r2, r3
 8001ace:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ad2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001ad6:	601a      	str	r2, [r3, #0]
  return result;
 8001ad8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001adc:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001ae0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ae2:	fab3 f383 	clz	r3, r3
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	095b      	lsrs	r3, r3, #5
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	f043 0301 	orr.w	r3, r3, #1
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d102      	bne.n	8001afc <HAL_RCC_OscConfig+0xe2c>
 8001af6:	4b54      	ldr	r3, [pc, #336]	; (8001c48 <HAL_RCC_OscConfig+0xf78>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	e027      	b.n	8001b4c <HAL_RCC_OscConfig+0xe7c>
 8001afc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b00:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001b04:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b0e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	fa93 f2a3 	rbit	r2, r3
 8001b18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b1c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001b20:	601a      	str	r2, [r3, #0]
 8001b22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b26:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001b2a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b2e:	601a      	str	r2, [r3, #0]
 8001b30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b34:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	fa93 f2a3 	rbit	r2, r3
 8001b3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b42:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	4b3f      	ldr	r3, [pc, #252]	; (8001c48 <HAL_RCC_OscConfig+0xf78>)
 8001b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b4c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b50:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001b54:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001b58:	6011      	str	r1, [r2, #0]
 8001b5a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b5e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001b62:	6812      	ldr	r2, [r2, #0]
 8001b64:	fa92 f1a2 	rbit	r1, r2
 8001b68:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b6c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001b70:	6011      	str	r1, [r2, #0]
  return result;
 8001b72:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b76:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001b7a:	6812      	ldr	r2, [r2, #0]
 8001b7c:	fab2 f282 	clz	r2, r2
 8001b80:	b2d2      	uxtb	r2, r2
 8001b82:	f042 0220 	orr.w	r2, r2, #32
 8001b86:	b2d2      	uxtb	r2, r2
 8001b88:	f002 021f 	and.w	r2, r2, #31
 8001b8c:	2101      	movs	r1, #1
 8001b8e:	fa01 f202 	lsl.w	r2, r1, r2
 8001b92:	4013      	ands	r3, r2
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d082      	beq.n	8001a9e <HAL_RCC_OscConfig+0xdce>
 8001b98:	e0cf      	b.n	8001d3a <HAL_RCC_OscConfig+0x106a>
 8001b9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b9e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001ba2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001ba6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bac:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	fa93 f2a3 	rbit	r2, r3
 8001bb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bba:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001bbe:	601a      	str	r2, [r3, #0]
  return result;
 8001bc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bc4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001bc8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bca:	fab3 f383 	clz	r3, r3
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001bd4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	461a      	mov	r2, r3
 8001bdc:	2300      	movs	r3, #0
 8001bde:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be0:	f7fe fd70 	bl	80006c4 <HAL_GetTick>
 8001be4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001be8:	e009      	b.n	8001bfe <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bea:	f7fe fd6b 	bl	80006c4 <HAL_GetTick>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d901      	bls.n	8001bfe <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e09e      	b.n	8001d3c <HAL_RCC_OscConfig+0x106c>
 8001bfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c02:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001c06:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c10:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	fa93 f2a3 	rbit	r2, r3
 8001c1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c1e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001c22:	601a      	str	r2, [r3, #0]
  return result;
 8001c24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c28:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001c2c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c2e:	fab3 f383 	clz	r3, r3
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	095b      	lsrs	r3, r3, #5
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	f043 0301 	orr.w	r3, r3, #1
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d104      	bne.n	8001c4c <HAL_RCC_OscConfig+0xf7c>
 8001c42:	4b01      	ldr	r3, [pc, #4]	; (8001c48 <HAL_RCC_OscConfig+0xf78>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	e029      	b.n	8001c9c <HAL_RCC_OscConfig+0xfcc>
 8001c48:	40021000 	.word	0x40021000
 8001c4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c50:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001c54:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c5e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	fa93 f2a3 	rbit	r2, r3
 8001c68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c6c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001c70:	601a      	str	r2, [r3, #0]
 8001c72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c76:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001c7a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c7e:	601a      	str	r2, [r3, #0]
 8001c80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c84:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	fa93 f2a3 	rbit	r2, r3
 8001c8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c92:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001c96:	601a      	str	r2, [r3, #0]
 8001c98:	4b2b      	ldr	r3, [pc, #172]	; (8001d48 <HAL_RCC_OscConfig+0x1078>)
 8001c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c9c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ca0:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001ca4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ca8:	6011      	str	r1, [r2, #0]
 8001caa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001cae:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001cb2:	6812      	ldr	r2, [r2, #0]
 8001cb4:	fa92 f1a2 	rbit	r1, r2
 8001cb8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001cbc:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001cc0:	6011      	str	r1, [r2, #0]
  return result;
 8001cc2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001cc6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001cca:	6812      	ldr	r2, [r2, #0]
 8001ccc:	fab2 f282 	clz	r2, r2
 8001cd0:	b2d2      	uxtb	r2, r2
 8001cd2:	f042 0220 	orr.w	r2, r2, #32
 8001cd6:	b2d2      	uxtb	r2, r2
 8001cd8:	f002 021f 	and.w	r2, r2, #31
 8001cdc:	2101      	movs	r1, #1
 8001cde:	fa01 f202 	lsl.w	r2, r1, r2
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d180      	bne.n	8001bea <HAL_RCC_OscConfig+0xf1a>
 8001ce8:	e027      	b.n	8001d3a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	69db      	ldr	r3, [r3, #28]
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d101      	bne.n	8001cfe <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e01e      	b.n	8001d3c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001cfe:	4b12      	ldr	r3, [pc, #72]	; (8001d48 <HAL_RCC_OscConfig+0x1078>)
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001d06:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001d0a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d12:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	6a1b      	ldr	r3, [r3, #32]
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d10b      	bne.n	8001d36 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001d1e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001d22:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d2a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001d32:	429a      	cmp	r2, r3
 8001d34:	d001      	beq.n	8001d3a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e000      	b.n	8001d3c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001d3a:	2300      	movs	r3, #0
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	40021000 	.word	0x40021000

08001d4c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b09e      	sub	sp, #120	; 0x78
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001d56:	2300      	movs	r3, #0
 8001d58:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d101      	bne.n	8001d64 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e162      	b.n	800202a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d64:	4b90      	ldr	r3, [pc, #576]	; (8001fa8 <HAL_RCC_ClockConfig+0x25c>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 0307 	and.w	r3, r3, #7
 8001d6c:	683a      	ldr	r2, [r7, #0]
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d910      	bls.n	8001d94 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d72:	4b8d      	ldr	r3, [pc, #564]	; (8001fa8 <HAL_RCC_ClockConfig+0x25c>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f023 0207 	bic.w	r2, r3, #7
 8001d7a:	498b      	ldr	r1, [pc, #556]	; (8001fa8 <HAL_RCC_ClockConfig+0x25c>)
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d82:	4b89      	ldr	r3, [pc, #548]	; (8001fa8 <HAL_RCC_ClockConfig+0x25c>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0307 	and.w	r3, r3, #7
 8001d8a:	683a      	ldr	r2, [r7, #0]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d001      	beq.n	8001d94 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e14a      	b.n	800202a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0302 	and.w	r3, r3, #2
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d008      	beq.n	8001db2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001da0:	4b82      	ldr	r3, [pc, #520]	; (8001fac <HAL_RCC_ClockConfig+0x260>)
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	497f      	ldr	r1, [pc, #508]	; (8001fac <HAL_RCC_ClockConfig+0x260>)
 8001dae:	4313      	orrs	r3, r2
 8001db0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0301 	and.w	r3, r3, #1
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	f000 80dc 	beq.w	8001f78 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d13c      	bne.n	8001e42 <HAL_RCC_ClockConfig+0xf6>
 8001dc8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dcc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001dd0:	fa93 f3a3 	rbit	r3, r3
 8001dd4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001dd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dd8:	fab3 f383 	clz	r3, r3
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	095b      	lsrs	r3, r3, #5
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	f043 0301 	orr.w	r3, r3, #1
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d102      	bne.n	8001df2 <HAL_RCC_ClockConfig+0xa6>
 8001dec:	4b6f      	ldr	r3, [pc, #444]	; (8001fac <HAL_RCC_ClockConfig+0x260>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	e00f      	b.n	8001e12 <HAL_RCC_ClockConfig+0xc6>
 8001df2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001df6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001dfa:	fa93 f3a3 	rbit	r3, r3
 8001dfe:	667b      	str	r3, [r7, #100]	; 0x64
 8001e00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e04:	663b      	str	r3, [r7, #96]	; 0x60
 8001e06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e08:	fa93 f3a3 	rbit	r3, r3
 8001e0c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001e0e:	4b67      	ldr	r3, [pc, #412]	; (8001fac <HAL_RCC_ClockConfig+0x260>)
 8001e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e12:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e16:	65ba      	str	r2, [r7, #88]	; 0x58
 8001e18:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001e1a:	fa92 f2a2 	rbit	r2, r2
 8001e1e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001e20:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001e22:	fab2 f282 	clz	r2, r2
 8001e26:	b2d2      	uxtb	r2, r2
 8001e28:	f042 0220 	orr.w	r2, r2, #32
 8001e2c:	b2d2      	uxtb	r2, r2
 8001e2e:	f002 021f 	and.w	r2, r2, #31
 8001e32:	2101      	movs	r1, #1
 8001e34:	fa01 f202 	lsl.w	r2, r1, r2
 8001e38:	4013      	ands	r3, r2
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d17b      	bne.n	8001f36 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e0f3      	b.n	800202a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d13c      	bne.n	8001ec4 <HAL_RCC_ClockConfig+0x178>
 8001e4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e4e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e52:	fa93 f3a3 	rbit	r3, r3
 8001e56:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001e58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e5a:	fab3 f383 	clz	r3, r3
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	095b      	lsrs	r3, r3, #5
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	f043 0301 	orr.w	r3, r3, #1
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d102      	bne.n	8001e74 <HAL_RCC_ClockConfig+0x128>
 8001e6e:	4b4f      	ldr	r3, [pc, #316]	; (8001fac <HAL_RCC_ClockConfig+0x260>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	e00f      	b.n	8001e94 <HAL_RCC_ClockConfig+0x148>
 8001e74:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e78:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e7c:	fa93 f3a3 	rbit	r3, r3
 8001e80:	647b      	str	r3, [r7, #68]	; 0x44
 8001e82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e86:	643b      	str	r3, [r7, #64]	; 0x40
 8001e88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e8a:	fa93 f3a3 	rbit	r3, r3
 8001e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e90:	4b46      	ldr	r3, [pc, #280]	; (8001fac <HAL_RCC_ClockConfig+0x260>)
 8001e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e94:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e98:	63ba      	str	r2, [r7, #56]	; 0x38
 8001e9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001e9c:	fa92 f2a2 	rbit	r2, r2
 8001ea0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001ea2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001ea4:	fab2 f282 	clz	r2, r2
 8001ea8:	b2d2      	uxtb	r2, r2
 8001eaa:	f042 0220 	orr.w	r2, r2, #32
 8001eae:	b2d2      	uxtb	r2, r2
 8001eb0:	f002 021f 	and.w	r2, r2, #31
 8001eb4:	2101      	movs	r1, #1
 8001eb6:	fa01 f202 	lsl.w	r2, r1, r2
 8001eba:	4013      	ands	r3, r2
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d13a      	bne.n	8001f36 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e0b2      	b.n	800202a <HAL_RCC_ClockConfig+0x2de>
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eca:	fa93 f3a3 	rbit	r3, r3
 8001ece:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ed2:	fab3 f383 	clz	r3, r3
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	095b      	lsrs	r3, r3, #5
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	f043 0301 	orr.w	r3, r3, #1
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d102      	bne.n	8001eec <HAL_RCC_ClockConfig+0x1a0>
 8001ee6:	4b31      	ldr	r3, [pc, #196]	; (8001fac <HAL_RCC_ClockConfig+0x260>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	e00d      	b.n	8001f08 <HAL_RCC_ClockConfig+0x1bc>
 8001eec:	2302      	movs	r3, #2
 8001eee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ef2:	fa93 f3a3 	rbit	r3, r3
 8001ef6:	627b      	str	r3, [r7, #36]	; 0x24
 8001ef8:	2302      	movs	r3, #2
 8001efa:	623b      	str	r3, [r7, #32]
 8001efc:	6a3b      	ldr	r3, [r7, #32]
 8001efe:	fa93 f3a3 	rbit	r3, r3
 8001f02:	61fb      	str	r3, [r7, #28]
 8001f04:	4b29      	ldr	r3, [pc, #164]	; (8001fac <HAL_RCC_ClockConfig+0x260>)
 8001f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f08:	2202      	movs	r2, #2
 8001f0a:	61ba      	str	r2, [r7, #24]
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	fa92 f2a2 	rbit	r2, r2
 8001f12:	617a      	str	r2, [r7, #20]
  return result;
 8001f14:	697a      	ldr	r2, [r7, #20]
 8001f16:	fab2 f282 	clz	r2, r2
 8001f1a:	b2d2      	uxtb	r2, r2
 8001f1c:	f042 0220 	orr.w	r2, r2, #32
 8001f20:	b2d2      	uxtb	r2, r2
 8001f22:	f002 021f 	and.w	r2, r2, #31
 8001f26:	2101      	movs	r1, #1
 8001f28:	fa01 f202 	lsl.w	r2, r1, r2
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d101      	bne.n	8001f36 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e079      	b.n	800202a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f36:	4b1d      	ldr	r3, [pc, #116]	; (8001fac <HAL_RCC_ClockConfig+0x260>)
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f023 0203 	bic.w	r2, r3, #3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	491a      	ldr	r1, [pc, #104]	; (8001fac <HAL_RCC_ClockConfig+0x260>)
 8001f44:	4313      	orrs	r3, r2
 8001f46:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f48:	f7fe fbbc 	bl	80006c4 <HAL_GetTick>
 8001f4c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f4e:	e00a      	b.n	8001f66 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f50:	f7fe fbb8 	bl	80006c4 <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d901      	bls.n	8001f66 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e061      	b.n	800202a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f66:	4b11      	ldr	r3, [pc, #68]	; (8001fac <HAL_RCC_ClockConfig+0x260>)
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f003 020c 	and.w	r2, r3, #12
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d1eb      	bne.n	8001f50 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f78:	4b0b      	ldr	r3, [pc, #44]	; (8001fa8 <HAL_RCC_ClockConfig+0x25c>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 0307 	and.w	r3, r3, #7
 8001f80:	683a      	ldr	r2, [r7, #0]
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d214      	bcs.n	8001fb0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f86:	4b08      	ldr	r3, [pc, #32]	; (8001fa8 <HAL_RCC_ClockConfig+0x25c>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f023 0207 	bic.w	r2, r3, #7
 8001f8e:	4906      	ldr	r1, [pc, #24]	; (8001fa8 <HAL_RCC_ClockConfig+0x25c>)
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f96:	4b04      	ldr	r3, [pc, #16]	; (8001fa8 <HAL_RCC_ClockConfig+0x25c>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0307 	and.w	r3, r3, #7
 8001f9e:	683a      	ldr	r2, [r7, #0]
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d005      	beq.n	8001fb0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e040      	b.n	800202a <HAL_RCC_ClockConfig+0x2de>
 8001fa8:	40022000 	.word	0x40022000
 8001fac:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0304 	and.w	r3, r3, #4
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d008      	beq.n	8001fce <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fbc:	4b1d      	ldr	r3, [pc, #116]	; (8002034 <HAL_RCC_ClockConfig+0x2e8>)
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	491a      	ldr	r1, [pc, #104]	; (8002034 <HAL_RCC_ClockConfig+0x2e8>)
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0308 	and.w	r3, r3, #8
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d009      	beq.n	8001fee <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fda:	4b16      	ldr	r3, [pc, #88]	; (8002034 <HAL_RCC_ClockConfig+0x2e8>)
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	691b      	ldr	r3, [r3, #16]
 8001fe6:	00db      	lsls	r3, r3, #3
 8001fe8:	4912      	ldr	r1, [pc, #72]	; (8002034 <HAL_RCC_ClockConfig+0x2e8>)
 8001fea:	4313      	orrs	r3, r2
 8001fec:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001fee:	f000 f829 	bl	8002044 <HAL_RCC_GetSysClockFreq>
 8001ff2:	4601      	mov	r1, r0
 8001ff4:	4b0f      	ldr	r3, [pc, #60]	; (8002034 <HAL_RCC_ClockConfig+0x2e8>)
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ffc:	22f0      	movs	r2, #240	; 0xf0
 8001ffe:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002000:	693a      	ldr	r2, [r7, #16]
 8002002:	fa92 f2a2 	rbit	r2, r2
 8002006:	60fa      	str	r2, [r7, #12]
  return result;
 8002008:	68fa      	ldr	r2, [r7, #12]
 800200a:	fab2 f282 	clz	r2, r2
 800200e:	b2d2      	uxtb	r2, r2
 8002010:	40d3      	lsrs	r3, r2
 8002012:	4a09      	ldr	r2, [pc, #36]	; (8002038 <HAL_RCC_ClockConfig+0x2ec>)
 8002014:	5cd3      	ldrb	r3, [r2, r3]
 8002016:	fa21 f303 	lsr.w	r3, r1, r3
 800201a:	4a08      	ldr	r2, [pc, #32]	; (800203c <HAL_RCC_ClockConfig+0x2f0>)
 800201c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800201e:	4b08      	ldr	r3, [pc, #32]	; (8002040 <HAL_RCC_ClockConfig+0x2f4>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4618      	mov	r0, r3
 8002024:	f7fe fb0a 	bl	800063c <HAL_InitTick>
  
  return HAL_OK;
 8002028:	2300      	movs	r3, #0
}
 800202a:	4618      	mov	r0, r3
 800202c:	3778      	adds	r7, #120	; 0x78
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	40021000 	.word	0x40021000
 8002038:	08006968 	.word	0x08006968
 800203c:	20000000 	.word	0x20000000
 8002040:	20000004 	.word	0x20000004

08002044 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002044:	b480      	push	{r7}
 8002046:	b08b      	sub	sp, #44	; 0x2c
 8002048:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800204a:	2300      	movs	r3, #0
 800204c:	61fb      	str	r3, [r7, #28]
 800204e:	2300      	movs	r3, #0
 8002050:	61bb      	str	r3, [r7, #24]
 8002052:	2300      	movs	r3, #0
 8002054:	627b      	str	r3, [r7, #36]	; 0x24
 8002056:	2300      	movs	r3, #0
 8002058:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800205a:	2300      	movs	r3, #0
 800205c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800205e:	4b29      	ldr	r3, [pc, #164]	; (8002104 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	f003 030c 	and.w	r3, r3, #12
 800206a:	2b04      	cmp	r3, #4
 800206c:	d002      	beq.n	8002074 <HAL_RCC_GetSysClockFreq+0x30>
 800206e:	2b08      	cmp	r3, #8
 8002070:	d003      	beq.n	800207a <HAL_RCC_GetSysClockFreq+0x36>
 8002072:	e03c      	b.n	80020ee <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002074:	4b24      	ldr	r3, [pc, #144]	; (8002108 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002076:	623b      	str	r3, [r7, #32]
      break;
 8002078:	e03c      	b.n	80020f4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002080:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002084:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002086:	68ba      	ldr	r2, [r7, #8]
 8002088:	fa92 f2a2 	rbit	r2, r2
 800208c:	607a      	str	r2, [r7, #4]
  return result;
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	fab2 f282 	clz	r2, r2
 8002094:	b2d2      	uxtb	r2, r2
 8002096:	40d3      	lsrs	r3, r2
 8002098:	4a1c      	ldr	r2, [pc, #112]	; (800210c <HAL_RCC_GetSysClockFreq+0xc8>)
 800209a:	5cd3      	ldrb	r3, [r2, r3]
 800209c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800209e:	4b19      	ldr	r3, [pc, #100]	; (8002104 <HAL_RCC_GetSysClockFreq+0xc0>)
 80020a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a2:	f003 030f 	and.w	r3, r3, #15
 80020a6:	220f      	movs	r2, #15
 80020a8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020aa:	693a      	ldr	r2, [r7, #16]
 80020ac:	fa92 f2a2 	rbit	r2, r2
 80020b0:	60fa      	str	r2, [r7, #12]
  return result;
 80020b2:	68fa      	ldr	r2, [r7, #12]
 80020b4:	fab2 f282 	clz	r2, r2
 80020b8:	b2d2      	uxtb	r2, r2
 80020ba:	40d3      	lsrs	r3, r2
 80020bc:	4a14      	ldr	r2, [pc, #80]	; (8002110 <HAL_RCC_GetSysClockFreq+0xcc>)
 80020be:	5cd3      	ldrb	r3, [r2, r3]
 80020c0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d008      	beq.n	80020de <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80020cc:	4a0e      	ldr	r2, [pc, #56]	; (8002108 <HAL_RCC_GetSysClockFreq+0xc4>)
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	fb02 f303 	mul.w	r3, r2, r3
 80020da:	627b      	str	r3, [r7, #36]	; 0x24
 80020dc:	e004      	b.n	80020e8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	4a0c      	ldr	r2, [pc, #48]	; (8002114 <HAL_RCC_GetSysClockFreq+0xd0>)
 80020e2:	fb02 f303 	mul.w	r3, r2, r3
 80020e6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80020e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ea:	623b      	str	r3, [r7, #32]
      break;
 80020ec:	e002      	b.n	80020f4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80020ee:	4b06      	ldr	r3, [pc, #24]	; (8002108 <HAL_RCC_GetSysClockFreq+0xc4>)
 80020f0:	623b      	str	r3, [r7, #32]
      break;
 80020f2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020f4:	6a3b      	ldr	r3, [r7, #32]
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	372c      	adds	r7, #44	; 0x2c
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	40021000 	.word	0x40021000
 8002108:	007a1200 	.word	0x007a1200
 800210c:	08006978 	.word	0x08006978
 8002110:	08006988 	.word	0x08006988
 8002114:	003d0900 	.word	0x003d0900

08002118 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002118:	b480      	push	{r7}
 800211a:	b085      	sub	sp, #20
 800211c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800211e:	f3ef 8305 	mrs	r3, IPSR
 8002122:	60bb      	str	r3, [r7, #8]
  return(result);
 8002124:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002126:	2b00      	cmp	r3, #0
 8002128:	d10f      	bne.n	800214a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800212a:	f3ef 8310 	mrs	r3, PRIMASK
 800212e:	607b      	str	r3, [r7, #4]
  return(result);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d109      	bne.n	800214a <osKernelInitialize+0x32>
 8002136:	4b11      	ldr	r3, [pc, #68]	; (800217c <osKernelInitialize+0x64>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	2b02      	cmp	r3, #2
 800213c:	d109      	bne.n	8002152 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800213e:	f3ef 8311 	mrs	r3, BASEPRI
 8002142:	603b      	str	r3, [r7, #0]
  return(result);
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d003      	beq.n	8002152 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800214a:	f06f 0305 	mvn.w	r3, #5
 800214e:	60fb      	str	r3, [r7, #12]
 8002150:	e00c      	b.n	800216c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002152:	4b0a      	ldr	r3, [pc, #40]	; (800217c <osKernelInitialize+0x64>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d105      	bne.n	8002166 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800215a:	4b08      	ldr	r3, [pc, #32]	; (800217c <osKernelInitialize+0x64>)
 800215c:	2201      	movs	r2, #1
 800215e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002160:	2300      	movs	r3, #0
 8002162:	60fb      	str	r3, [r7, #12]
 8002164:	e002      	b.n	800216c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8002166:	f04f 33ff 	mov.w	r3, #4294967295
 800216a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800216c:	68fb      	ldr	r3, [r7, #12]
}
 800216e:	4618      	mov	r0, r3
 8002170:	3714      	adds	r7, #20
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	20000098 	.word	0x20000098

08002180 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002180:	b580      	push	{r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002186:	f3ef 8305 	mrs	r3, IPSR
 800218a:	60bb      	str	r3, [r7, #8]
  return(result);
 800218c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800218e:	2b00      	cmp	r3, #0
 8002190:	d10f      	bne.n	80021b2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002192:	f3ef 8310 	mrs	r3, PRIMASK
 8002196:	607b      	str	r3, [r7, #4]
  return(result);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d109      	bne.n	80021b2 <osKernelStart+0x32>
 800219e:	4b11      	ldr	r3, [pc, #68]	; (80021e4 <osKernelStart+0x64>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d109      	bne.n	80021ba <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80021a6:	f3ef 8311 	mrs	r3, BASEPRI
 80021aa:	603b      	str	r3, [r7, #0]
  return(result);
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d003      	beq.n	80021ba <osKernelStart+0x3a>
    stat = osErrorISR;
 80021b2:	f06f 0305 	mvn.w	r3, #5
 80021b6:	60fb      	str	r3, [r7, #12]
 80021b8:	e00e      	b.n	80021d8 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80021ba:	4b0a      	ldr	r3, [pc, #40]	; (80021e4 <osKernelStart+0x64>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d107      	bne.n	80021d2 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80021c2:	4b08      	ldr	r3, [pc, #32]	; (80021e4 <osKernelStart+0x64>)
 80021c4:	2202      	movs	r2, #2
 80021c6:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80021c8:	f001 f85c 	bl	8003284 <vTaskStartScheduler>
      stat = osOK;
 80021cc:	2300      	movs	r3, #0
 80021ce:	60fb      	str	r3, [r7, #12]
 80021d0:	e002      	b.n	80021d8 <osKernelStart+0x58>
    } else {
      stat = osError;
 80021d2:	f04f 33ff 	mov.w	r3, #4294967295
 80021d6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80021d8:	68fb      	ldr	r3, [r7, #12]
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3710      	adds	r7, #16
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	20000098 	.word	0x20000098

080021e8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80021e8:	b480      	push	{r7}
 80021ea:	b085      	sub	sp, #20
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	60b9      	str	r1, [r7, #8]
 80021f2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	4a07      	ldr	r2, [pc, #28]	; (8002214 <vApplicationGetIdleTaskMemory+0x2c>)
 80021f8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	4a06      	ldr	r2, [pc, #24]	; (8002218 <vApplicationGetIdleTaskMemory+0x30>)
 80021fe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2280      	movs	r2, #128	; 0x80
 8002204:	601a      	str	r2, [r3, #0]
}
 8002206:	bf00      	nop
 8002208:	3714      	adds	r7, #20
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	2000009c 	.word	0x2000009c
 8002218:	20000158 	.word	0x20000158

0800221c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800221c:	b480      	push	{r7}
 800221e:	b085      	sub	sp, #20
 8002220:	af00      	add	r7, sp, #0
 8002222:	60f8      	str	r0, [r7, #12]
 8002224:	60b9      	str	r1, [r7, #8]
 8002226:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	4a07      	ldr	r2, [pc, #28]	; (8002248 <vApplicationGetTimerTaskMemory+0x2c>)
 800222c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	4a06      	ldr	r2, [pc, #24]	; (800224c <vApplicationGetTimerTaskMemory+0x30>)
 8002232:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f44f 7280 	mov.w	r2, #256	; 0x100
 800223a:	601a      	str	r2, [r3, #0]
}
 800223c:	bf00      	nop
 800223e:	3714      	adds	r7, #20
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr
 8002248:	20000358 	.word	0x20000358
 800224c:	20000414 	.word	0x20000414

08002250 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	f103 0208 	add.w	r2, r3, #8
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	f04f 32ff 	mov.w	r2, #4294967295
 8002268:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	f103 0208 	add.w	r2, r3, #8
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f103 0208 	add.w	r2, r3, #8
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002284:	bf00      	nop
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2200      	movs	r2, #0
 800229c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800229e:	bf00      	nop
 80022a0:	370c      	adds	r7, #12
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr

080022aa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80022aa:	b480      	push	{r7}
 80022ac:	b085      	sub	sp, #20
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	6078      	str	r0, [r7, #4]
 80022b2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	68fa      	ldr	r2, [r7, #12]
 80022be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	689a      	ldr	r2, [r3, #8]
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	683a      	ldr	r2, [r7, #0]
 80022ce:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	683a      	ldr	r2, [r7, #0]
 80022d4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	687a      	ldr	r2, [r7, #4]
 80022da:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	1c5a      	adds	r2, r3, #1
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	601a      	str	r2, [r3, #0]
}
 80022e6:	bf00      	nop
 80022e8:	3714      	adds	r7, #20
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr

080022f2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80022f2:	b480      	push	{r7}
 80022f4:	b085      	sub	sp, #20
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	6078      	str	r0, [r7, #4]
 80022fa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002308:	d103      	bne.n	8002312 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	691b      	ldr	r3, [r3, #16]
 800230e:	60fb      	str	r3, [r7, #12]
 8002310:	e00c      	b.n	800232c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	3308      	adds	r3, #8
 8002316:	60fb      	str	r3, [r7, #12]
 8002318:	e002      	b.n	8002320 <vListInsert+0x2e>
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	60fb      	str	r3, [r7, #12]
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	68ba      	ldr	r2, [r7, #8]
 8002328:	429a      	cmp	r2, r3
 800232a:	d2f6      	bcs.n	800231a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	685a      	ldr	r2, [r3, #4]
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	683a      	ldr	r2, [r7, #0]
 800233a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	68fa      	ldr	r2, [r7, #12]
 8002340:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	683a      	ldr	r2, [r7, #0]
 8002346:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	1c5a      	adds	r2, r3, #1
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	601a      	str	r2, [r3, #0]
}
 8002358:	bf00      	nop
 800235a:	3714      	adds	r7, #20
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002364:	b480      	push	{r7}
 8002366:	b085      	sub	sp, #20
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	691b      	ldr	r3, [r3, #16]
 8002370:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	6892      	ldr	r2, [r2, #8]
 800237a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	6852      	ldr	r2, [r2, #4]
 8002384:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	429a      	cmp	r2, r3
 800238e:	d103      	bne.n	8002398 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	689a      	ldr	r2, [r3, #8]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2200      	movs	r2, #0
 800239c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	1e5a      	subs	r2, r3, #1
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3714      	adds	r7, #20
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr

080023b8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d10a      	bne.n	80023e2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80023cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023d0:	f383 8811 	msr	BASEPRI, r3
 80023d4:	f3bf 8f6f 	isb	sy
 80023d8:	f3bf 8f4f 	dsb	sy
 80023dc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80023de:	bf00      	nop
 80023e0:	e7fe      	b.n	80023e0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80023e2:	f002 f947 	bl	8004674 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ee:	68f9      	ldr	r1, [r7, #12]
 80023f0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80023f2:	fb01 f303 	mul.w	r3, r1, r3
 80023f6:	441a      	add	r2, r3
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2200      	movs	r2, #0
 8002400:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002412:	3b01      	subs	r3, #1
 8002414:	68f9      	ldr	r1, [r7, #12]
 8002416:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002418:	fb01 f303 	mul.w	r3, r1, r3
 800241c:	441a      	add	r2, r3
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	22ff      	movs	r2, #255	; 0xff
 8002426:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	22ff      	movs	r2, #255	; 0xff
 800242e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d114      	bne.n	8002462 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	691b      	ldr	r3, [r3, #16]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d01a      	beq.n	8002476 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	3310      	adds	r3, #16
 8002444:	4618      	mov	r0, r3
 8002446:	f001 f9eb 	bl	8003820 <xTaskRemoveFromEventList>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d012      	beq.n	8002476 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002450:	4b0c      	ldr	r3, [pc, #48]	; (8002484 <xQueueGenericReset+0xcc>)
 8002452:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002456:	601a      	str	r2, [r3, #0]
 8002458:	f3bf 8f4f 	dsb	sy
 800245c:	f3bf 8f6f 	isb	sy
 8002460:	e009      	b.n	8002476 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	3310      	adds	r3, #16
 8002466:	4618      	mov	r0, r3
 8002468:	f7ff fef2 	bl	8002250 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	3324      	adds	r3, #36	; 0x24
 8002470:	4618      	mov	r0, r3
 8002472:	f7ff feed 	bl	8002250 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002476:	f002 f92d 	bl	80046d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800247a:	2301      	movs	r3, #1
}
 800247c:	4618      	mov	r0, r3
 800247e:	3710      	adds	r7, #16
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	e000ed04 	.word	0xe000ed04

08002488 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002488:	b580      	push	{r7, lr}
 800248a:	b08e      	sub	sp, #56	; 0x38
 800248c:	af02      	add	r7, sp, #8
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	60b9      	str	r1, [r7, #8]
 8002492:	607a      	str	r2, [r7, #4]
 8002494:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d10a      	bne.n	80024b2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800249c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024a0:	f383 8811 	msr	BASEPRI, r3
 80024a4:	f3bf 8f6f 	isb	sy
 80024a8:	f3bf 8f4f 	dsb	sy
 80024ac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80024ae:	bf00      	nop
 80024b0:	e7fe      	b.n	80024b0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d10a      	bne.n	80024ce <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80024b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024bc:	f383 8811 	msr	BASEPRI, r3
 80024c0:	f3bf 8f6f 	isb	sy
 80024c4:	f3bf 8f4f 	dsb	sy
 80024c8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80024ca:	bf00      	nop
 80024cc:	e7fe      	b.n	80024cc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d002      	beq.n	80024da <xQueueGenericCreateStatic+0x52>
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d001      	beq.n	80024de <xQueueGenericCreateStatic+0x56>
 80024da:	2301      	movs	r3, #1
 80024dc:	e000      	b.n	80024e0 <xQueueGenericCreateStatic+0x58>
 80024de:	2300      	movs	r3, #0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d10a      	bne.n	80024fa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80024e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024e8:	f383 8811 	msr	BASEPRI, r3
 80024ec:	f3bf 8f6f 	isb	sy
 80024f0:	f3bf 8f4f 	dsb	sy
 80024f4:	623b      	str	r3, [r7, #32]
}
 80024f6:	bf00      	nop
 80024f8:	e7fe      	b.n	80024f8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d102      	bne.n	8002506 <xQueueGenericCreateStatic+0x7e>
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d101      	bne.n	800250a <xQueueGenericCreateStatic+0x82>
 8002506:	2301      	movs	r3, #1
 8002508:	e000      	b.n	800250c <xQueueGenericCreateStatic+0x84>
 800250a:	2300      	movs	r3, #0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d10a      	bne.n	8002526 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002514:	f383 8811 	msr	BASEPRI, r3
 8002518:	f3bf 8f6f 	isb	sy
 800251c:	f3bf 8f4f 	dsb	sy
 8002520:	61fb      	str	r3, [r7, #28]
}
 8002522:	bf00      	nop
 8002524:	e7fe      	b.n	8002524 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002526:	2350      	movs	r3, #80	; 0x50
 8002528:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	2b50      	cmp	r3, #80	; 0x50
 800252e:	d00a      	beq.n	8002546 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002534:	f383 8811 	msr	BASEPRI, r3
 8002538:	f3bf 8f6f 	isb	sy
 800253c:	f3bf 8f4f 	dsb	sy
 8002540:	61bb      	str	r3, [r7, #24]
}
 8002542:	bf00      	nop
 8002544:	e7fe      	b.n	8002544 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800254a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800254c:	2b00      	cmp	r3, #0
 800254e:	d00d      	beq.n	800256c <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002552:	2201      	movs	r2, #1
 8002554:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002558:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800255c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800255e:	9300      	str	r3, [sp, #0]
 8002560:	4613      	mov	r3, r2
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	68b9      	ldr	r1, [r7, #8]
 8002566:	68f8      	ldr	r0, [r7, #12]
 8002568:	f000 f805 	bl	8002576 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800256c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800256e:	4618      	mov	r0, r3
 8002570:	3730      	adds	r7, #48	; 0x30
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}

08002576 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002576:	b580      	push	{r7, lr}
 8002578:	b084      	sub	sp, #16
 800257a:	af00      	add	r7, sp, #0
 800257c:	60f8      	str	r0, [r7, #12]
 800257e:	60b9      	str	r1, [r7, #8]
 8002580:	607a      	str	r2, [r7, #4]
 8002582:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d103      	bne.n	8002592 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	69ba      	ldr	r2, [r7, #24]
 800258e:	601a      	str	r2, [r3, #0]
 8002590:	e002      	b.n	8002598 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002592:	69bb      	ldr	r3, [r7, #24]
 8002594:	687a      	ldr	r2, [r7, #4]
 8002596:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	68fa      	ldr	r2, [r7, #12]
 800259c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800259e:	69bb      	ldr	r3, [r7, #24]
 80025a0:	68ba      	ldr	r2, [r7, #8]
 80025a2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80025a4:	2101      	movs	r1, #1
 80025a6:	69b8      	ldr	r0, [r7, #24]
 80025a8:	f7ff ff06 	bl	80023b8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	78fa      	ldrb	r2, [r7, #3]
 80025b0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 80025b4:	78fb      	ldrb	r3, [r7, #3]
 80025b6:	68ba      	ldr	r2, [r7, #8]
 80025b8:	68f9      	ldr	r1, [r7, #12]
 80025ba:	2073      	movs	r0, #115	; 0x73
 80025bc:	f003 f9ea 	bl	8005994 <SEGGER_SYSVIEW_RecordU32x3>
}
 80025c0:	bf00      	nop
 80025c2:	3710      	adds	r7, #16
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b090      	sub	sp, #64	; 0x40
 80025cc:	af02      	add	r7, sp, #8
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	60b9      	str	r1, [r7, #8]
 80025d2:	607a      	str	r2, [r7, #4]
 80025d4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80025d6:	2300      	movs	r3, #0
 80025d8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80025de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d10a      	bne.n	80025fa <xQueueGenericSend+0x32>
	__asm volatile
 80025e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025e8:	f383 8811 	msr	BASEPRI, r3
 80025ec:	f3bf 8f6f 	isb	sy
 80025f0:	f3bf 8f4f 	dsb	sy
 80025f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80025f6:	bf00      	nop
 80025f8:	e7fe      	b.n	80025f8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d103      	bne.n	8002608 <xQueueGenericSend+0x40>
 8002600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002604:	2b00      	cmp	r3, #0
 8002606:	d101      	bne.n	800260c <xQueueGenericSend+0x44>
 8002608:	2301      	movs	r3, #1
 800260a:	e000      	b.n	800260e <xQueueGenericSend+0x46>
 800260c:	2300      	movs	r3, #0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d10a      	bne.n	8002628 <xQueueGenericSend+0x60>
	__asm volatile
 8002612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002616:	f383 8811 	msr	BASEPRI, r3
 800261a:	f3bf 8f6f 	isb	sy
 800261e:	f3bf 8f4f 	dsb	sy
 8002622:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002624:	bf00      	nop
 8002626:	e7fe      	b.n	8002626 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	2b02      	cmp	r3, #2
 800262c:	d103      	bne.n	8002636 <xQueueGenericSend+0x6e>
 800262e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002632:	2b01      	cmp	r3, #1
 8002634:	d101      	bne.n	800263a <xQueueGenericSend+0x72>
 8002636:	2301      	movs	r3, #1
 8002638:	e000      	b.n	800263c <xQueueGenericSend+0x74>
 800263a:	2300      	movs	r3, #0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d10a      	bne.n	8002656 <xQueueGenericSend+0x8e>
	__asm volatile
 8002640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002644:	f383 8811 	msr	BASEPRI, r3
 8002648:	f3bf 8f6f 	isb	sy
 800264c:	f3bf 8f4f 	dsb	sy
 8002650:	623b      	str	r3, [r7, #32]
}
 8002652:	bf00      	nop
 8002654:	e7fe      	b.n	8002654 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002656:	f001 fae7 	bl	8003c28 <xTaskGetSchedulerState>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d102      	bne.n	8002666 <xQueueGenericSend+0x9e>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d101      	bne.n	800266a <xQueueGenericSend+0xa2>
 8002666:	2301      	movs	r3, #1
 8002668:	e000      	b.n	800266c <xQueueGenericSend+0xa4>
 800266a:	2300      	movs	r3, #0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d10a      	bne.n	8002686 <xQueueGenericSend+0xbe>
	__asm volatile
 8002670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002674:	f383 8811 	msr	BASEPRI, r3
 8002678:	f3bf 8f6f 	isb	sy
 800267c:	f3bf 8f4f 	dsb	sy
 8002680:	61fb      	str	r3, [r7, #28]
}
 8002682:	bf00      	nop
 8002684:	e7fe      	b.n	8002684 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002686:	f001 fff5 	bl	8004674 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800268a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800268c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800268e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002692:	429a      	cmp	r2, r3
 8002694:	d302      	bcc.n	800269c <xQueueGenericSend+0xd4>
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	2b02      	cmp	r3, #2
 800269a:	d136      	bne.n	800270a <xQueueGenericSend+0x142>
			{
				traceQUEUE_SEND( pxQueue );
 800269c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800269e:	4618      	mov	r0, r3
 80026a0:	f003 fe88 	bl	80063b4 <SEGGER_SYSVIEW_ShrinkId>
 80026a4:	68ba      	ldr	r2, [r7, #8]
 80026a6:	6879      	ldr	r1, [r7, #4]
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	9300      	str	r3, [sp, #0]
 80026ac:	460b      	mov	r3, r1
 80026ae:	4601      	mov	r1, r0
 80026b0:	205a      	movs	r0, #90	; 0x5a
 80026b2:	f003 f9e5 	bl	8005a80 <SEGGER_SYSVIEW_RecordU32x4>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80026b6:	683a      	ldr	r2, [r7, #0]
 80026b8:	68b9      	ldr	r1, [r7, #8]
 80026ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026bc:	f000 fa66 	bl	8002b8c <prvCopyDataToQueue>
 80026c0:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80026c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d010      	beq.n	80026ec <xQueueGenericSend+0x124>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80026ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026cc:	3324      	adds	r3, #36	; 0x24
 80026ce:	4618      	mov	r0, r3
 80026d0:	f001 f8a6 	bl	8003820 <xTaskRemoveFromEventList>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d013      	beq.n	8002702 <xQueueGenericSend+0x13a>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80026da:	4b4d      	ldr	r3, [pc, #308]	; (8002810 <xQueueGenericSend+0x248>)
 80026dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026e0:	601a      	str	r2, [r3, #0]
 80026e2:	f3bf 8f4f 	dsb	sy
 80026e6:	f3bf 8f6f 	isb	sy
 80026ea:	e00a      	b.n	8002702 <xQueueGenericSend+0x13a>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80026ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d007      	beq.n	8002702 <xQueueGenericSend+0x13a>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80026f2:	4b47      	ldr	r3, [pc, #284]	; (8002810 <xQueueGenericSend+0x248>)
 80026f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026f8:	601a      	str	r2, [r3, #0]
 80026fa:	f3bf 8f4f 	dsb	sy
 80026fe:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002702:	f001 ffe7 	bl	80046d4 <vPortExitCritical>
				return pdPASS;
 8002706:	2301      	movs	r3, #1
 8002708:	e07d      	b.n	8002806 <xQueueGenericSend+0x23e>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d110      	bne.n	8002732 <xQueueGenericSend+0x16a>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002710:	f001 ffe0 	bl	80046d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 8002714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002716:	4618      	mov	r0, r3
 8002718:	f003 fe4c 	bl	80063b4 <SEGGER_SYSVIEW_ShrinkId>
 800271c:	68ba      	ldr	r2, [r7, #8]
 800271e:	6879      	ldr	r1, [r7, #4]
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	9300      	str	r3, [sp, #0]
 8002724:	460b      	mov	r3, r1
 8002726:	4601      	mov	r1, r0
 8002728:	205a      	movs	r0, #90	; 0x5a
 800272a:	f003 f9a9 	bl	8005a80 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_FULL;
 800272e:	2300      	movs	r3, #0
 8002730:	e069      	b.n	8002806 <xQueueGenericSend+0x23e>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002732:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002734:	2b00      	cmp	r3, #0
 8002736:	d106      	bne.n	8002746 <xQueueGenericSend+0x17e>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002738:	f107 0314 	add.w	r3, r7, #20
 800273c:	4618      	mov	r0, r3
 800273e:	f001 f8d7 	bl	80038f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002742:	2301      	movs	r3, #1
 8002744:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002746:	f001 ffc5 	bl	80046d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800274a:	f000 fe0b 	bl	8003364 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800274e:	f001 ff91 	bl	8004674 <vPortEnterCritical>
 8002752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002754:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002758:	b25b      	sxtb	r3, r3
 800275a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800275e:	d103      	bne.n	8002768 <xQueueGenericSend+0x1a0>
 8002760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002762:	2200      	movs	r2, #0
 8002764:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800276a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800276e:	b25b      	sxtb	r3, r3
 8002770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002774:	d103      	bne.n	800277e <xQueueGenericSend+0x1b6>
 8002776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002778:	2200      	movs	r2, #0
 800277a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800277e:	f001 ffa9 	bl	80046d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002782:	1d3a      	adds	r2, r7, #4
 8002784:	f107 0314 	add.w	r3, r7, #20
 8002788:	4611      	mov	r1, r2
 800278a:	4618      	mov	r0, r3
 800278c:	f001 f8c6 	bl	800391c <xTaskCheckForTimeOut>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d124      	bne.n	80027e0 <xQueueGenericSend+0x218>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002796:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002798:	f000 faf0 	bl	8002d7c <prvIsQueueFull>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d018      	beq.n	80027d4 <xQueueGenericSend+0x20c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80027a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027a4:	3310      	adds	r3, #16
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	4611      	mov	r1, r2
 80027aa:	4618      	mov	r0, r3
 80027ac:	f000 ffe6 	bl	800377c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80027b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80027b2:	f000 fa7b 	bl	8002cac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80027b6:	f000 fde3 	bl	8003380 <xTaskResumeAll>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	f47f af62 	bne.w	8002686 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80027c2:	4b13      	ldr	r3, [pc, #76]	; (8002810 <xQueueGenericSend+0x248>)
 80027c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027c8:	601a      	str	r2, [r3, #0]
 80027ca:	f3bf 8f4f 	dsb	sy
 80027ce:	f3bf 8f6f 	isb	sy
 80027d2:	e758      	b.n	8002686 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80027d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80027d6:	f000 fa69 	bl	8002cac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80027da:	f000 fdd1 	bl	8003380 <xTaskResumeAll>
 80027de:	e752      	b.n	8002686 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80027e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80027e2:	f000 fa63 	bl	8002cac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80027e6:	f000 fdcb 	bl	8003380 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 80027ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027ec:	4618      	mov	r0, r3
 80027ee:	f003 fde1 	bl	80063b4 <SEGGER_SYSVIEW_ShrinkId>
 80027f2:	68ba      	ldr	r2, [r7, #8]
 80027f4:	6879      	ldr	r1, [r7, #4]
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	9300      	str	r3, [sp, #0]
 80027fa:	460b      	mov	r3, r1
 80027fc:	4601      	mov	r1, r0
 80027fe:	205a      	movs	r0, #90	; 0x5a
 8002800:	f003 f93e 	bl	8005a80 <SEGGER_SYSVIEW_RecordU32x4>
			return errQUEUE_FULL;
 8002804:	2300      	movs	r3, #0
		}
	}
}
 8002806:	4618      	mov	r0, r3
 8002808:	3738      	adds	r7, #56	; 0x38
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	e000ed04 	.word	0xe000ed04

08002814 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b08e      	sub	sp, #56	; 0x38
 8002818:	af00      	add	r7, sp, #0
 800281a:	60f8      	str	r0, [r7, #12]
 800281c:	60b9      	str	r1, [r7, #8]
 800281e:	607a      	str	r2, [r7, #4]
 8002820:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002828:	2b00      	cmp	r3, #0
 800282a:	d10a      	bne.n	8002842 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800282c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002830:	f383 8811 	msr	BASEPRI, r3
 8002834:	f3bf 8f6f 	isb	sy
 8002838:	f3bf 8f4f 	dsb	sy
 800283c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800283e:	bf00      	nop
 8002840:	e7fe      	b.n	8002840 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d103      	bne.n	8002850 <xQueueGenericSendFromISR+0x3c>
 8002848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800284a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284c:	2b00      	cmp	r3, #0
 800284e:	d101      	bne.n	8002854 <xQueueGenericSendFromISR+0x40>
 8002850:	2301      	movs	r3, #1
 8002852:	e000      	b.n	8002856 <xQueueGenericSendFromISR+0x42>
 8002854:	2300      	movs	r3, #0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d10a      	bne.n	8002870 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800285a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800285e:	f383 8811 	msr	BASEPRI, r3
 8002862:	f3bf 8f6f 	isb	sy
 8002866:	f3bf 8f4f 	dsb	sy
 800286a:	623b      	str	r3, [r7, #32]
}
 800286c:	bf00      	nop
 800286e:	e7fe      	b.n	800286e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	2b02      	cmp	r3, #2
 8002874:	d103      	bne.n	800287e <xQueueGenericSendFromISR+0x6a>
 8002876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800287a:	2b01      	cmp	r3, #1
 800287c:	d101      	bne.n	8002882 <xQueueGenericSendFromISR+0x6e>
 800287e:	2301      	movs	r3, #1
 8002880:	e000      	b.n	8002884 <xQueueGenericSendFromISR+0x70>
 8002882:	2300      	movs	r3, #0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d10a      	bne.n	800289e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800288c:	f383 8811 	msr	BASEPRI, r3
 8002890:	f3bf 8f6f 	isb	sy
 8002894:	f3bf 8f4f 	dsb	sy
 8002898:	61fb      	str	r3, [r7, #28]
}
 800289a:	bf00      	nop
 800289c:	e7fe      	b.n	800289c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800289e:	f001 ffcb 	bl	8004838 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80028a2:	f3ef 8211 	mrs	r2, BASEPRI
 80028a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028aa:	f383 8811 	msr	BASEPRI, r3
 80028ae:	f3bf 8f6f 	isb	sy
 80028b2:	f3bf 8f4f 	dsb	sy
 80028b6:	61ba      	str	r2, [r7, #24]
 80028b8:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80028ba:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80028bc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80028be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d302      	bcc.n	80028d0 <xQueueGenericSendFromISR+0xbc>
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d136      	bne.n	800293e <xQueueGenericSendFromISR+0x12a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80028d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 80028da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028dc:	4618      	mov	r0, r3
 80028de:	f003 fd69 	bl	80063b4 <SEGGER_SYSVIEW_ShrinkId>
 80028e2:	4601      	mov	r1, r0
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	461a      	mov	r2, r3
 80028e8:	2060      	movs	r0, #96	; 0x60
 80028ea:	f002 fff9 	bl	80058e0 <SEGGER_SYSVIEW_RecordU32x2>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80028ee:	683a      	ldr	r2, [r7, #0]
 80028f0:	68b9      	ldr	r1, [r7, #8]
 80028f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80028f4:	f000 f94a 	bl	8002b8c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80028f8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80028fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002900:	d112      	bne.n	8002928 <xQueueGenericSendFromISR+0x114>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002906:	2b00      	cmp	r3, #0
 8002908:	d016      	beq.n	8002938 <xQueueGenericSendFromISR+0x124>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800290a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800290c:	3324      	adds	r3, #36	; 0x24
 800290e:	4618      	mov	r0, r3
 8002910:	f000 ff86 	bl	8003820 <xTaskRemoveFromEventList>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d00e      	beq.n	8002938 <xQueueGenericSendFromISR+0x124>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d00b      	beq.n	8002938 <xQueueGenericSendFromISR+0x124>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2201      	movs	r2, #1
 8002924:	601a      	str	r2, [r3, #0]
 8002926:	e007      	b.n	8002938 <xQueueGenericSendFromISR+0x124>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002928:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800292c:	3301      	adds	r3, #1
 800292e:	b2db      	uxtb	r3, r3
 8002930:	b25a      	sxtb	r2, r3
 8002932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002934:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002938:	2301      	movs	r3, #1
 800293a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800293c:	e00b      	b.n	8002956 <xQueueGenericSendFromISR+0x142>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 800293e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002940:	4618      	mov	r0, r3
 8002942:	f003 fd37 	bl	80063b4 <SEGGER_SYSVIEW_ShrinkId>
 8002946:	4601      	mov	r1, r0
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	461a      	mov	r2, r3
 800294c:	2060      	movs	r0, #96	; 0x60
 800294e:	f002 ffc7 	bl	80058e0 <SEGGER_SYSVIEW_RecordU32x2>
			xReturn = errQUEUE_FULL;
 8002952:	2300      	movs	r3, #0
 8002954:	637b      	str	r3, [r7, #52]	; 0x34
 8002956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002958:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002960:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002964:	4618      	mov	r0, r3
 8002966:	3738      	adds	r7, #56	; 0x38
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}

0800296c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800296c:	b590      	push	{r4, r7, lr}
 800296e:	b08f      	sub	sp, #60	; 0x3c
 8002970:	af02      	add	r7, sp, #8
 8002972:	60f8      	str	r0, [r7, #12]
 8002974:	60b9      	str	r1, [r7, #8]
 8002976:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002978:	2300      	movs	r3, #0
 800297a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002982:	2b00      	cmp	r3, #0
 8002984:	d10a      	bne.n	800299c <xQueueReceive+0x30>
	__asm volatile
 8002986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800298a:	f383 8811 	msr	BASEPRI, r3
 800298e:	f3bf 8f6f 	isb	sy
 8002992:	f3bf 8f4f 	dsb	sy
 8002996:	623b      	str	r3, [r7, #32]
}
 8002998:	bf00      	nop
 800299a:	e7fe      	b.n	800299a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d103      	bne.n	80029aa <xQueueReceive+0x3e>
 80029a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d101      	bne.n	80029ae <xQueueReceive+0x42>
 80029aa:	2301      	movs	r3, #1
 80029ac:	e000      	b.n	80029b0 <xQueueReceive+0x44>
 80029ae:	2300      	movs	r3, #0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d10a      	bne.n	80029ca <xQueueReceive+0x5e>
	__asm volatile
 80029b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029b8:	f383 8811 	msr	BASEPRI, r3
 80029bc:	f3bf 8f6f 	isb	sy
 80029c0:	f3bf 8f4f 	dsb	sy
 80029c4:	61fb      	str	r3, [r7, #28]
}
 80029c6:	bf00      	nop
 80029c8:	e7fe      	b.n	80029c8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80029ca:	f001 f92d 	bl	8003c28 <xTaskGetSchedulerState>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d102      	bne.n	80029da <xQueueReceive+0x6e>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d101      	bne.n	80029de <xQueueReceive+0x72>
 80029da:	2301      	movs	r3, #1
 80029dc:	e000      	b.n	80029e0 <xQueueReceive+0x74>
 80029de:	2300      	movs	r3, #0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d10a      	bne.n	80029fa <xQueueReceive+0x8e>
	__asm volatile
 80029e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029e8:	f383 8811 	msr	BASEPRI, r3
 80029ec:	f3bf 8f6f 	isb	sy
 80029f0:	f3bf 8f4f 	dsb	sy
 80029f4:	61bb      	str	r3, [r7, #24]
}
 80029f6:	bf00      	nop
 80029f8:	e7fe      	b.n	80029f8 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80029fa:	f001 fe3b 	bl	8004674 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80029fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a02:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d02f      	beq.n	8002a6a <xQueueReceive+0xfe>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002a0a:	68b9      	ldr	r1, [r7, #8]
 8002a0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a0e:	f000 f927 	bl	8002c60 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
 8002a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a14:	4618      	mov	r0, r3
 8002a16:	f003 fccd 	bl	80063b4 <SEGGER_SYSVIEW_ShrinkId>
 8002a1a:	4604      	mov	r4, r0
 8002a1c:	2000      	movs	r0, #0
 8002a1e:	f003 fcc9 	bl	80063b4 <SEGGER_SYSVIEW_ShrinkId>
 8002a22:	4602      	mov	r2, r0
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2101      	movs	r1, #1
 8002a28:	9100      	str	r1, [sp, #0]
 8002a2a:	4621      	mov	r1, r4
 8002a2c:	205c      	movs	r0, #92	; 0x5c
 8002a2e:	f003 f827 	bl	8005a80 <SEGGER_SYSVIEW_RecordU32x4>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a34:	1e5a      	subs	r2, r3, #1
 8002a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a38:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a3c:	691b      	ldr	r3, [r3, #16]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d00f      	beq.n	8002a62 <xQueueReceive+0xf6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a44:	3310      	adds	r3, #16
 8002a46:	4618      	mov	r0, r3
 8002a48:	f000 feea 	bl	8003820 <xTaskRemoveFromEventList>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d007      	beq.n	8002a62 <xQueueReceive+0xf6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002a52:	4b4d      	ldr	r3, [pc, #308]	; (8002b88 <xQueueReceive+0x21c>)
 8002a54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a58:	601a      	str	r2, [r3, #0]
 8002a5a:	f3bf 8f4f 	dsb	sy
 8002a5e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002a62:	f001 fe37 	bl	80046d4 <vPortExitCritical>
				return pdPASS;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e08a      	b.n	8002b80 <xQueueReceive+0x214>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d113      	bne.n	8002a98 <xQueueReceive+0x12c>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002a70:	f001 fe30 	bl	80046d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a76:	4618      	mov	r0, r3
 8002a78:	f003 fc9c 	bl	80063b4 <SEGGER_SYSVIEW_ShrinkId>
 8002a7c:	4604      	mov	r4, r0
 8002a7e:	2000      	movs	r0, #0
 8002a80:	f003 fc98 	bl	80063b4 <SEGGER_SYSVIEW_ShrinkId>
 8002a84:	4602      	mov	r2, r0
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2101      	movs	r1, #1
 8002a8a:	9100      	str	r1, [sp, #0]
 8002a8c:	4621      	mov	r1, r4
 8002a8e:	205c      	movs	r0, #92	; 0x5c
 8002a90:	f002 fff6 	bl	8005a80 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 8002a94:	2300      	movs	r3, #0
 8002a96:	e073      	b.n	8002b80 <xQueueReceive+0x214>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d106      	bne.n	8002aac <xQueueReceive+0x140>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002a9e:	f107 0310 	add.w	r3, r7, #16
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f000 ff24 	bl	80038f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002aac:	f001 fe12 	bl	80046d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002ab0:	f000 fc58 	bl	8003364 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002ab4:	f001 fdde 	bl	8004674 <vPortEnterCritical>
 8002ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002abe:	b25b      	sxtb	r3, r3
 8002ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ac4:	d103      	bne.n	8002ace <xQueueReceive+0x162>
 8002ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ad0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ad4:	b25b      	sxtb	r3, r3
 8002ad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ada:	d103      	bne.n	8002ae4 <xQueueReceive+0x178>
 8002adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ade:	2200      	movs	r2, #0
 8002ae0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ae4:	f001 fdf6 	bl	80046d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002ae8:	1d3a      	adds	r2, r7, #4
 8002aea:	f107 0310 	add.w	r3, r7, #16
 8002aee:	4611      	mov	r1, r2
 8002af0:	4618      	mov	r0, r3
 8002af2:	f000 ff13 	bl	800391c <xTaskCheckForTimeOut>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d124      	bne.n	8002b46 <xQueueReceive+0x1da>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002afc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002afe:	f000 f927 	bl	8002d50 <prvIsQueueEmpty>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d018      	beq.n	8002b3a <xQueueReceive+0x1ce>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b0a:	3324      	adds	r3, #36	; 0x24
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	4611      	mov	r1, r2
 8002b10:	4618      	mov	r0, r3
 8002b12:	f000 fe33 	bl	800377c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002b16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b18:	f000 f8c8 	bl	8002cac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002b1c:	f000 fc30 	bl	8003380 <xTaskResumeAll>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	f47f af69 	bne.w	80029fa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002b28:	4b17      	ldr	r3, [pc, #92]	; (8002b88 <xQueueReceive+0x21c>)
 8002b2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b2e:	601a      	str	r2, [r3, #0]
 8002b30:	f3bf 8f4f 	dsb	sy
 8002b34:	f3bf 8f6f 	isb	sy
 8002b38:	e75f      	b.n	80029fa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002b3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b3c:	f000 f8b6 	bl	8002cac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002b40:	f000 fc1e 	bl	8003380 <xTaskResumeAll>
 8002b44:	e759      	b.n	80029fa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002b46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b48:	f000 f8b0 	bl	8002cac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002b4c:	f000 fc18 	bl	8003380 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002b50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b52:	f000 f8fd 	bl	8002d50 <prvIsQueueEmpty>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	f43f af4e 	beq.w	80029fa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b60:	4618      	mov	r0, r3
 8002b62:	f003 fc27 	bl	80063b4 <SEGGER_SYSVIEW_ShrinkId>
 8002b66:	4604      	mov	r4, r0
 8002b68:	2000      	movs	r0, #0
 8002b6a:	f003 fc23 	bl	80063b4 <SEGGER_SYSVIEW_ShrinkId>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2101      	movs	r1, #1
 8002b74:	9100      	str	r1, [sp, #0]
 8002b76:	4621      	mov	r1, r4
 8002b78:	205c      	movs	r0, #92	; 0x5c
 8002b7a:	f002 ff81 	bl	8005a80 <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 8002b7e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3734      	adds	r7, #52	; 0x34
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd90      	pop	{r4, r7, pc}
 8002b88:	e000ed04 	.word	0xe000ed04

08002b8c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b086      	sub	sp, #24
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	60f8      	str	r0, [r7, #12]
 8002b94:	60b9      	str	r1, [r7, #8]
 8002b96:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d10d      	bne.n	8002bc6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d14d      	bne.n	8002c4e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f001 f854 	bl	8003c64 <xTaskPriorityDisinherit>
 8002bbc:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	605a      	str	r2, [r3, #4]
 8002bc4:	e043      	b.n	8002c4e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d119      	bne.n	8002c00 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6898      	ldr	r0, [r3, #8]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	68b9      	ldr	r1, [r7, #8]
 8002bd8:	f003 fd74 	bl	80066c4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	689a      	ldr	r2, [r3, #8]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be4:	441a      	add	r2, r3
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	689a      	ldr	r2, [r3, #8]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d32b      	bcc.n	8002c4e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	609a      	str	r2, [r3, #8]
 8002bfe:	e026      	b.n	8002c4e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	68d8      	ldr	r0, [r3, #12]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c08:	461a      	mov	r2, r3
 8002c0a:	68b9      	ldr	r1, [r7, #8]
 8002c0c:	f003 fd5a 	bl	80066c4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	68da      	ldr	r2, [r3, #12]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c18:	425b      	negs	r3, r3
 8002c1a:	441a      	add	r2, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	68da      	ldr	r2, [r3, #12]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d207      	bcs.n	8002c3c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	685a      	ldr	r2, [r3, #4]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c34:	425b      	negs	r3, r3
 8002c36:	441a      	add	r2, r3
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d105      	bne.n	8002c4e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d002      	beq.n	8002c4e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	3b01      	subs	r3, #1
 8002c4c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	1c5a      	adds	r2, r3, #1
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002c56:	697b      	ldr	r3, [r7, #20]
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3718      	adds	r7, #24
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d018      	beq.n	8002ca4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	68da      	ldr	r2, [r3, #12]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7a:	441a      	add	r2, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	68da      	ldr	r2, [r3, #12]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d303      	bcc.n	8002c94 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	68d9      	ldr	r1, [r3, #12]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	6838      	ldr	r0, [r7, #0]
 8002ca0:	f003 fd10 	bl	80066c4 <memcpy>
	}
}
 8002ca4:	bf00      	nop
 8002ca6:	3708      	adds	r7, #8
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}

08002cac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002cb4:	f001 fcde 	bl	8004674 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002cbe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002cc0:	e011      	b.n	8002ce6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d012      	beq.n	8002cf0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	3324      	adds	r3, #36	; 0x24
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f000 fda6 	bl	8003820 <xTaskRemoveFromEventList>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d001      	beq.n	8002cde <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002cda:	f000 fe81 	bl	80039e0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002cde:	7bfb      	ldrb	r3, [r7, #15]
 8002ce0:	3b01      	subs	r3, #1
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002ce6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	dce9      	bgt.n	8002cc2 <prvUnlockQueue+0x16>
 8002cee:	e000      	b.n	8002cf2 <prvUnlockQueue+0x46>
					break;
 8002cf0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	22ff      	movs	r2, #255	; 0xff
 8002cf6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002cfa:	f001 fceb 	bl	80046d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002cfe:	f001 fcb9 	bl	8004674 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d08:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002d0a:	e011      	b.n	8002d30 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	691b      	ldr	r3, [r3, #16]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d012      	beq.n	8002d3a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	3310      	adds	r3, #16
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f000 fd81 	bl	8003820 <xTaskRemoveFromEventList>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d001      	beq.n	8002d28 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002d24:	f000 fe5c 	bl	80039e0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002d28:	7bbb      	ldrb	r3, [r7, #14]
 8002d2a:	3b01      	subs	r3, #1
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002d30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	dce9      	bgt.n	8002d0c <prvUnlockQueue+0x60>
 8002d38:	e000      	b.n	8002d3c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002d3a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	22ff      	movs	r2, #255	; 0xff
 8002d40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002d44:	f001 fcc6 	bl	80046d4 <vPortExitCritical>
}
 8002d48:	bf00      	nop
 8002d4a:	3710      	adds	r7, #16
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b084      	sub	sp, #16
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002d58:	f001 fc8c 	bl	8004674 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d102      	bne.n	8002d6a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002d64:	2301      	movs	r3, #1
 8002d66:	60fb      	str	r3, [r7, #12]
 8002d68:	e001      	b.n	8002d6e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002d6e:	f001 fcb1 	bl	80046d4 <vPortExitCritical>

	return xReturn;
 8002d72:	68fb      	ldr	r3, [r7, #12]
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3710      	adds	r7, #16
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}

08002d7c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002d84:	f001 fc76 	bl	8004674 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d102      	bne.n	8002d9a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002d94:	2301      	movs	r3, #1
 8002d96:	60fb      	str	r3, [r7, #12]
 8002d98:	e001      	b.n	8002d9e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002d9e:	f001 fc99 	bl	80046d4 <vPortExitCritical>

	return xReturn;
 8002da2:	68fb      	ldr	r3, [r7, #12]
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3710      	adds	r7, #16
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}

08002dac <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002db6:	2300      	movs	r3, #0
 8002db8:	60fb      	str	r3, [r7, #12]
 8002dba:	e01e      	b.n	8002dfa <vQueueAddToRegistry+0x4e>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002dbc:	4a13      	ldr	r2, [pc, #76]	; (8002e0c <vQueueAddToRegistry+0x60>)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d115      	bne.n	8002df4 <vQueueAddToRegistry+0x48>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002dc8:	4910      	ldr	r1, [pc, #64]	; (8002e0c <vQueueAddToRegistry+0x60>)
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	683a      	ldr	r2, [r7, #0]
 8002dce:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002dd2:	4a0e      	ldr	r2, [pc, #56]	; (8002e0c <vQueueAddToRegistry+0x60>)
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	00db      	lsls	r3, r3, #3
 8002dd8:	4413      	add	r3, r2
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4618      	mov	r0, r3
 8002de2:	f003 fae7 	bl	80063b4 <SEGGER_SYSVIEW_ShrinkId>
 8002de6:	4601      	mov	r1, r0
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	461a      	mov	r2, r3
 8002dec:	2071      	movs	r0, #113	; 0x71
 8002dee:	f002 fd77 	bl	80058e0 <SEGGER_SYSVIEW_RecordU32x2>
				break;
 8002df2:	e006      	b.n	8002e02 <vQueueAddToRegistry+0x56>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	3301      	adds	r3, #1
 8002df8:	60fb      	str	r3, [r7, #12]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2b07      	cmp	r3, #7
 8002dfe:	d9dd      	bls.n	8002dbc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002e00:	bf00      	nop
 8002e02:	bf00      	nop
 8002e04:	3710      	adds	r7, #16
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	20000814 	.word	0x20000814

08002e10 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b086      	sub	sp, #24
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	60f8      	str	r0, [r7, #12]
 8002e18:	60b9      	str	r1, [r7, #8]
 8002e1a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002e20:	f001 fc28 	bl	8004674 <vPortEnterCritical>
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e2a:	b25b      	sxtb	r3, r3
 8002e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e30:	d103      	bne.n	8002e3a <vQueueWaitForMessageRestricted+0x2a>
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	2200      	movs	r2, #0
 8002e36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e40:	b25b      	sxtb	r3, r3
 8002e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e46:	d103      	bne.n	8002e50 <vQueueWaitForMessageRestricted+0x40>
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e50:	f001 fc40 	bl	80046d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d106      	bne.n	8002e6a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	3324      	adds	r3, #36	; 0x24
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	68b9      	ldr	r1, [r7, #8]
 8002e64:	4618      	mov	r0, r3
 8002e66:	f000 fcad 	bl	80037c4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002e6a:	6978      	ldr	r0, [r7, #20]
 8002e6c:	f7ff ff1e 	bl	8002cac <prvUnlockQueue>
	}
 8002e70:	bf00      	nop
 8002e72:	3718      	adds	r7, #24
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b08e      	sub	sp, #56	; 0x38
 8002e7c:	af04      	add	r7, sp, #16
 8002e7e:	60f8      	str	r0, [r7, #12]
 8002e80:	60b9      	str	r1, [r7, #8]
 8002e82:	607a      	str	r2, [r7, #4]
 8002e84:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002e86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d10a      	bne.n	8002ea2 <xTaskCreateStatic+0x2a>
	__asm volatile
 8002e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e90:	f383 8811 	msr	BASEPRI, r3
 8002e94:	f3bf 8f6f 	isb	sy
 8002e98:	f3bf 8f4f 	dsb	sy
 8002e9c:	623b      	str	r3, [r7, #32]
}
 8002e9e:	bf00      	nop
 8002ea0:	e7fe      	b.n	8002ea0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d10a      	bne.n	8002ebe <xTaskCreateStatic+0x46>
	__asm volatile
 8002ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eac:	f383 8811 	msr	BASEPRI, r3
 8002eb0:	f3bf 8f6f 	isb	sy
 8002eb4:	f3bf 8f4f 	dsb	sy
 8002eb8:	61fb      	str	r3, [r7, #28]
}
 8002eba:	bf00      	nop
 8002ebc:	e7fe      	b.n	8002ebc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002ebe:	23bc      	movs	r3, #188	; 0xbc
 8002ec0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	2bbc      	cmp	r3, #188	; 0xbc
 8002ec6:	d00a      	beq.n	8002ede <xTaskCreateStatic+0x66>
	__asm volatile
 8002ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ecc:	f383 8811 	msr	BASEPRI, r3
 8002ed0:	f3bf 8f6f 	isb	sy
 8002ed4:	f3bf 8f4f 	dsb	sy
 8002ed8:	61bb      	str	r3, [r7, #24]
}
 8002eda:	bf00      	nop
 8002edc:	e7fe      	b.n	8002edc <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d01e      	beq.n	8002f22 <xTaskCreateStatic+0xaa>
 8002ee4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d01b      	beq.n	8002f22 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eec:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ef2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef6:	2202      	movs	r2, #2
 8002ef8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002efc:	2300      	movs	r3, #0
 8002efe:	9303      	str	r3, [sp, #12]
 8002f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f02:	9302      	str	r3, [sp, #8]
 8002f04:	f107 0314 	add.w	r3, r7, #20
 8002f08:	9301      	str	r3, [sp, #4]
 8002f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f0c:	9300      	str	r3, [sp, #0]
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	68b9      	ldr	r1, [r7, #8]
 8002f14:	68f8      	ldr	r0, [r7, #12]
 8002f16:	f000 f851 	bl	8002fbc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002f1a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002f1c:	f000 f8ec 	bl	80030f8 <prvAddNewTaskToReadyList>
 8002f20:	e001      	b.n	8002f26 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8002f22:	2300      	movs	r3, #0
 8002f24:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002f26:	697b      	ldr	r3, [r7, #20]
	}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3728      	adds	r7, #40	; 0x28
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}

08002f30 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b08c      	sub	sp, #48	; 0x30
 8002f34:	af04      	add	r7, sp, #16
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	60b9      	str	r1, [r7, #8]
 8002f3a:	603b      	str	r3, [r7, #0]
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f40:	88fb      	ldrh	r3, [r7, #6]
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	4618      	mov	r0, r3
 8002f46:	f001 fcb7 	bl	80048b8 <pvPortMalloc>
 8002f4a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d00e      	beq.n	8002f70 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002f52:	20bc      	movs	r0, #188	; 0xbc
 8002f54:	f001 fcb0 	bl	80048b8 <pvPortMalloc>
 8002f58:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d003      	beq.n	8002f68 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002f60:	69fb      	ldr	r3, [r7, #28]
 8002f62:	697a      	ldr	r2, [r7, #20]
 8002f64:	631a      	str	r2, [r3, #48]	; 0x30
 8002f66:	e005      	b.n	8002f74 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002f68:	6978      	ldr	r0, [r7, #20]
 8002f6a:	f001 fd69 	bl	8004a40 <vPortFree>
 8002f6e:	e001      	b.n	8002f74 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002f70:	2300      	movs	r3, #0
 8002f72:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d017      	beq.n	8002faa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002f82:	88fa      	ldrh	r2, [r7, #6]
 8002f84:	2300      	movs	r3, #0
 8002f86:	9303      	str	r3, [sp, #12]
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	9302      	str	r3, [sp, #8]
 8002f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f8e:	9301      	str	r3, [sp, #4]
 8002f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f92:	9300      	str	r3, [sp, #0]
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	68b9      	ldr	r1, [r7, #8]
 8002f98:	68f8      	ldr	r0, [r7, #12]
 8002f9a:	f000 f80f 	bl	8002fbc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002f9e:	69f8      	ldr	r0, [r7, #28]
 8002fa0:	f000 f8aa 	bl	80030f8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	61bb      	str	r3, [r7, #24]
 8002fa8:	e002      	b.n	8002fb0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002faa:	f04f 33ff 	mov.w	r3, #4294967295
 8002fae:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002fb0:	69bb      	ldr	r3, [r7, #24]
	}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3720      	adds	r7, #32
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
	...

08002fbc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b088      	sub	sp, #32
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	60f8      	str	r0, [r7, #12]
 8002fc4:	60b9      	str	r1, [r7, #8]
 8002fc6:	607a      	str	r2, [r7, #4]
 8002fc8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fcc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	21a5      	movs	r1, #165	; 0xa5
 8002fd6:	f003 fb83 	bl	80066e0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fdc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002fe4:	3b01      	subs	r3, #1
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	4413      	add	r3, r2
 8002fea:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002fec:	69bb      	ldr	r3, [r7, #24]
 8002fee:	f023 0307 	bic.w	r3, r3, #7
 8002ff2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	f003 0307 	and.w	r3, r3, #7
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d00a      	beq.n	8003014 <prvInitialiseNewTask+0x58>
	__asm volatile
 8002ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003002:	f383 8811 	msr	BASEPRI, r3
 8003006:	f3bf 8f6f 	isb	sy
 800300a:	f3bf 8f4f 	dsb	sy
 800300e:	617b      	str	r3, [r7, #20]
}
 8003010:	bf00      	nop
 8003012:	e7fe      	b.n	8003012 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003014:	2300      	movs	r3, #0
 8003016:	61fb      	str	r3, [r7, #28]
 8003018:	e012      	b.n	8003040 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800301a:	68ba      	ldr	r2, [r7, #8]
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	4413      	add	r3, r2
 8003020:	7819      	ldrb	r1, [r3, #0]
 8003022:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	4413      	add	r3, r2
 8003028:	3334      	adds	r3, #52	; 0x34
 800302a:	460a      	mov	r2, r1
 800302c:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800302e:	68ba      	ldr	r2, [r7, #8]
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	4413      	add	r3, r2
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d006      	beq.n	8003048 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	3301      	adds	r3, #1
 800303e:	61fb      	str	r3, [r7, #28]
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	2b0f      	cmp	r3, #15
 8003044:	d9e9      	bls.n	800301a <prvInitialiseNewTask+0x5e>
 8003046:	e000      	b.n	800304a <prvInitialiseNewTask+0x8e>
		{
			break;
 8003048:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800304a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800304c:	2200      	movs	r2, #0
 800304e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003054:	2b37      	cmp	r3, #55	; 0x37
 8003056:	d901      	bls.n	800305c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003058:	2337      	movs	r3, #55	; 0x37
 800305a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800305c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800305e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003060:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003064:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003066:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800306a:	2200      	movs	r2, #0
 800306c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800306e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003070:	3304      	adds	r3, #4
 8003072:	4618      	mov	r0, r3
 8003074:	f7ff f90c 	bl	8002290 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800307a:	3318      	adds	r3, #24
 800307c:	4618      	mov	r0, r3
 800307e:	f7ff f907 	bl	8002290 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003084:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003086:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800308a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800308e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003090:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003094:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003096:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800309a:	2200      	movs	r2, #0
 800309c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80030a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030a2:	2200      	movs	r2, #0
 80030a4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80030a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030aa:	3354      	adds	r3, #84	; 0x54
 80030ac:	2260      	movs	r2, #96	; 0x60
 80030ae:	2100      	movs	r1, #0
 80030b0:	4618      	mov	r0, r3
 80030b2:	f003 fb15 	bl	80066e0 <memset>
 80030b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030b8:	4a0c      	ldr	r2, [pc, #48]	; (80030ec <prvInitialiseNewTask+0x130>)
 80030ba:	659a      	str	r2, [r3, #88]	; 0x58
 80030bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030be:	4a0c      	ldr	r2, [pc, #48]	; (80030f0 <prvInitialiseNewTask+0x134>)
 80030c0:	65da      	str	r2, [r3, #92]	; 0x5c
 80030c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030c4:	4a0b      	ldr	r2, [pc, #44]	; (80030f4 <prvInitialiseNewTask+0x138>)
 80030c6:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80030c8:	683a      	ldr	r2, [r7, #0]
 80030ca:	68f9      	ldr	r1, [r7, #12]
 80030cc:	69b8      	ldr	r0, [r7, #24]
 80030ce:	f001 f9a5 	bl	800441c <pxPortInitialiseStack>
 80030d2:	4602      	mov	r2, r0
 80030d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030d6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80030d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d002      	beq.n	80030e4 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80030de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030e2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80030e4:	bf00      	nop
 80030e6:	3720      	adds	r7, #32
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	080069e0 	.word	0x080069e0
 80030f0:	08006a00 	.word	0x08006a00
 80030f4:	080069c0 	.word	0x080069c0

080030f8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80030f8:	b5b0      	push	{r4, r5, r7, lr}
 80030fa:	b084      	sub	sp, #16
 80030fc:	af02      	add	r7, sp, #8
 80030fe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003100:	f001 fab8 	bl	8004674 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003104:	4b3c      	ldr	r3, [pc, #240]	; (80031f8 <prvAddNewTaskToReadyList+0x100>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	3301      	adds	r3, #1
 800310a:	4a3b      	ldr	r2, [pc, #236]	; (80031f8 <prvAddNewTaskToReadyList+0x100>)
 800310c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800310e:	4b3b      	ldr	r3, [pc, #236]	; (80031fc <prvAddNewTaskToReadyList+0x104>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d109      	bne.n	800312a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003116:	4a39      	ldr	r2, [pc, #228]	; (80031fc <prvAddNewTaskToReadyList+0x104>)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800311c:	4b36      	ldr	r3, [pc, #216]	; (80031f8 <prvAddNewTaskToReadyList+0x100>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2b01      	cmp	r3, #1
 8003122:	d110      	bne.n	8003146 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003124:	f000 fc80 	bl	8003a28 <prvInitialiseTaskLists>
 8003128:	e00d      	b.n	8003146 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800312a:	4b35      	ldr	r3, [pc, #212]	; (8003200 <prvAddNewTaskToReadyList+0x108>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d109      	bne.n	8003146 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003132:	4b32      	ldr	r3, [pc, #200]	; (80031fc <prvAddNewTaskToReadyList+0x104>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800313c:	429a      	cmp	r2, r3
 800313e:	d802      	bhi.n	8003146 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003140:	4a2e      	ldr	r2, [pc, #184]	; (80031fc <prvAddNewTaskToReadyList+0x104>)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003146:	4b2f      	ldr	r3, [pc, #188]	; (8003204 <prvAddNewTaskToReadyList+0x10c>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	3301      	adds	r3, #1
 800314c:	4a2d      	ldr	r2, [pc, #180]	; (8003204 <prvAddNewTaskToReadyList+0x10c>)
 800314e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003150:	4b2c      	ldr	r3, [pc, #176]	; (8003204 <prvAddNewTaskToReadyList+0x10c>)
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d016      	beq.n	800318c <prvAddNewTaskToReadyList+0x94>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4618      	mov	r0, r3
 8003162:	f003 f861 	bl	8006228 <SEGGER_SYSVIEW_OnTaskCreate>
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003176:	461d      	mov	r5, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	461c      	mov	r4, r3
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003182:	1ae3      	subs	r3, r4, r3
 8003184:	9300      	str	r3, [sp, #0]
 8003186:	462b      	mov	r3, r5
 8003188:	f001 fe36 	bl	8004df8 <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	4618      	mov	r0, r3
 8003190:	f003 f8ce 	bl	8006330 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003198:	4b1b      	ldr	r3, [pc, #108]	; (8003208 <prvAddNewTaskToReadyList+0x110>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	429a      	cmp	r2, r3
 800319e:	d903      	bls.n	80031a8 <prvAddNewTaskToReadyList+0xb0>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a4:	4a18      	ldr	r2, [pc, #96]	; (8003208 <prvAddNewTaskToReadyList+0x110>)
 80031a6:	6013      	str	r3, [r2, #0]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031ac:	4613      	mov	r3, r2
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	4413      	add	r3, r2
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	4a15      	ldr	r2, [pc, #84]	; (800320c <prvAddNewTaskToReadyList+0x114>)
 80031b6:	441a      	add	r2, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	3304      	adds	r3, #4
 80031bc:	4619      	mov	r1, r3
 80031be:	4610      	mov	r0, r2
 80031c0:	f7ff f873 	bl	80022aa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80031c4:	f001 fa86 	bl	80046d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80031c8:	4b0d      	ldr	r3, [pc, #52]	; (8003200 <prvAddNewTaskToReadyList+0x108>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d00e      	beq.n	80031ee <prvAddNewTaskToReadyList+0xf6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80031d0:	4b0a      	ldr	r3, [pc, #40]	; (80031fc <prvAddNewTaskToReadyList+0x104>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031da:	429a      	cmp	r2, r3
 80031dc:	d207      	bcs.n	80031ee <prvAddNewTaskToReadyList+0xf6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80031de:	4b0c      	ldr	r3, [pc, #48]	; (8003210 <prvAddNewTaskToReadyList+0x118>)
 80031e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031e4:	601a      	str	r2, [r3, #0]
 80031e6:	f3bf 8f4f 	dsb	sy
 80031ea:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80031ee:	bf00      	nop
 80031f0:	3708      	adds	r7, #8
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bdb0      	pop	{r4, r5, r7, pc}
 80031f6:	bf00      	nop
 80031f8:	20000d28 	.word	0x20000d28
 80031fc:	20000854 	.word	0x20000854
 8003200:	20000d34 	.word	0x20000d34
 8003204:	20000d44 	.word	0x20000d44
 8003208:	20000d30 	.word	0x20000d30
 800320c:	20000858 	.word	0x20000858
 8003210:	e000ed04 	.word	0xe000ed04

08003214 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003214:	b580      	push	{r7, lr}
 8003216:	b084      	sub	sp, #16
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800321c:	2300      	movs	r3, #0
 800321e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d01b      	beq.n	800325e <vTaskDelay+0x4a>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003226:	4b15      	ldr	r3, [pc, #84]	; (800327c <vTaskDelay+0x68>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d00a      	beq.n	8003244 <vTaskDelay+0x30>
	__asm volatile
 800322e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003232:	f383 8811 	msr	BASEPRI, r3
 8003236:	f3bf 8f6f 	isb	sy
 800323a:	f3bf 8f4f 	dsb	sy
 800323e:	60bb      	str	r3, [r7, #8]
}
 8003240:	bf00      	nop
 8003242:	e7fe      	b.n	8003242 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003244:	f000 f88e 	bl	8003364 <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 8003248:	6879      	ldr	r1, [r7, #4]
 800324a:	2023      	movs	r0, #35	; 0x23
 800324c:	f002 fb0c 	bl	8005868 <SEGGER_SYSVIEW_RecordU32>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003250:	2100      	movs	r1, #0
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f000 fd7c 	bl	8003d50 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003258:	f000 f892 	bl	8003380 <xTaskResumeAll>
 800325c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d107      	bne.n	8003274 <vTaskDelay+0x60>
		{
			portYIELD_WITHIN_API();
 8003264:	4b06      	ldr	r3, [pc, #24]	; (8003280 <vTaskDelay+0x6c>)
 8003266:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800326a:	601a      	str	r2, [r3, #0]
 800326c:	f3bf 8f4f 	dsb	sy
 8003270:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003274:	bf00      	nop
 8003276:	3710      	adds	r7, #16
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}
 800327c:	20000d50 	.word	0x20000d50
 8003280:	e000ed04 	.word	0xe000ed04

08003284 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b08a      	sub	sp, #40	; 0x28
 8003288:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800328a:	2300      	movs	r3, #0
 800328c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800328e:	2300      	movs	r3, #0
 8003290:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003292:	463a      	mov	r2, r7
 8003294:	1d39      	adds	r1, r7, #4
 8003296:	f107 0308 	add.w	r3, r7, #8
 800329a:	4618      	mov	r0, r3
 800329c:	f7fe ffa4 	bl	80021e8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80032a0:	6839      	ldr	r1, [r7, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	68ba      	ldr	r2, [r7, #8]
 80032a6:	9202      	str	r2, [sp, #8]
 80032a8:	9301      	str	r3, [sp, #4]
 80032aa:	2300      	movs	r3, #0
 80032ac:	9300      	str	r3, [sp, #0]
 80032ae:	2300      	movs	r3, #0
 80032b0:	460a      	mov	r2, r1
 80032b2:	4924      	ldr	r1, [pc, #144]	; (8003344 <vTaskStartScheduler+0xc0>)
 80032b4:	4824      	ldr	r0, [pc, #144]	; (8003348 <vTaskStartScheduler+0xc4>)
 80032b6:	f7ff fddf 	bl	8002e78 <xTaskCreateStatic>
 80032ba:	4603      	mov	r3, r0
 80032bc:	4a23      	ldr	r2, [pc, #140]	; (800334c <vTaskStartScheduler+0xc8>)
 80032be:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80032c0:	4b22      	ldr	r3, [pc, #136]	; (800334c <vTaskStartScheduler+0xc8>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d002      	beq.n	80032ce <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80032c8:	2301      	movs	r3, #1
 80032ca:	617b      	str	r3, [r7, #20]
 80032cc:	e001      	b.n	80032d2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80032ce:	2300      	movs	r3, #0
 80032d0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d102      	bne.n	80032de <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80032d8:	f000 fd8e 	bl	8003df8 <xTimerCreateTimerTask>
 80032dc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d11b      	bne.n	800331c <vTaskStartScheduler+0x98>
	__asm volatile
 80032e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032e8:	f383 8811 	msr	BASEPRI, r3
 80032ec:	f3bf 8f6f 	isb	sy
 80032f0:	f3bf 8f4f 	dsb	sy
 80032f4:	613b      	str	r3, [r7, #16]
}
 80032f6:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80032f8:	4b15      	ldr	r3, [pc, #84]	; (8003350 <vTaskStartScheduler+0xcc>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	3354      	adds	r3, #84	; 0x54
 80032fe:	4a15      	ldr	r2, [pc, #84]	; (8003354 <vTaskStartScheduler+0xd0>)
 8003300:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003302:	4b15      	ldr	r3, [pc, #84]	; (8003358 <vTaskStartScheduler+0xd4>)
 8003304:	f04f 32ff 	mov.w	r2, #4294967295
 8003308:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800330a:	4b14      	ldr	r3, [pc, #80]	; (800335c <vTaskStartScheduler+0xd8>)
 800330c:	2201      	movs	r2, #1
 800330e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003310:	4b13      	ldr	r3, [pc, #76]	; (8003360 <vTaskStartScheduler+0xdc>)
 8003312:	2200      	movs	r2, #0
 8003314:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003316:	f001 f90b 	bl	8004530 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800331a:	e00e      	b.n	800333a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003322:	d10a      	bne.n	800333a <vTaskStartScheduler+0xb6>
	__asm volatile
 8003324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003328:	f383 8811 	msr	BASEPRI, r3
 800332c:	f3bf 8f6f 	isb	sy
 8003330:	f3bf 8f4f 	dsb	sy
 8003334:	60fb      	str	r3, [r7, #12]
}
 8003336:	bf00      	nop
 8003338:	e7fe      	b.n	8003338 <vTaskStartScheduler+0xb4>
}
 800333a:	bf00      	nop
 800333c:	3718      	adds	r7, #24
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	08006898 	.word	0x08006898
 8003348:	080039f9 	.word	0x080039f9
 800334c:	20000d4c 	.word	0x20000d4c
 8003350:	20000854 	.word	0x20000854
 8003354:	20000010 	.word	0x20000010
 8003358:	20000d48 	.word	0x20000d48
 800335c:	20000d34 	.word	0x20000d34
 8003360:	20000d2c 	.word	0x20000d2c

08003364 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003364:	b480      	push	{r7}
 8003366:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003368:	4b04      	ldr	r3, [pc, #16]	; (800337c <vTaskSuspendAll+0x18>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	3301      	adds	r3, #1
 800336e:	4a03      	ldr	r2, [pc, #12]	; (800337c <vTaskSuspendAll+0x18>)
 8003370:	6013      	str	r3, [r2, #0]
}
 8003372:	bf00      	nop
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr
 800337c:	20000d50 	.word	0x20000d50

08003380 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b084      	sub	sp, #16
 8003384:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003386:	2300      	movs	r3, #0
 8003388:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800338a:	2300      	movs	r3, #0
 800338c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800338e:	4b44      	ldr	r3, [pc, #272]	; (80034a0 <xTaskResumeAll+0x120>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d10a      	bne.n	80033ac <xTaskResumeAll+0x2c>
	__asm volatile
 8003396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800339a:	f383 8811 	msr	BASEPRI, r3
 800339e:	f3bf 8f6f 	isb	sy
 80033a2:	f3bf 8f4f 	dsb	sy
 80033a6:	603b      	str	r3, [r7, #0]
}
 80033a8:	bf00      	nop
 80033aa:	e7fe      	b.n	80033aa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80033ac:	f001 f962 	bl	8004674 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80033b0:	4b3b      	ldr	r3, [pc, #236]	; (80034a0 <xTaskResumeAll+0x120>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	3b01      	subs	r3, #1
 80033b6:	4a3a      	ldr	r2, [pc, #232]	; (80034a0 <xTaskResumeAll+0x120>)
 80033b8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80033ba:	4b39      	ldr	r3, [pc, #228]	; (80034a0 <xTaskResumeAll+0x120>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d166      	bne.n	8003490 <xTaskResumeAll+0x110>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80033c2:	4b38      	ldr	r3, [pc, #224]	; (80034a4 <xTaskResumeAll+0x124>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d062      	beq.n	8003490 <xTaskResumeAll+0x110>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80033ca:	e033      	b.n	8003434 <xTaskResumeAll+0xb4>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80033cc:	4b36      	ldr	r3, [pc, #216]	; (80034a8 <xTaskResumeAll+0x128>)
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	3318      	adds	r3, #24
 80033d8:	4618      	mov	r0, r3
 80033da:	f7fe ffc3 	bl	8002364 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	3304      	adds	r3, #4
 80033e2:	4618      	mov	r0, r3
 80033e4:	f7fe ffbe 	bl	8002364 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	4618      	mov	r0, r3
 80033ec:	f002 ffa0 	bl	8006330 <SEGGER_SYSVIEW_OnTaskStartReady>
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033f4:	4b2d      	ldr	r3, [pc, #180]	; (80034ac <xTaskResumeAll+0x12c>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d903      	bls.n	8003404 <xTaskResumeAll+0x84>
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003400:	4a2a      	ldr	r2, [pc, #168]	; (80034ac <xTaskResumeAll+0x12c>)
 8003402:	6013      	str	r3, [r2, #0]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003408:	4613      	mov	r3, r2
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	4413      	add	r3, r2
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	4a27      	ldr	r2, [pc, #156]	; (80034b0 <xTaskResumeAll+0x130>)
 8003412:	441a      	add	r2, r3
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	3304      	adds	r3, #4
 8003418:	4619      	mov	r1, r3
 800341a:	4610      	mov	r0, r2
 800341c:	f7fe ff45 	bl	80022aa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003424:	4b23      	ldr	r3, [pc, #140]	; (80034b4 <xTaskResumeAll+0x134>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800342a:	429a      	cmp	r2, r3
 800342c:	d302      	bcc.n	8003434 <xTaskResumeAll+0xb4>
					{
						xYieldPending = pdTRUE;
 800342e:	4b22      	ldr	r3, [pc, #136]	; (80034b8 <xTaskResumeAll+0x138>)
 8003430:	2201      	movs	r2, #1
 8003432:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003434:	4b1c      	ldr	r3, [pc, #112]	; (80034a8 <xTaskResumeAll+0x128>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d1c7      	bne.n	80033cc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d001      	beq.n	8003446 <xTaskResumeAll+0xc6>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003442:	f000 fbcb 	bl	8003bdc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003446:	4b1d      	ldr	r3, [pc, #116]	; (80034bc <xTaskResumeAll+0x13c>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d010      	beq.n	8003474 <xTaskResumeAll+0xf4>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003452:	f000 f859 	bl	8003508 <xTaskIncrementTick>
 8003456:	4603      	mov	r3, r0
 8003458:	2b00      	cmp	r3, #0
 800345a:	d002      	beq.n	8003462 <xTaskResumeAll+0xe2>
							{
								xYieldPending = pdTRUE;
 800345c:	4b16      	ldr	r3, [pc, #88]	; (80034b8 <xTaskResumeAll+0x138>)
 800345e:	2201      	movs	r2, #1
 8003460:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	3b01      	subs	r3, #1
 8003466:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d1f1      	bne.n	8003452 <xTaskResumeAll+0xd2>

						uxPendedTicks = 0;
 800346e:	4b13      	ldr	r3, [pc, #76]	; (80034bc <xTaskResumeAll+0x13c>)
 8003470:	2200      	movs	r2, #0
 8003472:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003474:	4b10      	ldr	r3, [pc, #64]	; (80034b8 <xTaskResumeAll+0x138>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d009      	beq.n	8003490 <xTaskResumeAll+0x110>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800347c:	2301      	movs	r3, #1
 800347e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003480:	4b0f      	ldr	r3, [pc, #60]	; (80034c0 <xTaskResumeAll+0x140>)
 8003482:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003486:	601a      	str	r2, [r3, #0]
 8003488:	f3bf 8f4f 	dsb	sy
 800348c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003490:	f001 f920 	bl	80046d4 <vPortExitCritical>

	return xAlreadyYielded;
 8003494:	68bb      	ldr	r3, [r7, #8]
}
 8003496:	4618      	mov	r0, r3
 8003498:	3710      	adds	r7, #16
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	20000d50 	.word	0x20000d50
 80034a4:	20000d28 	.word	0x20000d28
 80034a8:	20000ce8 	.word	0x20000ce8
 80034ac:	20000d30 	.word	0x20000d30
 80034b0:	20000858 	.word	0x20000858
 80034b4:	20000854 	.word	0x20000854
 80034b8:	20000d3c 	.word	0x20000d3c
 80034bc:	20000d38 	.word	0x20000d38
 80034c0:	e000ed04 	.word	0xe000ed04

080034c4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80034c4:	b480      	push	{r7}
 80034c6:	b083      	sub	sp, #12
 80034c8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80034ca:	4b05      	ldr	r3, [pc, #20]	; (80034e0 <xTaskGetTickCount+0x1c>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80034d0:	687b      	ldr	r3, [r7, #4]
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	370c      	adds	r7, #12
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr
 80034de:	bf00      	nop
 80034e0:	20000d2c 	.word	0x20000d2c

080034e4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b082      	sub	sp, #8
 80034e8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80034ea:	f001 f9a5 	bl	8004838 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80034ee:	2300      	movs	r3, #0
 80034f0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80034f2:	4b04      	ldr	r3, [pc, #16]	; (8003504 <xTaskGetTickCountFromISR+0x20>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80034f8:	683b      	ldr	r3, [r7, #0]
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3708      	adds	r7, #8
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	20000d2c 	.word	0x20000d2c

08003508 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b086      	sub	sp, #24
 800350c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800350e:	2300      	movs	r3, #0
 8003510:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003512:	4b53      	ldr	r3, [pc, #332]	; (8003660 <xTaskIncrementTick+0x158>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	2b00      	cmp	r3, #0
 8003518:	f040 8092 	bne.w	8003640 <xTaskIncrementTick+0x138>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800351c:	4b51      	ldr	r3, [pc, #324]	; (8003664 <xTaskIncrementTick+0x15c>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	3301      	adds	r3, #1
 8003522:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003524:	4a4f      	ldr	r2, [pc, #316]	; (8003664 <xTaskIncrementTick+0x15c>)
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d120      	bne.n	8003572 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003530:	4b4d      	ldr	r3, [pc, #308]	; (8003668 <xTaskIncrementTick+0x160>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d00a      	beq.n	8003550 <xTaskIncrementTick+0x48>
	__asm volatile
 800353a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800353e:	f383 8811 	msr	BASEPRI, r3
 8003542:	f3bf 8f6f 	isb	sy
 8003546:	f3bf 8f4f 	dsb	sy
 800354a:	603b      	str	r3, [r7, #0]
}
 800354c:	bf00      	nop
 800354e:	e7fe      	b.n	800354e <xTaskIncrementTick+0x46>
 8003550:	4b45      	ldr	r3, [pc, #276]	; (8003668 <xTaskIncrementTick+0x160>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	60fb      	str	r3, [r7, #12]
 8003556:	4b45      	ldr	r3, [pc, #276]	; (800366c <xTaskIncrementTick+0x164>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a43      	ldr	r2, [pc, #268]	; (8003668 <xTaskIncrementTick+0x160>)
 800355c:	6013      	str	r3, [r2, #0]
 800355e:	4a43      	ldr	r2, [pc, #268]	; (800366c <xTaskIncrementTick+0x164>)
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6013      	str	r3, [r2, #0]
 8003564:	4b42      	ldr	r3, [pc, #264]	; (8003670 <xTaskIncrementTick+0x168>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	3301      	adds	r3, #1
 800356a:	4a41      	ldr	r2, [pc, #260]	; (8003670 <xTaskIncrementTick+0x168>)
 800356c:	6013      	str	r3, [r2, #0]
 800356e:	f000 fb35 	bl	8003bdc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003572:	4b40      	ldr	r3, [pc, #256]	; (8003674 <xTaskIncrementTick+0x16c>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	693a      	ldr	r2, [r7, #16]
 8003578:	429a      	cmp	r2, r3
 800357a:	d352      	bcc.n	8003622 <xTaskIncrementTick+0x11a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800357c:	4b3a      	ldr	r3, [pc, #232]	; (8003668 <xTaskIncrementTick+0x160>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d101      	bne.n	800358a <xTaskIncrementTick+0x82>
 8003586:	2301      	movs	r3, #1
 8003588:	e000      	b.n	800358c <xTaskIncrementTick+0x84>
 800358a:	2300      	movs	r3, #0
 800358c:	2b00      	cmp	r3, #0
 800358e:	d004      	beq.n	800359a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003590:	4b38      	ldr	r3, [pc, #224]	; (8003674 <xTaskIncrementTick+0x16c>)
 8003592:	f04f 32ff 	mov.w	r2, #4294967295
 8003596:	601a      	str	r2, [r3, #0]
					break;
 8003598:	e043      	b.n	8003622 <xTaskIncrementTick+0x11a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800359a:	4b33      	ldr	r3, [pc, #204]	; (8003668 <xTaskIncrementTick+0x160>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80035aa:	693a      	ldr	r2, [r7, #16]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d203      	bcs.n	80035ba <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80035b2:	4a30      	ldr	r2, [pc, #192]	; (8003674 <xTaskIncrementTick+0x16c>)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6013      	str	r3, [r2, #0]
						break;
 80035b8:	e033      	b.n	8003622 <xTaskIncrementTick+0x11a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	3304      	adds	r3, #4
 80035be:	4618      	mov	r0, r3
 80035c0:	f7fe fed0 	bl	8002364 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d004      	beq.n	80035d6 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	3318      	adds	r3, #24
 80035d0:	4618      	mov	r0, r3
 80035d2:	f7fe fec7 	bl	8002364 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	4618      	mov	r0, r3
 80035da:	f002 fea9 	bl	8006330 <SEGGER_SYSVIEW_OnTaskStartReady>
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035e2:	4b25      	ldr	r3, [pc, #148]	; (8003678 <xTaskIncrementTick+0x170>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d903      	bls.n	80035f2 <xTaskIncrementTick+0xea>
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ee:	4a22      	ldr	r2, [pc, #136]	; (8003678 <xTaskIncrementTick+0x170>)
 80035f0:	6013      	str	r3, [r2, #0]
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035f6:	4613      	mov	r3, r2
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	4413      	add	r3, r2
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	4a1f      	ldr	r2, [pc, #124]	; (800367c <xTaskIncrementTick+0x174>)
 8003600:	441a      	add	r2, r3
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	3304      	adds	r3, #4
 8003606:	4619      	mov	r1, r3
 8003608:	4610      	mov	r0, r2
 800360a:	f7fe fe4e 	bl	80022aa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003612:	4b1b      	ldr	r3, [pc, #108]	; (8003680 <xTaskIncrementTick+0x178>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003618:	429a      	cmp	r2, r3
 800361a:	d3af      	bcc.n	800357c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800361c:	2301      	movs	r3, #1
 800361e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003620:	e7ac      	b.n	800357c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003622:	4b17      	ldr	r3, [pc, #92]	; (8003680 <xTaskIncrementTick+0x178>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003628:	4914      	ldr	r1, [pc, #80]	; (800367c <xTaskIncrementTick+0x174>)
 800362a:	4613      	mov	r3, r2
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	4413      	add	r3, r2
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	440b      	add	r3, r1
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	2b01      	cmp	r3, #1
 8003638:	d907      	bls.n	800364a <xTaskIncrementTick+0x142>
			{
				xSwitchRequired = pdTRUE;
 800363a:	2301      	movs	r3, #1
 800363c:	617b      	str	r3, [r7, #20]
 800363e:	e004      	b.n	800364a <xTaskIncrementTick+0x142>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003640:	4b10      	ldr	r3, [pc, #64]	; (8003684 <xTaskIncrementTick+0x17c>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	3301      	adds	r3, #1
 8003646:	4a0f      	ldr	r2, [pc, #60]	; (8003684 <xTaskIncrementTick+0x17c>)
 8003648:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800364a:	4b0f      	ldr	r3, [pc, #60]	; (8003688 <xTaskIncrementTick+0x180>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d001      	beq.n	8003656 <xTaskIncrementTick+0x14e>
		{
			xSwitchRequired = pdTRUE;
 8003652:	2301      	movs	r3, #1
 8003654:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003656:	697b      	ldr	r3, [r7, #20]
}
 8003658:	4618      	mov	r0, r3
 800365a:	3718      	adds	r7, #24
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}
 8003660:	20000d50 	.word	0x20000d50
 8003664:	20000d2c 	.word	0x20000d2c
 8003668:	20000ce0 	.word	0x20000ce0
 800366c:	20000ce4 	.word	0x20000ce4
 8003670:	20000d40 	.word	0x20000d40
 8003674:	20000d48 	.word	0x20000d48
 8003678:	20000d30 	.word	0x20000d30
 800367c:	20000858 	.word	0x20000858
 8003680:	20000854 	.word	0x20000854
 8003684:	20000d38 	.word	0x20000d38
 8003688:	20000d3c 	.word	0x20000d3c

0800368c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003692:	4b33      	ldr	r3, [pc, #204]	; (8003760 <vTaskSwitchContext+0xd4>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d003      	beq.n	80036a2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800369a:	4b32      	ldr	r3, [pc, #200]	; (8003764 <vTaskSwitchContext+0xd8>)
 800369c:	2201      	movs	r2, #1
 800369e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80036a0:	e059      	b.n	8003756 <vTaskSwitchContext+0xca>
		xYieldPending = pdFALSE;
 80036a2:	4b30      	ldr	r3, [pc, #192]	; (8003764 <vTaskSwitchContext+0xd8>)
 80036a4:	2200      	movs	r2, #0
 80036a6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80036a8:	4b2f      	ldr	r3, [pc, #188]	; (8003768 <vTaskSwitchContext+0xdc>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	60fb      	str	r3, [r7, #12]
 80036ae:	e010      	b.n	80036d2 <vTaskSwitchContext+0x46>
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d10a      	bne.n	80036cc <vTaskSwitchContext+0x40>
	__asm volatile
 80036b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ba:	f383 8811 	msr	BASEPRI, r3
 80036be:	f3bf 8f6f 	isb	sy
 80036c2:	f3bf 8f4f 	dsb	sy
 80036c6:	607b      	str	r3, [r7, #4]
}
 80036c8:	bf00      	nop
 80036ca:	e7fe      	b.n	80036ca <vTaskSwitchContext+0x3e>
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	3b01      	subs	r3, #1
 80036d0:	60fb      	str	r3, [r7, #12]
 80036d2:	4926      	ldr	r1, [pc, #152]	; (800376c <vTaskSwitchContext+0xe0>)
 80036d4:	68fa      	ldr	r2, [r7, #12]
 80036d6:	4613      	mov	r3, r2
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	4413      	add	r3, r2
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	440b      	add	r3, r1
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d0e4      	beq.n	80036b0 <vTaskSwitchContext+0x24>
 80036e6:	68fa      	ldr	r2, [r7, #12]
 80036e8:	4613      	mov	r3, r2
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	4413      	add	r3, r2
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	4a1e      	ldr	r2, [pc, #120]	; (800376c <vTaskSwitchContext+0xe0>)
 80036f2:	4413      	add	r3, r2
 80036f4:	60bb      	str	r3, [r7, #8]
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	685a      	ldr	r2, [r3, #4]
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	605a      	str	r2, [r3, #4]
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	685a      	ldr	r2, [r3, #4]
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	3308      	adds	r3, #8
 8003708:	429a      	cmp	r2, r3
 800370a:	d104      	bne.n	8003716 <vTaskSwitchContext+0x8a>
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	685a      	ldr	r2, [r3, #4]
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	605a      	str	r2, [r3, #4]
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	4a14      	ldr	r2, [pc, #80]	; (8003770 <vTaskSwitchContext+0xe4>)
 800371e:	6013      	str	r3, [r2, #0]
 8003720:	4a11      	ldr	r2, [pc, #68]	; (8003768 <vTaskSwitchContext+0xdc>)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8003726:	4b12      	ldr	r3, [pc, #72]	; (8003770 <vTaskSwitchContext+0xe4>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	3334      	adds	r3, #52	; 0x34
 800372c:	2205      	movs	r2, #5
 800372e:	4911      	ldr	r1, [pc, #68]	; (8003774 <vTaskSwitchContext+0xe8>)
 8003730:	4618      	mov	r0, r3
 8003732:	f002 ffb7 	bl	80066a4 <memcmp>
 8003736:	4603      	mov	r3, r0
 8003738:	2b00      	cmp	r3, #0
 800373a:	d005      	beq.n	8003748 <vTaskSwitchContext+0xbc>
 800373c:	4b0c      	ldr	r3, [pc, #48]	; (8003770 <vTaskSwitchContext+0xe4>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4618      	mov	r0, r3
 8003742:	f002 fdb3 	bl	80062ac <SEGGER_SYSVIEW_OnTaskStartExec>
 8003746:	e001      	b.n	800374c <vTaskSwitchContext+0xc0>
 8003748:	f002 fd52 	bl	80061f0 <SEGGER_SYSVIEW_OnIdle>
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800374c:	4b08      	ldr	r3, [pc, #32]	; (8003770 <vTaskSwitchContext+0xe4>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	3354      	adds	r3, #84	; 0x54
 8003752:	4a09      	ldr	r2, [pc, #36]	; (8003778 <vTaskSwitchContext+0xec>)
 8003754:	6013      	str	r3, [r2, #0]
}
 8003756:	bf00      	nop
 8003758:	3710      	adds	r7, #16
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	20000d50 	.word	0x20000d50
 8003764:	20000d3c 	.word	0x20000d3c
 8003768:	20000d30 	.word	0x20000d30
 800376c:	20000858 	.word	0x20000858
 8003770:	20000854 	.word	0x20000854
 8003774:	08006898 	.word	0x08006898
 8003778:	20000010 	.word	0x20000010

0800377c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d10a      	bne.n	80037a2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800378c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003790:	f383 8811 	msr	BASEPRI, r3
 8003794:	f3bf 8f6f 	isb	sy
 8003798:	f3bf 8f4f 	dsb	sy
 800379c:	60fb      	str	r3, [r7, #12]
}
 800379e:	bf00      	nop
 80037a0:	e7fe      	b.n	80037a0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80037a2:	4b07      	ldr	r3, [pc, #28]	; (80037c0 <vTaskPlaceOnEventList+0x44>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	3318      	adds	r3, #24
 80037a8:	4619      	mov	r1, r3
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f7fe fda1 	bl	80022f2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80037b0:	2101      	movs	r1, #1
 80037b2:	6838      	ldr	r0, [r7, #0]
 80037b4:	f000 facc 	bl	8003d50 <prvAddCurrentTaskToDelayedList>
}
 80037b8:	bf00      	nop
 80037ba:	3710      	adds	r7, #16
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	20000854 	.word	0x20000854

080037c4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b086      	sub	sp, #24
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	60f8      	str	r0, [r7, #12]
 80037cc:	60b9      	str	r1, [r7, #8]
 80037ce:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d10a      	bne.n	80037ec <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80037d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037da:	f383 8811 	msr	BASEPRI, r3
 80037de:	f3bf 8f6f 	isb	sy
 80037e2:	f3bf 8f4f 	dsb	sy
 80037e6:	617b      	str	r3, [r7, #20]
}
 80037e8:	bf00      	nop
 80037ea:	e7fe      	b.n	80037ea <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80037ec:	4b0b      	ldr	r3, [pc, #44]	; (800381c <vTaskPlaceOnEventListRestricted+0x58>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	3318      	adds	r3, #24
 80037f2:	4619      	mov	r1, r3
 80037f4:	68f8      	ldr	r0, [r7, #12]
 80037f6:	f7fe fd58 	bl	80022aa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d002      	beq.n	8003806 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003800:	f04f 33ff 	mov.w	r3, #4294967295
 8003804:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8003806:	2024      	movs	r0, #36	; 0x24
 8003808:	f002 f810 	bl	800582c <SEGGER_SYSVIEW_RecordVoid>
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800380c:	6879      	ldr	r1, [r7, #4]
 800380e:	68b8      	ldr	r0, [r7, #8]
 8003810:	f000 fa9e 	bl	8003d50 <prvAddCurrentTaskToDelayedList>
	}
 8003814:	bf00      	nop
 8003816:	3718      	adds	r7, #24
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}
 800381c:	20000854 	.word	0x20000854

08003820 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b086      	sub	sp, #24
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	68db      	ldr	r3, [r3, #12]
 800382e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d10a      	bne.n	800384c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800383a:	f383 8811 	msr	BASEPRI, r3
 800383e:	f3bf 8f6f 	isb	sy
 8003842:	f3bf 8f4f 	dsb	sy
 8003846:	60fb      	str	r3, [r7, #12]
}
 8003848:	bf00      	nop
 800384a:	e7fe      	b.n	800384a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	3318      	adds	r3, #24
 8003850:	4618      	mov	r0, r3
 8003852:	f7fe fd87 	bl	8002364 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003856:	4b20      	ldr	r3, [pc, #128]	; (80038d8 <xTaskRemoveFromEventList+0xb8>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d121      	bne.n	80038a2 <xTaskRemoveFromEventList+0x82>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	3304      	adds	r3, #4
 8003862:	4618      	mov	r0, r3
 8003864:	f7fe fd7e 	bl	8002364 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	4618      	mov	r0, r3
 800386c:	f002 fd60 	bl	8006330 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003874:	4b19      	ldr	r3, [pc, #100]	; (80038dc <xTaskRemoveFromEventList+0xbc>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	429a      	cmp	r2, r3
 800387a:	d903      	bls.n	8003884 <xTaskRemoveFromEventList+0x64>
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003880:	4a16      	ldr	r2, [pc, #88]	; (80038dc <xTaskRemoveFromEventList+0xbc>)
 8003882:	6013      	str	r3, [r2, #0]
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003888:	4613      	mov	r3, r2
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	4413      	add	r3, r2
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	4a13      	ldr	r2, [pc, #76]	; (80038e0 <xTaskRemoveFromEventList+0xc0>)
 8003892:	441a      	add	r2, r3
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	3304      	adds	r3, #4
 8003898:	4619      	mov	r1, r3
 800389a:	4610      	mov	r0, r2
 800389c:	f7fe fd05 	bl	80022aa <vListInsertEnd>
 80038a0:	e005      	b.n	80038ae <xTaskRemoveFromEventList+0x8e>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	3318      	adds	r3, #24
 80038a6:	4619      	mov	r1, r3
 80038a8:	480e      	ldr	r0, [pc, #56]	; (80038e4 <xTaskRemoveFromEventList+0xc4>)
 80038aa:	f7fe fcfe 	bl	80022aa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038b2:	4b0d      	ldr	r3, [pc, #52]	; (80038e8 <xTaskRemoveFromEventList+0xc8>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d905      	bls.n	80038c8 <xTaskRemoveFromEventList+0xa8>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80038bc:	2301      	movs	r3, #1
 80038be:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80038c0:	4b0a      	ldr	r3, [pc, #40]	; (80038ec <xTaskRemoveFromEventList+0xcc>)
 80038c2:	2201      	movs	r2, #1
 80038c4:	601a      	str	r2, [r3, #0]
 80038c6:	e001      	b.n	80038cc <xTaskRemoveFromEventList+0xac>
	}
	else
	{
		xReturn = pdFALSE;
 80038c8:	2300      	movs	r3, #0
 80038ca:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80038cc:	697b      	ldr	r3, [r7, #20]
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3718      	adds	r7, #24
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	20000d50 	.word	0x20000d50
 80038dc:	20000d30 	.word	0x20000d30
 80038e0:	20000858 	.word	0x20000858
 80038e4:	20000ce8 	.word	0x20000ce8
 80038e8:	20000854 	.word	0x20000854
 80038ec:	20000d3c 	.word	0x20000d3c

080038f0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80038f8:	4b06      	ldr	r3, [pc, #24]	; (8003914 <vTaskInternalSetTimeOutState+0x24>)
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003900:	4b05      	ldr	r3, [pc, #20]	; (8003918 <vTaskInternalSetTimeOutState+0x28>)
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	605a      	str	r2, [r3, #4]
}
 8003908:	bf00      	nop
 800390a:	370c      	adds	r7, #12
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr
 8003914:	20000d40 	.word	0x20000d40
 8003918:	20000d2c 	.word	0x20000d2c

0800391c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b088      	sub	sp, #32
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d10a      	bne.n	8003942 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800392c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003930:	f383 8811 	msr	BASEPRI, r3
 8003934:	f3bf 8f6f 	isb	sy
 8003938:	f3bf 8f4f 	dsb	sy
 800393c:	613b      	str	r3, [r7, #16]
}
 800393e:	bf00      	nop
 8003940:	e7fe      	b.n	8003940 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d10a      	bne.n	800395e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800394c:	f383 8811 	msr	BASEPRI, r3
 8003950:	f3bf 8f6f 	isb	sy
 8003954:	f3bf 8f4f 	dsb	sy
 8003958:	60fb      	str	r3, [r7, #12]
}
 800395a:	bf00      	nop
 800395c:	e7fe      	b.n	800395c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800395e:	f000 fe89 	bl	8004674 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003962:	4b1d      	ldr	r3, [pc, #116]	; (80039d8 <xTaskCheckForTimeOut+0xbc>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	69ba      	ldr	r2, [r7, #24]
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f1b3 3fff 	cmp.w	r3, #4294967295
 800397a:	d102      	bne.n	8003982 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800397c:	2300      	movs	r3, #0
 800397e:	61fb      	str	r3, [r7, #28]
 8003980:	e023      	b.n	80039ca <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	4b15      	ldr	r3, [pc, #84]	; (80039dc <xTaskCheckForTimeOut+0xc0>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	429a      	cmp	r2, r3
 800398c:	d007      	beq.n	800399e <xTaskCheckForTimeOut+0x82>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	69ba      	ldr	r2, [r7, #24]
 8003994:	429a      	cmp	r2, r3
 8003996:	d302      	bcc.n	800399e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003998:	2301      	movs	r3, #1
 800399a:	61fb      	str	r3, [r7, #28]
 800399c:	e015      	b.n	80039ca <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	697a      	ldr	r2, [r7, #20]
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d20b      	bcs.n	80039c0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	1ad2      	subs	r2, r2, r3
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f7ff ff9b 	bl	80038f0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80039ba:	2300      	movs	r3, #0
 80039bc:	61fb      	str	r3, [r7, #28]
 80039be:	e004      	b.n	80039ca <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	2200      	movs	r2, #0
 80039c4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80039c6:	2301      	movs	r3, #1
 80039c8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80039ca:	f000 fe83 	bl	80046d4 <vPortExitCritical>

	return xReturn;
 80039ce:	69fb      	ldr	r3, [r7, #28]
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3720      	adds	r7, #32
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	20000d2c 	.word	0x20000d2c
 80039dc:	20000d40 	.word	0x20000d40

080039e0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80039e0:	b480      	push	{r7}
 80039e2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80039e4:	4b03      	ldr	r3, [pc, #12]	; (80039f4 <vTaskMissedYield+0x14>)
 80039e6:	2201      	movs	r2, #1
 80039e8:	601a      	str	r2, [r3, #0]
}
 80039ea:	bf00      	nop
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr
 80039f4:	20000d3c 	.word	0x20000d3c

080039f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b082      	sub	sp, #8
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003a00:	f000 f852 	bl	8003aa8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003a04:	4b06      	ldr	r3, [pc, #24]	; (8003a20 <prvIdleTask+0x28>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d9f9      	bls.n	8003a00 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003a0c:	4b05      	ldr	r3, [pc, #20]	; (8003a24 <prvIdleTask+0x2c>)
 8003a0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a12:	601a      	str	r2, [r3, #0]
 8003a14:	f3bf 8f4f 	dsb	sy
 8003a18:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003a1c:	e7f0      	b.n	8003a00 <prvIdleTask+0x8>
 8003a1e:	bf00      	nop
 8003a20:	20000858 	.word	0x20000858
 8003a24:	e000ed04 	.word	0xe000ed04

08003a28 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b082      	sub	sp, #8
 8003a2c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003a2e:	2300      	movs	r3, #0
 8003a30:	607b      	str	r3, [r7, #4]
 8003a32:	e00c      	b.n	8003a4e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	4613      	mov	r3, r2
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	4413      	add	r3, r2
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	4a12      	ldr	r2, [pc, #72]	; (8003a88 <prvInitialiseTaskLists+0x60>)
 8003a40:	4413      	add	r3, r2
 8003a42:	4618      	mov	r0, r3
 8003a44:	f7fe fc04 	bl	8002250 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	3301      	adds	r3, #1
 8003a4c:	607b      	str	r3, [r7, #4]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2b37      	cmp	r3, #55	; 0x37
 8003a52:	d9ef      	bls.n	8003a34 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003a54:	480d      	ldr	r0, [pc, #52]	; (8003a8c <prvInitialiseTaskLists+0x64>)
 8003a56:	f7fe fbfb 	bl	8002250 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003a5a:	480d      	ldr	r0, [pc, #52]	; (8003a90 <prvInitialiseTaskLists+0x68>)
 8003a5c:	f7fe fbf8 	bl	8002250 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003a60:	480c      	ldr	r0, [pc, #48]	; (8003a94 <prvInitialiseTaskLists+0x6c>)
 8003a62:	f7fe fbf5 	bl	8002250 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003a66:	480c      	ldr	r0, [pc, #48]	; (8003a98 <prvInitialiseTaskLists+0x70>)
 8003a68:	f7fe fbf2 	bl	8002250 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003a6c:	480b      	ldr	r0, [pc, #44]	; (8003a9c <prvInitialiseTaskLists+0x74>)
 8003a6e:	f7fe fbef 	bl	8002250 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003a72:	4b0b      	ldr	r3, [pc, #44]	; (8003aa0 <prvInitialiseTaskLists+0x78>)
 8003a74:	4a05      	ldr	r2, [pc, #20]	; (8003a8c <prvInitialiseTaskLists+0x64>)
 8003a76:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003a78:	4b0a      	ldr	r3, [pc, #40]	; (8003aa4 <prvInitialiseTaskLists+0x7c>)
 8003a7a:	4a05      	ldr	r2, [pc, #20]	; (8003a90 <prvInitialiseTaskLists+0x68>)
 8003a7c:	601a      	str	r2, [r3, #0]
}
 8003a7e:	bf00      	nop
 8003a80:	3708      	adds	r7, #8
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	20000858 	.word	0x20000858
 8003a8c:	20000cb8 	.word	0x20000cb8
 8003a90:	20000ccc 	.word	0x20000ccc
 8003a94:	20000ce8 	.word	0x20000ce8
 8003a98:	20000cfc 	.word	0x20000cfc
 8003a9c:	20000d14 	.word	0x20000d14
 8003aa0:	20000ce0 	.word	0x20000ce0
 8003aa4:	20000ce4 	.word	0x20000ce4

08003aa8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003aae:	e019      	b.n	8003ae4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003ab0:	f000 fde0 	bl	8004674 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003ab4:	4b10      	ldr	r3, [pc, #64]	; (8003af8 <prvCheckTasksWaitingTermination+0x50>)
 8003ab6:	68db      	ldr	r3, [r3, #12]
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	3304      	adds	r3, #4
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f7fe fc4f 	bl	8002364 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003ac6:	4b0d      	ldr	r3, [pc, #52]	; (8003afc <prvCheckTasksWaitingTermination+0x54>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	3b01      	subs	r3, #1
 8003acc:	4a0b      	ldr	r2, [pc, #44]	; (8003afc <prvCheckTasksWaitingTermination+0x54>)
 8003ace:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003ad0:	4b0b      	ldr	r3, [pc, #44]	; (8003b00 <prvCheckTasksWaitingTermination+0x58>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	3b01      	subs	r3, #1
 8003ad6:	4a0a      	ldr	r2, [pc, #40]	; (8003b00 <prvCheckTasksWaitingTermination+0x58>)
 8003ad8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003ada:	f000 fdfb 	bl	80046d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f000 f848 	bl	8003b74 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003ae4:	4b06      	ldr	r3, [pc, #24]	; (8003b00 <prvCheckTasksWaitingTermination+0x58>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d1e1      	bne.n	8003ab0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003aec:	bf00      	nop
 8003aee:	bf00      	nop
 8003af0:	3708      	adds	r7, #8
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	20000cfc 	.word	0x20000cfc
 8003afc:	20000d28 	.word	0x20000d28
 8003b00:	20000d10 	.word	0x20000d10

08003b04 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8003b04:	b480      	push	{r7}
 8003b06:	b085      	sub	sp, #20
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8003b10:	e005      	b.n	8003b1e <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	3301      	adds	r3, #1
 8003b16:	607b      	str	r3, [r7, #4]
			ulCount++;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	781b      	ldrb	r3, [r3, #0]
 8003b22:	2ba5      	cmp	r3, #165	; 0xa5
 8003b24:	d0f5      	beq.n	8003b12 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	089b      	lsrs	r3, r3, #2
 8003b2a:	60fb      	str	r3, [r7, #12]

		return ( uint16_t ) ulCount;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	b29b      	uxth	r3, r3
	}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3714      	adds	r7, #20
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr

08003b3c <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b086      	sub	sp, #24
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d102      	bne.n	8003b50 <uxTaskGetStackHighWaterMark+0x14>
 8003b4a:	4b09      	ldr	r3, [pc, #36]	; (8003b70 <uxTaskGetStackHighWaterMark+0x34>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	e000      	b.n	8003b52 <uxTaskGetStackHighWaterMark+0x16>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b58:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 8003b5a:	6938      	ldr	r0, [r7, #16]
 8003b5c:	f7ff ffd2 	bl	8003b04 <prvTaskCheckFreeStackSpace>
 8003b60:	4603      	mov	r3, r0
 8003b62:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 8003b64:	68fb      	ldr	r3, [r7, #12]
	}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3718      	adds	r7, #24
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	20000854 	.word	0x20000854

08003b74 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	3354      	adds	r3, #84	; 0x54
 8003b80:	4618      	mov	r0, r3
 8003b82:	f002 fdc3 	bl	800670c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d108      	bne.n	8003ba2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b94:	4618      	mov	r0, r3
 8003b96:	f000 ff53 	bl	8004a40 <vPortFree>
				vPortFree( pxTCB );
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f000 ff50 	bl	8004a40 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003ba0:	e018      	b.n	8003bd4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d103      	bne.n	8003bb4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f000 ff47 	bl	8004a40 <vPortFree>
	}
 8003bb2:	e00f      	b.n	8003bd4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8003bba:	2b02      	cmp	r3, #2
 8003bbc:	d00a      	beq.n	8003bd4 <prvDeleteTCB+0x60>
	__asm volatile
 8003bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc2:	f383 8811 	msr	BASEPRI, r3
 8003bc6:	f3bf 8f6f 	isb	sy
 8003bca:	f3bf 8f4f 	dsb	sy
 8003bce:	60fb      	str	r3, [r7, #12]
}
 8003bd0:	bf00      	nop
 8003bd2:	e7fe      	b.n	8003bd2 <prvDeleteTCB+0x5e>
	}
 8003bd4:	bf00      	nop
 8003bd6:	3710      	adds	r7, #16
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b083      	sub	sp, #12
 8003be0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003be2:	4b0f      	ldr	r3, [pc, #60]	; (8003c20 <prvResetNextTaskUnblockTime+0x44>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d101      	bne.n	8003bf0 <prvResetNextTaskUnblockTime+0x14>
 8003bec:	2301      	movs	r3, #1
 8003bee:	e000      	b.n	8003bf2 <prvResetNextTaskUnblockTime+0x16>
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d004      	beq.n	8003c00 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003bf6:	4b0b      	ldr	r3, [pc, #44]	; (8003c24 <prvResetNextTaskUnblockTime+0x48>)
 8003bf8:	f04f 32ff 	mov.w	r2, #4294967295
 8003bfc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003bfe:	e008      	b.n	8003c12 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003c00:	4b07      	ldr	r3, [pc, #28]	; (8003c20 <prvResetNextTaskUnblockTime+0x44>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	68db      	ldr	r3, [r3, #12]
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	4a05      	ldr	r2, [pc, #20]	; (8003c24 <prvResetNextTaskUnblockTime+0x48>)
 8003c10:	6013      	str	r3, [r2, #0]
}
 8003c12:	bf00      	nop
 8003c14:	370c      	adds	r7, #12
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr
 8003c1e:	bf00      	nop
 8003c20:	20000ce0 	.word	0x20000ce0
 8003c24:	20000d48 	.word	0x20000d48

08003c28 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003c2e:	4b0b      	ldr	r3, [pc, #44]	; (8003c5c <xTaskGetSchedulerState+0x34>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d102      	bne.n	8003c3c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003c36:	2301      	movs	r3, #1
 8003c38:	607b      	str	r3, [r7, #4]
 8003c3a:	e008      	b.n	8003c4e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c3c:	4b08      	ldr	r3, [pc, #32]	; (8003c60 <xTaskGetSchedulerState+0x38>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d102      	bne.n	8003c4a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003c44:	2302      	movs	r3, #2
 8003c46:	607b      	str	r3, [r7, #4]
 8003c48:	e001      	b.n	8003c4e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003c4e:	687b      	ldr	r3, [r7, #4]
	}
 8003c50:	4618      	mov	r0, r3
 8003c52:	370c      	adds	r7, #12
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr
 8003c5c:	20000d34 	.word	0x20000d34
 8003c60:	20000d50 	.word	0x20000d50

08003c64 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b086      	sub	sp, #24
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003c70:	2300      	movs	r3, #0
 8003c72:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d05f      	beq.n	8003d3a <xTaskPriorityDisinherit+0xd6>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003c7a:	4b32      	ldr	r3, [pc, #200]	; (8003d44 <xTaskPriorityDisinherit+0xe0>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	693a      	ldr	r2, [r7, #16]
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d00a      	beq.n	8003c9a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c88:	f383 8811 	msr	BASEPRI, r3
 8003c8c:	f3bf 8f6f 	isb	sy
 8003c90:	f3bf 8f4f 	dsb	sy
 8003c94:	60fb      	str	r3, [r7, #12]
}
 8003c96:	bf00      	nop
 8003c98:	e7fe      	b.n	8003c98 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d10a      	bne.n	8003cb8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ca6:	f383 8811 	msr	BASEPRI, r3
 8003caa:	f3bf 8f6f 	isb	sy
 8003cae:	f3bf 8f4f 	dsb	sy
 8003cb2:	60bb      	str	r3, [r7, #8]
}
 8003cb4:	bf00      	nop
 8003cb6:	e7fe      	b.n	8003cb6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cbc:	1e5a      	subs	r2, r3, #1
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d035      	beq.n	8003d3a <xTaskPriorityDisinherit+0xd6>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d131      	bne.n	8003d3a <xTaskPriorityDisinherit+0xd6>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	3304      	adds	r3, #4
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f7fe fb42 	bl	8002364 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	4619      	mov	r1, r3
 8003ce4:	204a      	movs	r0, #74	; 0x4a
 8003ce6:	f001 fdbf 	bl	8005868 <SEGGER_SYSVIEW_RecordU32>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	4618      	mov	r0, r3
 8003d02:	f002 fb15 	bl	8006330 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d0a:	4b0f      	ldr	r3, [pc, #60]	; (8003d48 <xTaskPriorityDisinherit+0xe4>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d903      	bls.n	8003d1a <xTaskPriorityDisinherit+0xb6>
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d16:	4a0c      	ldr	r2, [pc, #48]	; (8003d48 <xTaskPriorityDisinherit+0xe4>)
 8003d18:	6013      	str	r3, [r2, #0]
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d1e:	4613      	mov	r3, r2
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	4413      	add	r3, r2
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	4a09      	ldr	r2, [pc, #36]	; (8003d4c <xTaskPriorityDisinherit+0xe8>)
 8003d28:	441a      	add	r2, r3
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	3304      	adds	r3, #4
 8003d2e:	4619      	mov	r1, r3
 8003d30:	4610      	mov	r0, r2
 8003d32:	f7fe faba 	bl	80022aa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003d36:	2301      	movs	r3, #1
 8003d38:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003d3a:	697b      	ldr	r3, [r7, #20]
	}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3718      	adds	r7, #24
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	20000854 	.word	0x20000854
 8003d48:	20000d30 	.word	0x20000d30
 8003d4c:	20000858 	.word	0x20000858

08003d50 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003d5a:	4b21      	ldr	r3, [pc, #132]	; (8003de0 <prvAddCurrentTaskToDelayedList+0x90>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003d60:	4b20      	ldr	r3, [pc, #128]	; (8003de4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	3304      	adds	r3, #4
 8003d66:	4618      	mov	r0, r3
 8003d68:	f7fe fafc 	bl	8002364 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d72:	d10a      	bne.n	8003d8a <prvAddCurrentTaskToDelayedList+0x3a>
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d007      	beq.n	8003d8a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d7a:	4b1a      	ldr	r3, [pc, #104]	; (8003de4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	3304      	adds	r3, #4
 8003d80:	4619      	mov	r1, r3
 8003d82:	4819      	ldr	r0, [pc, #100]	; (8003de8 <prvAddCurrentTaskToDelayedList+0x98>)
 8003d84:	f7fe fa91 	bl	80022aa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003d88:	e026      	b.n	8003dd8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003d8a:	68fa      	ldr	r2, [r7, #12]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	4413      	add	r3, r2
 8003d90:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003d92:	4b14      	ldr	r3, [pc, #80]	; (8003de4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	68ba      	ldr	r2, [r7, #8]
 8003d98:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003d9a:	68ba      	ldr	r2, [r7, #8]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d209      	bcs.n	8003db6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003da2:	4b12      	ldr	r3, [pc, #72]	; (8003dec <prvAddCurrentTaskToDelayedList+0x9c>)
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	4b0f      	ldr	r3, [pc, #60]	; (8003de4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	3304      	adds	r3, #4
 8003dac:	4619      	mov	r1, r3
 8003dae:	4610      	mov	r0, r2
 8003db0:	f7fe fa9f 	bl	80022f2 <vListInsert>
}
 8003db4:	e010      	b.n	8003dd8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003db6:	4b0e      	ldr	r3, [pc, #56]	; (8003df0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	4b0a      	ldr	r3, [pc, #40]	; (8003de4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	3304      	adds	r3, #4
 8003dc0:	4619      	mov	r1, r3
 8003dc2:	4610      	mov	r0, r2
 8003dc4:	f7fe fa95 	bl	80022f2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003dc8:	4b0a      	ldr	r3, [pc, #40]	; (8003df4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	68ba      	ldr	r2, [r7, #8]
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d202      	bcs.n	8003dd8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003dd2:	4a08      	ldr	r2, [pc, #32]	; (8003df4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	6013      	str	r3, [r2, #0]
}
 8003dd8:	bf00      	nop
 8003dda:	3710      	adds	r7, #16
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}
 8003de0:	20000d2c 	.word	0x20000d2c
 8003de4:	20000854 	.word	0x20000854
 8003de8:	20000d14 	.word	0x20000d14
 8003dec:	20000ce4 	.word	0x20000ce4
 8003df0:	20000ce0 	.word	0x20000ce0
 8003df4:	20000d48 	.word	0x20000d48

08003df8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b08a      	sub	sp, #40	; 0x28
 8003dfc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003e02:	f000 facb 	bl	800439c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003e06:	4b1c      	ldr	r3, [pc, #112]	; (8003e78 <xTimerCreateTimerTask+0x80>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d021      	beq.n	8003e52 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003e12:	2300      	movs	r3, #0
 8003e14:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003e16:	1d3a      	adds	r2, r7, #4
 8003e18:	f107 0108 	add.w	r1, r7, #8
 8003e1c:	f107 030c 	add.w	r3, r7, #12
 8003e20:	4618      	mov	r0, r3
 8003e22:	f7fe f9fb 	bl	800221c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003e26:	6879      	ldr	r1, [r7, #4]
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	68fa      	ldr	r2, [r7, #12]
 8003e2c:	9202      	str	r2, [sp, #8]
 8003e2e:	9301      	str	r3, [sp, #4]
 8003e30:	2302      	movs	r3, #2
 8003e32:	9300      	str	r3, [sp, #0]
 8003e34:	2300      	movs	r3, #0
 8003e36:	460a      	mov	r2, r1
 8003e38:	4910      	ldr	r1, [pc, #64]	; (8003e7c <xTimerCreateTimerTask+0x84>)
 8003e3a:	4811      	ldr	r0, [pc, #68]	; (8003e80 <xTimerCreateTimerTask+0x88>)
 8003e3c:	f7ff f81c 	bl	8002e78 <xTaskCreateStatic>
 8003e40:	4603      	mov	r3, r0
 8003e42:	4a10      	ldr	r2, [pc, #64]	; (8003e84 <xTimerCreateTimerTask+0x8c>)
 8003e44:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003e46:	4b0f      	ldr	r3, [pc, #60]	; (8003e84 <xTimerCreateTimerTask+0x8c>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d001      	beq.n	8003e52 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d10a      	bne.n	8003e6e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8003e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e5c:	f383 8811 	msr	BASEPRI, r3
 8003e60:	f3bf 8f6f 	isb	sy
 8003e64:	f3bf 8f4f 	dsb	sy
 8003e68:	613b      	str	r3, [r7, #16]
}
 8003e6a:	bf00      	nop
 8003e6c:	e7fe      	b.n	8003e6c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003e6e:	697b      	ldr	r3, [r7, #20]
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3718      	adds	r7, #24
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}
 8003e78:	20000d84 	.word	0x20000d84
 8003e7c:	080068a0 	.word	0x080068a0
 8003e80:	08003fa5 	.word	0x08003fa5
 8003e84:	20000d88 	.word	0x20000d88

08003e88 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b08a      	sub	sp, #40	; 0x28
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	60f8      	str	r0, [r7, #12]
 8003e90:	60b9      	str	r1, [r7, #8]
 8003e92:	607a      	str	r2, [r7, #4]
 8003e94:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003e96:	2300      	movs	r3, #0
 8003e98:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d10a      	bne.n	8003eb6 <xTimerGenericCommand+0x2e>
	__asm volatile
 8003ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ea4:	f383 8811 	msr	BASEPRI, r3
 8003ea8:	f3bf 8f6f 	isb	sy
 8003eac:	f3bf 8f4f 	dsb	sy
 8003eb0:	623b      	str	r3, [r7, #32]
}
 8003eb2:	bf00      	nop
 8003eb4:	e7fe      	b.n	8003eb4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003eb6:	4b1a      	ldr	r3, [pc, #104]	; (8003f20 <xTimerGenericCommand+0x98>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d02a      	beq.n	8003f14 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	2b05      	cmp	r3, #5
 8003ece:	dc18      	bgt.n	8003f02 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003ed0:	f7ff feaa 	bl	8003c28 <xTaskGetSchedulerState>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b02      	cmp	r3, #2
 8003ed8:	d109      	bne.n	8003eee <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003eda:	4b11      	ldr	r3, [pc, #68]	; (8003f20 <xTimerGenericCommand+0x98>)
 8003edc:	6818      	ldr	r0, [r3, #0]
 8003ede:	f107 0110 	add.w	r1, r7, #16
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ee6:	f7fe fb6f 	bl	80025c8 <xQueueGenericSend>
 8003eea:	6278      	str	r0, [r7, #36]	; 0x24
 8003eec:	e012      	b.n	8003f14 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003eee:	4b0c      	ldr	r3, [pc, #48]	; (8003f20 <xTimerGenericCommand+0x98>)
 8003ef0:	6818      	ldr	r0, [r3, #0]
 8003ef2:	f107 0110 	add.w	r1, r7, #16
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	2200      	movs	r2, #0
 8003efa:	f7fe fb65 	bl	80025c8 <xQueueGenericSend>
 8003efe:	6278      	str	r0, [r7, #36]	; 0x24
 8003f00:	e008      	b.n	8003f14 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003f02:	4b07      	ldr	r3, [pc, #28]	; (8003f20 <xTimerGenericCommand+0x98>)
 8003f04:	6818      	ldr	r0, [r3, #0]
 8003f06:	f107 0110 	add.w	r1, r7, #16
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	683a      	ldr	r2, [r7, #0]
 8003f0e:	f7fe fc81 	bl	8002814 <xQueueGenericSendFromISR>
 8003f12:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3728      	adds	r7, #40	; 0x28
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	bf00      	nop
 8003f20:	20000d84 	.word	0x20000d84

08003f24 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b088      	sub	sp, #32
 8003f28:	af02      	add	r7, sp, #8
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003f2e:	4b1c      	ldr	r3, [pc, #112]	; (8003fa0 <prvProcessExpiredTimer+0x7c>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	3304      	adds	r3, #4
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f7fe fa11 	bl	8002364 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	69db      	ldr	r3, [r3, #28]
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d122      	bne.n	8003f90 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	699a      	ldr	r2, [r3, #24]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	18d1      	adds	r1, r2, r3
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	683a      	ldr	r2, [r7, #0]
 8003f56:	6978      	ldr	r0, [r7, #20]
 8003f58:	f000 f8c8 	bl	80040ec <prvInsertTimerInActiveList>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d016      	beq.n	8003f90 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003f62:	2300      	movs	r3, #0
 8003f64:	9300      	str	r3, [sp, #0]
 8003f66:	2300      	movs	r3, #0
 8003f68:	687a      	ldr	r2, [r7, #4]
 8003f6a:	2100      	movs	r1, #0
 8003f6c:	6978      	ldr	r0, [r7, #20]
 8003f6e:	f7ff ff8b 	bl	8003e88 <xTimerGenericCommand>
 8003f72:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d10a      	bne.n	8003f90 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8003f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f7e:	f383 8811 	msr	BASEPRI, r3
 8003f82:	f3bf 8f6f 	isb	sy
 8003f86:	f3bf 8f4f 	dsb	sy
 8003f8a:	60fb      	str	r3, [r7, #12]
}
 8003f8c:	bf00      	nop
 8003f8e:	e7fe      	b.n	8003f8e <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f94:	6978      	ldr	r0, [r7, #20]
 8003f96:	4798      	blx	r3
}
 8003f98:	bf00      	nop
 8003f9a:	3718      	adds	r7, #24
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	20000d7c 	.word	0x20000d7c

08003fa4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003fac:	f107 0308 	add.w	r3, r7, #8
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f000 f857 	bl	8004064 <prvGetNextExpireTime>
 8003fb6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	4619      	mov	r1, r3
 8003fbc:	68f8      	ldr	r0, [r7, #12]
 8003fbe:	f000 f803 	bl	8003fc8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003fc2:	f000 f8d5 	bl	8004170 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003fc6:	e7f1      	b.n	8003fac <prvTimerTask+0x8>

08003fc8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b084      	sub	sp, #16
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003fd2:	f7ff f9c7 	bl	8003364 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003fd6:	f107 0308 	add.w	r3, r7, #8
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f000 f866 	bl	80040ac <prvSampleTimeNow>
 8003fe0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d130      	bne.n	800404a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d10a      	bne.n	8004004 <prvProcessTimerOrBlockTask+0x3c>
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d806      	bhi.n	8004004 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003ff6:	f7ff f9c3 	bl	8003380 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003ffa:	68f9      	ldr	r1, [r7, #12]
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f7ff ff91 	bl	8003f24 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004002:	e024      	b.n	800404e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d008      	beq.n	800401c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800400a:	4b13      	ldr	r3, [pc, #76]	; (8004058 <prvProcessTimerOrBlockTask+0x90>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	2b00      	cmp	r3, #0
 8004012:	bf0c      	ite	eq
 8004014:	2301      	moveq	r3, #1
 8004016:	2300      	movne	r3, #0
 8004018:	b2db      	uxtb	r3, r3
 800401a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800401c:	4b0f      	ldr	r3, [pc, #60]	; (800405c <prvProcessTimerOrBlockTask+0x94>)
 800401e:	6818      	ldr	r0, [r3, #0]
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	1ad3      	subs	r3, r2, r3
 8004026:	683a      	ldr	r2, [r7, #0]
 8004028:	4619      	mov	r1, r3
 800402a:	f7fe fef1 	bl	8002e10 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800402e:	f7ff f9a7 	bl	8003380 <xTaskResumeAll>
 8004032:	4603      	mov	r3, r0
 8004034:	2b00      	cmp	r3, #0
 8004036:	d10a      	bne.n	800404e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004038:	4b09      	ldr	r3, [pc, #36]	; (8004060 <prvProcessTimerOrBlockTask+0x98>)
 800403a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800403e:	601a      	str	r2, [r3, #0]
 8004040:	f3bf 8f4f 	dsb	sy
 8004044:	f3bf 8f6f 	isb	sy
}
 8004048:	e001      	b.n	800404e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800404a:	f7ff f999 	bl	8003380 <xTaskResumeAll>
}
 800404e:	bf00      	nop
 8004050:	3710      	adds	r7, #16
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
 8004056:	bf00      	nop
 8004058:	20000d80 	.word	0x20000d80
 800405c:	20000d84 	.word	0x20000d84
 8004060:	e000ed04 	.word	0xe000ed04

08004064 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004064:	b480      	push	{r7}
 8004066:	b085      	sub	sp, #20
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800406c:	4b0e      	ldr	r3, [pc, #56]	; (80040a8 <prvGetNextExpireTime+0x44>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	2b00      	cmp	r3, #0
 8004074:	bf0c      	ite	eq
 8004076:	2301      	moveq	r3, #1
 8004078:	2300      	movne	r3, #0
 800407a:	b2db      	uxtb	r3, r3
 800407c:	461a      	mov	r2, r3
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d105      	bne.n	8004096 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800408a:	4b07      	ldr	r3, [pc, #28]	; (80040a8 <prvGetNextExpireTime+0x44>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	60fb      	str	r3, [r7, #12]
 8004094:	e001      	b.n	800409a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004096:	2300      	movs	r3, #0
 8004098:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800409a:	68fb      	ldr	r3, [r7, #12]
}
 800409c:	4618      	mov	r0, r3
 800409e:	3714      	adds	r7, #20
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr
 80040a8:	20000d7c 	.word	0x20000d7c

080040ac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b084      	sub	sp, #16
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80040b4:	f7ff fa06 	bl	80034c4 <xTaskGetTickCount>
 80040b8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80040ba:	4b0b      	ldr	r3, [pc, #44]	; (80040e8 <prvSampleTimeNow+0x3c>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	68fa      	ldr	r2, [r7, #12]
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d205      	bcs.n	80040d0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80040c4:	f000 f908 	bl	80042d8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2201      	movs	r2, #1
 80040cc:	601a      	str	r2, [r3, #0]
 80040ce:	e002      	b.n	80040d6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80040d6:	4a04      	ldr	r2, [pc, #16]	; (80040e8 <prvSampleTimeNow+0x3c>)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80040dc:	68fb      	ldr	r3, [r7, #12]
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3710      	adds	r7, #16
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	20000d8c 	.word	0x20000d8c

080040ec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b086      	sub	sp, #24
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	60b9      	str	r1, [r7, #8]
 80040f6:	607a      	str	r2, [r7, #4]
 80040f8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80040fa:	2300      	movs	r3, #0
 80040fc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	68ba      	ldr	r2, [r7, #8]
 8004102:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	68fa      	ldr	r2, [r7, #12]
 8004108:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800410a:	68ba      	ldr	r2, [r7, #8]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	429a      	cmp	r2, r3
 8004110:	d812      	bhi.n	8004138 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	1ad2      	subs	r2, r2, r3
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	699b      	ldr	r3, [r3, #24]
 800411c:	429a      	cmp	r2, r3
 800411e:	d302      	bcc.n	8004126 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004120:	2301      	movs	r3, #1
 8004122:	617b      	str	r3, [r7, #20]
 8004124:	e01b      	b.n	800415e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004126:	4b10      	ldr	r3, [pc, #64]	; (8004168 <prvInsertTimerInActiveList+0x7c>)
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	3304      	adds	r3, #4
 800412e:	4619      	mov	r1, r3
 8004130:	4610      	mov	r0, r2
 8004132:	f7fe f8de 	bl	80022f2 <vListInsert>
 8004136:	e012      	b.n	800415e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004138:	687a      	ldr	r2, [r7, #4]
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	429a      	cmp	r2, r3
 800413e:	d206      	bcs.n	800414e <prvInsertTimerInActiveList+0x62>
 8004140:	68ba      	ldr	r2, [r7, #8]
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	429a      	cmp	r2, r3
 8004146:	d302      	bcc.n	800414e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004148:	2301      	movs	r3, #1
 800414a:	617b      	str	r3, [r7, #20]
 800414c:	e007      	b.n	800415e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800414e:	4b07      	ldr	r3, [pc, #28]	; (800416c <prvInsertTimerInActiveList+0x80>)
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	3304      	adds	r3, #4
 8004156:	4619      	mov	r1, r3
 8004158:	4610      	mov	r0, r2
 800415a:	f7fe f8ca 	bl	80022f2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800415e:	697b      	ldr	r3, [r7, #20]
}
 8004160:	4618      	mov	r0, r3
 8004162:	3718      	adds	r7, #24
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}
 8004168:	20000d80 	.word	0x20000d80
 800416c:	20000d7c 	.word	0x20000d7c

08004170 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b08e      	sub	sp, #56	; 0x38
 8004174:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004176:	e09d      	b.n	80042b4 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2b00      	cmp	r3, #0
 800417c:	da18      	bge.n	80041b0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800417e:	1d3b      	adds	r3, r7, #4
 8004180:	3304      	adds	r3, #4
 8004182:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004186:	2b00      	cmp	r3, #0
 8004188:	d10a      	bne.n	80041a0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800418a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800418e:	f383 8811 	msr	BASEPRI, r3
 8004192:	f3bf 8f6f 	isb	sy
 8004196:	f3bf 8f4f 	dsb	sy
 800419a:	61fb      	str	r3, [r7, #28]
}
 800419c:	bf00      	nop
 800419e:	e7fe      	b.n	800419e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80041a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041a6:	6850      	ldr	r0, [r2, #4]
 80041a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041aa:	6892      	ldr	r2, [r2, #8]
 80041ac:	4611      	mov	r1, r2
 80041ae:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	db7d      	blt.n	80042b2 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80041ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041bc:	695b      	ldr	r3, [r3, #20]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d004      	beq.n	80041cc <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80041c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041c4:	3304      	adds	r3, #4
 80041c6:	4618      	mov	r0, r3
 80041c8:	f7fe f8cc 	bl	8002364 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80041cc:	463b      	mov	r3, r7
 80041ce:	4618      	mov	r0, r3
 80041d0:	f7ff ff6c 	bl	80040ac <prvSampleTimeNow>
 80041d4:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2b09      	cmp	r3, #9
 80041da:	d86b      	bhi.n	80042b4 <prvProcessReceivedCommands+0x144>
 80041dc:	a201      	add	r2, pc, #4	; (adr r2, 80041e4 <prvProcessReceivedCommands+0x74>)
 80041de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041e2:	bf00      	nop
 80041e4:	0800420d 	.word	0x0800420d
 80041e8:	0800420d 	.word	0x0800420d
 80041ec:	0800420d 	.word	0x0800420d
 80041f0:	080042b5 	.word	0x080042b5
 80041f4:	08004269 	.word	0x08004269
 80041f8:	080042a1 	.word	0x080042a1
 80041fc:	0800420d 	.word	0x0800420d
 8004200:	0800420d 	.word	0x0800420d
 8004204:	080042b5 	.word	0x080042b5
 8004208:	08004269 	.word	0x08004269
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800420c:	68ba      	ldr	r2, [r7, #8]
 800420e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004210:	699b      	ldr	r3, [r3, #24]
 8004212:	18d1      	adds	r1, r2, r3
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004218:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800421a:	f7ff ff67 	bl	80040ec <prvInsertTimerInActiveList>
 800421e:	4603      	mov	r3, r0
 8004220:	2b00      	cmp	r3, #0
 8004222:	d047      	beq.n	80042b4 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004228:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800422a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800422c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800422e:	69db      	ldr	r3, [r3, #28]
 8004230:	2b01      	cmp	r3, #1
 8004232:	d13f      	bne.n	80042b4 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004234:	68ba      	ldr	r2, [r7, #8]
 8004236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004238:	699b      	ldr	r3, [r3, #24]
 800423a:	441a      	add	r2, r3
 800423c:	2300      	movs	r3, #0
 800423e:	9300      	str	r3, [sp, #0]
 8004240:	2300      	movs	r3, #0
 8004242:	2100      	movs	r1, #0
 8004244:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004246:	f7ff fe1f 	bl	8003e88 <xTimerGenericCommand>
 800424a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800424c:	6a3b      	ldr	r3, [r7, #32]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d130      	bne.n	80042b4 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8004252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004256:	f383 8811 	msr	BASEPRI, r3
 800425a:	f3bf 8f6f 	isb	sy
 800425e:	f3bf 8f4f 	dsb	sy
 8004262:	61bb      	str	r3, [r7, #24]
}
 8004264:	bf00      	nop
 8004266:	e7fe      	b.n	8004266 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004268:	68ba      	ldr	r2, [r7, #8]
 800426a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800426c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800426e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004270:	699b      	ldr	r3, [r3, #24]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d10a      	bne.n	800428c <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8004276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800427a:	f383 8811 	msr	BASEPRI, r3
 800427e:	f3bf 8f6f 	isb	sy
 8004282:	f3bf 8f4f 	dsb	sy
 8004286:	617b      	str	r3, [r7, #20]
}
 8004288:	bf00      	nop
 800428a:	e7fe      	b.n	800428a <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800428c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800428e:	699a      	ldr	r2, [r3, #24]
 8004290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004292:	18d1      	adds	r1, r2, r3
 8004294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004296:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004298:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800429a:	f7ff ff27 	bl	80040ec <prvInsertTimerInActiveList>
					break;
 800429e:	e009      	b.n	80042b4 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80042a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042a2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d104      	bne.n	80042b4 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 80042aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80042ac:	f000 fbc8 	bl	8004a40 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80042b0:	e000      	b.n	80042b4 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80042b2:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80042b4:	4b07      	ldr	r3, [pc, #28]	; (80042d4 <prvProcessReceivedCommands+0x164>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	1d39      	adds	r1, r7, #4
 80042ba:	2200      	movs	r2, #0
 80042bc:	4618      	mov	r0, r3
 80042be:	f7fe fb55 	bl	800296c <xQueueReceive>
 80042c2:	4603      	mov	r3, r0
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	f47f af57 	bne.w	8004178 <prvProcessReceivedCommands+0x8>
	}
}
 80042ca:	bf00      	nop
 80042cc:	bf00      	nop
 80042ce:	3730      	adds	r7, #48	; 0x30
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}
 80042d4:	20000d84 	.word	0x20000d84

080042d8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b088      	sub	sp, #32
 80042dc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80042de:	e045      	b.n	800436c <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80042e0:	4b2c      	ldr	r3, [pc, #176]	; (8004394 <prvSwitchTimerLists+0xbc>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80042ea:	4b2a      	ldr	r3, [pc, #168]	; (8004394 <prvSwitchTimerLists+0xbc>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	68db      	ldr	r3, [r3, #12]
 80042f2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	3304      	adds	r3, #4
 80042f8:	4618      	mov	r0, r3
 80042fa:	f7fe f833 	bl	8002364 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004302:	68f8      	ldr	r0, [r7, #12]
 8004304:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	69db      	ldr	r3, [r3, #28]
 800430a:	2b01      	cmp	r3, #1
 800430c:	d12e      	bne.n	800436c <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	699b      	ldr	r3, [r3, #24]
 8004312:	693a      	ldr	r2, [r7, #16]
 8004314:	4413      	add	r3, r2
 8004316:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004318:	68ba      	ldr	r2, [r7, #8]
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	429a      	cmp	r2, r3
 800431e:	d90e      	bls.n	800433e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	68ba      	ldr	r2, [r7, #8]
 8004324:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	68fa      	ldr	r2, [r7, #12]
 800432a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800432c:	4b19      	ldr	r3, [pc, #100]	; (8004394 <prvSwitchTimerLists+0xbc>)
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	3304      	adds	r3, #4
 8004334:	4619      	mov	r1, r3
 8004336:	4610      	mov	r0, r2
 8004338:	f7fd ffdb 	bl	80022f2 <vListInsert>
 800433c:	e016      	b.n	800436c <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800433e:	2300      	movs	r3, #0
 8004340:	9300      	str	r3, [sp, #0]
 8004342:	2300      	movs	r3, #0
 8004344:	693a      	ldr	r2, [r7, #16]
 8004346:	2100      	movs	r1, #0
 8004348:	68f8      	ldr	r0, [r7, #12]
 800434a:	f7ff fd9d 	bl	8003e88 <xTimerGenericCommand>
 800434e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d10a      	bne.n	800436c <prvSwitchTimerLists+0x94>
	__asm volatile
 8004356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800435a:	f383 8811 	msr	BASEPRI, r3
 800435e:	f3bf 8f6f 	isb	sy
 8004362:	f3bf 8f4f 	dsb	sy
 8004366:	603b      	str	r3, [r7, #0]
}
 8004368:	bf00      	nop
 800436a:	e7fe      	b.n	800436a <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800436c:	4b09      	ldr	r3, [pc, #36]	; (8004394 <prvSwitchTimerLists+0xbc>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d1b4      	bne.n	80042e0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004376:	4b07      	ldr	r3, [pc, #28]	; (8004394 <prvSwitchTimerLists+0xbc>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800437c:	4b06      	ldr	r3, [pc, #24]	; (8004398 <prvSwitchTimerLists+0xc0>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a04      	ldr	r2, [pc, #16]	; (8004394 <prvSwitchTimerLists+0xbc>)
 8004382:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004384:	4a04      	ldr	r2, [pc, #16]	; (8004398 <prvSwitchTimerLists+0xc0>)
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	6013      	str	r3, [r2, #0]
}
 800438a:	bf00      	nop
 800438c:	3718      	adds	r7, #24
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}
 8004392:	bf00      	nop
 8004394:	20000d7c 	.word	0x20000d7c
 8004398:	20000d80 	.word	0x20000d80

0800439c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b082      	sub	sp, #8
 80043a0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80043a2:	f000 f967 	bl	8004674 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80043a6:	4b15      	ldr	r3, [pc, #84]	; (80043fc <prvCheckForValidListAndQueue+0x60>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d120      	bne.n	80043f0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80043ae:	4814      	ldr	r0, [pc, #80]	; (8004400 <prvCheckForValidListAndQueue+0x64>)
 80043b0:	f7fd ff4e 	bl	8002250 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80043b4:	4813      	ldr	r0, [pc, #76]	; (8004404 <prvCheckForValidListAndQueue+0x68>)
 80043b6:	f7fd ff4b 	bl	8002250 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80043ba:	4b13      	ldr	r3, [pc, #76]	; (8004408 <prvCheckForValidListAndQueue+0x6c>)
 80043bc:	4a10      	ldr	r2, [pc, #64]	; (8004400 <prvCheckForValidListAndQueue+0x64>)
 80043be:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80043c0:	4b12      	ldr	r3, [pc, #72]	; (800440c <prvCheckForValidListAndQueue+0x70>)
 80043c2:	4a10      	ldr	r2, [pc, #64]	; (8004404 <prvCheckForValidListAndQueue+0x68>)
 80043c4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80043c6:	2300      	movs	r3, #0
 80043c8:	9300      	str	r3, [sp, #0]
 80043ca:	4b11      	ldr	r3, [pc, #68]	; (8004410 <prvCheckForValidListAndQueue+0x74>)
 80043cc:	4a11      	ldr	r2, [pc, #68]	; (8004414 <prvCheckForValidListAndQueue+0x78>)
 80043ce:	2110      	movs	r1, #16
 80043d0:	200a      	movs	r0, #10
 80043d2:	f7fe f859 	bl	8002488 <xQueueGenericCreateStatic>
 80043d6:	4603      	mov	r3, r0
 80043d8:	4a08      	ldr	r2, [pc, #32]	; (80043fc <prvCheckForValidListAndQueue+0x60>)
 80043da:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80043dc:	4b07      	ldr	r3, [pc, #28]	; (80043fc <prvCheckForValidListAndQueue+0x60>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d005      	beq.n	80043f0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80043e4:	4b05      	ldr	r3, [pc, #20]	; (80043fc <prvCheckForValidListAndQueue+0x60>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	490b      	ldr	r1, [pc, #44]	; (8004418 <prvCheckForValidListAndQueue+0x7c>)
 80043ea:	4618      	mov	r0, r3
 80043ec:	f7fe fcde 	bl	8002dac <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80043f0:	f000 f970 	bl	80046d4 <vPortExitCritical>
}
 80043f4:	bf00      	nop
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	bf00      	nop
 80043fc:	20000d84 	.word	0x20000d84
 8004400:	20000d54 	.word	0x20000d54
 8004404:	20000d68 	.word	0x20000d68
 8004408:	20000d7c 	.word	0x20000d7c
 800440c:	20000d80 	.word	0x20000d80
 8004410:	20000e30 	.word	0x20000e30
 8004414:	20000d90 	.word	0x20000d90
 8004418:	080068a8 	.word	0x080068a8

0800441c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800441c:	b480      	push	{r7}
 800441e:	b085      	sub	sp, #20
 8004420:	af00      	add	r7, sp, #0
 8004422:	60f8      	str	r0, [r7, #12]
 8004424:	60b9      	str	r1, [r7, #8]
 8004426:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	3b04      	subs	r3, #4
 800442c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004434:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	3b04      	subs	r3, #4
 800443a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	f023 0201 	bic.w	r2, r3, #1
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	3b04      	subs	r3, #4
 800444a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800444c:	4a0c      	ldr	r2, [pc, #48]	; (8004480 <pxPortInitialiseStack+0x64>)
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	3b14      	subs	r3, #20
 8004456:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	3b04      	subs	r3, #4
 8004462:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f06f 0202 	mvn.w	r2, #2
 800446a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	3b20      	subs	r3, #32
 8004470:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004472:	68fb      	ldr	r3, [r7, #12]
}
 8004474:	4618      	mov	r0, r3
 8004476:	3714      	adds	r7, #20
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr
 8004480:	08004485 	.word	0x08004485

08004484 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004484:	b480      	push	{r7}
 8004486:	b085      	sub	sp, #20
 8004488:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800448a:	2300      	movs	r3, #0
 800448c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800448e:	4b12      	ldr	r3, [pc, #72]	; (80044d8 <prvTaskExitError+0x54>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004496:	d00a      	beq.n	80044ae <prvTaskExitError+0x2a>
	__asm volatile
 8004498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800449c:	f383 8811 	msr	BASEPRI, r3
 80044a0:	f3bf 8f6f 	isb	sy
 80044a4:	f3bf 8f4f 	dsb	sy
 80044a8:	60fb      	str	r3, [r7, #12]
}
 80044aa:	bf00      	nop
 80044ac:	e7fe      	b.n	80044ac <prvTaskExitError+0x28>
	__asm volatile
 80044ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b2:	f383 8811 	msr	BASEPRI, r3
 80044b6:	f3bf 8f6f 	isb	sy
 80044ba:	f3bf 8f4f 	dsb	sy
 80044be:	60bb      	str	r3, [r7, #8]
}
 80044c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80044c2:	bf00      	nop
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d0fc      	beq.n	80044c4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80044ca:	bf00      	nop
 80044cc:	bf00      	nop
 80044ce:	3714      	adds	r7, #20
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr
 80044d8:	2000000c 	.word	0x2000000c
 80044dc:	00000000 	.word	0x00000000

080044e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80044e0:	4b07      	ldr	r3, [pc, #28]	; (8004500 <pxCurrentTCBConst2>)
 80044e2:	6819      	ldr	r1, [r3, #0]
 80044e4:	6808      	ldr	r0, [r1, #0]
 80044e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044ea:	f380 8809 	msr	PSP, r0
 80044ee:	f3bf 8f6f 	isb	sy
 80044f2:	f04f 0000 	mov.w	r0, #0
 80044f6:	f380 8811 	msr	BASEPRI, r0
 80044fa:	4770      	bx	lr
 80044fc:	f3af 8000 	nop.w

08004500 <pxCurrentTCBConst2>:
 8004500:	20000854 	.word	0x20000854
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004504:	bf00      	nop
 8004506:	bf00      	nop

08004508 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004508:	4808      	ldr	r0, [pc, #32]	; (800452c <prvPortStartFirstTask+0x24>)
 800450a:	6800      	ldr	r0, [r0, #0]
 800450c:	6800      	ldr	r0, [r0, #0]
 800450e:	f380 8808 	msr	MSP, r0
 8004512:	f04f 0000 	mov.w	r0, #0
 8004516:	f380 8814 	msr	CONTROL, r0
 800451a:	b662      	cpsie	i
 800451c:	b661      	cpsie	f
 800451e:	f3bf 8f4f 	dsb	sy
 8004522:	f3bf 8f6f 	isb	sy
 8004526:	df00      	svc	0
 8004528:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800452a:	bf00      	nop
 800452c:	e000ed08 	.word	0xe000ed08

08004530 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b086      	sub	sp, #24
 8004534:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004536:	4b46      	ldr	r3, [pc, #280]	; (8004650 <xPortStartScheduler+0x120>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a46      	ldr	r2, [pc, #280]	; (8004654 <xPortStartScheduler+0x124>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d10a      	bne.n	8004556 <xPortStartScheduler+0x26>
	__asm volatile
 8004540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004544:	f383 8811 	msr	BASEPRI, r3
 8004548:	f3bf 8f6f 	isb	sy
 800454c:	f3bf 8f4f 	dsb	sy
 8004550:	613b      	str	r3, [r7, #16]
}
 8004552:	bf00      	nop
 8004554:	e7fe      	b.n	8004554 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004556:	4b3e      	ldr	r3, [pc, #248]	; (8004650 <xPortStartScheduler+0x120>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a3f      	ldr	r2, [pc, #252]	; (8004658 <xPortStartScheduler+0x128>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d10a      	bne.n	8004576 <xPortStartScheduler+0x46>
	__asm volatile
 8004560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004564:	f383 8811 	msr	BASEPRI, r3
 8004568:	f3bf 8f6f 	isb	sy
 800456c:	f3bf 8f4f 	dsb	sy
 8004570:	60fb      	str	r3, [r7, #12]
}
 8004572:	bf00      	nop
 8004574:	e7fe      	b.n	8004574 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004576:	4b39      	ldr	r3, [pc, #228]	; (800465c <xPortStartScheduler+0x12c>)
 8004578:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	781b      	ldrb	r3, [r3, #0]
 800457e:	b2db      	uxtb	r3, r3
 8004580:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	22ff      	movs	r2, #255	; 0xff
 8004586:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	781b      	ldrb	r3, [r3, #0]
 800458c:	b2db      	uxtb	r3, r3
 800458e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004590:	78fb      	ldrb	r3, [r7, #3]
 8004592:	b2db      	uxtb	r3, r3
 8004594:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004598:	b2da      	uxtb	r2, r3
 800459a:	4b31      	ldr	r3, [pc, #196]	; (8004660 <xPortStartScheduler+0x130>)
 800459c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800459e:	4b31      	ldr	r3, [pc, #196]	; (8004664 <xPortStartScheduler+0x134>)
 80045a0:	2207      	movs	r2, #7
 80045a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80045a4:	e009      	b.n	80045ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80045a6:	4b2f      	ldr	r3, [pc, #188]	; (8004664 <xPortStartScheduler+0x134>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	3b01      	subs	r3, #1
 80045ac:	4a2d      	ldr	r2, [pc, #180]	; (8004664 <xPortStartScheduler+0x134>)
 80045ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80045b0:	78fb      	ldrb	r3, [r7, #3]
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	005b      	lsls	r3, r3, #1
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80045ba:	78fb      	ldrb	r3, [r7, #3]
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045c2:	2b80      	cmp	r3, #128	; 0x80
 80045c4:	d0ef      	beq.n	80045a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80045c6:	4b27      	ldr	r3, [pc, #156]	; (8004664 <xPortStartScheduler+0x134>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f1c3 0307 	rsb	r3, r3, #7
 80045ce:	2b04      	cmp	r3, #4
 80045d0:	d00a      	beq.n	80045e8 <xPortStartScheduler+0xb8>
	__asm volatile
 80045d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045d6:	f383 8811 	msr	BASEPRI, r3
 80045da:	f3bf 8f6f 	isb	sy
 80045de:	f3bf 8f4f 	dsb	sy
 80045e2:	60bb      	str	r3, [r7, #8]
}
 80045e4:	bf00      	nop
 80045e6:	e7fe      	b.n	80045e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80045e8:	4b1e      	ldr	r3, [pc, #120]	; (8004664 <xPortStartScheduler+0x134>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	021b      	lsls	r3, r3, #8
 80045ee:	4a1d      	ldr	r2, [pc, #116]	; (8004664 <xPortStartScheduler+0x134>)
 80045f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80045f2:	4b1c      	ldr	r3, [pc, #112]	; (8004664 <xPortStartScheduler+0x134>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80045fa:	4a1a      	ldr	r2, [pc, #104]	; (8004664 <xPortStartScheduler+0x134>)
 80045fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	b2da      	uxtb	r2, r3
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004606:	4b18      	ldr	r3, [pc, #96]	; (8004668 <xPortStartScheduler+0x138>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a17      	ldr	r2, [pc, #92]	; (8004668 <xPortStartScheduler+0x138>)
 800460c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004610:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004612:	4b15      	ldr	r3, [pc, #84]	; (8004668 <xPortStartScheduler+0x138>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a14      	ldr	r2, [pc, #80]	; (8004668 <xPortStartScheduler+0x138>)
 8004618:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800461c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800461e:	f000 f8dd 	bl	80047dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004622:	4b12      	ldr	r3, [pc, #72]	; (800466c <xPortStartScheduler+0x13c>)
 8004624:	2200      	movs	r2, #0
 8004626:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004628:	f000 f8fc 	bl	8004824 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800462c:	4b10      	ldr	r3, [pc, #64]	; (8004670 <xPortStartScheduler+0x140>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a0f      	ldr	r2, [pc, #60]	; (8004670 <xPortStartScheduler+0x140>)
 8004632:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004636:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004638:	f7ff ff66 	bl	8004508 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800463c:	f7ff f826 	bl	800368c <vTaskSwitchContext>
	prvTaskExitError();
 8004640:	f7ff ff20 	bl	8004484 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004644:	2300      	movs	r3, #0
}
 8004646:	4618      	mov	r0, r3
 8004648:	3718      	adds	r7, #24
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
 800464e:	bf00      	nop
 8004650:	e000ed00 	.word	0xe000ed00
 8004654:	410fc271 	.word	0x410fc271
 8004658:	410fc270 	.word	0x410fc270
 800465c:	e000e400 	.word	0xe000e400
 8004660:	20000e80 	.word	0x20000e80
 8004664:	20000e84 	.word	0x20000e84
 8004668:	e000ed20 	.word	0xe000ed20
 800466c:	2000000c 	.word	0x2000000c
 8004670:	e000ef34 	.word	0xe000ef34

08004674 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004674:	b480      	push	{r7}
 8004676:	b083      	sub	sp, #12
 8004678:	af00      	add	r7, sp, #0
	__asm volatile
 800467a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800467e:	f383 8811 	msr	BASEPRI, r3
 8004682:	f3bf 8f6f 	isb	sy
 8004686:	f3bf 8f4f 	dsb	sy
 800468a:	607b      	str	r3, [r7, #4]
}
 800468c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800468e:	4b0f      	ldr	r3, [pc, #60]	; (80046cc <vPortEnterCritical+0x58>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	3301      	adds	r3, #1
 8004694:	4a0d      	ldr	r2, [pc, #52]	; (80046cc <vPortEnterCritical+0x58>)
 8004696:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004698:	4b0c      	ldr	r3, [pc, #48]	; (80046cc <vPortEnterCritical+0x58>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	2b01      	cmp	r3, #1
 800469e:	d10f      	bne.n	80046c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80046a0:	4b0b      	ldr	r3, [pc, #44]	; (80046d0 <vPortEnterCritical+0x5c>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d00a      	beq.n	80046c0 <vPortEnterCritical+0x4c>
	__asm volatile
 80046aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ae:	f383 8811 	msr	BASEPRI, r3
 80046b2:	f3bf 8f6f 	isb	sy
 80046b6:	f3bf 8f4f 	dsb	sy
 80046ba:	603b      	str	r3, [r7, #0]
}
 80046bc:	bf00      	nop
 80046be:	e7fe      	b.n	80046be <vPortEnterCritical+0x4a>
	}
}
 80046c0:	bf00      	nop
 80046c2:	370c      	adds	r7, #12
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr
 80046cc:	2000000c 	.word	0x2000000c
 80046d0:	e000ed04 	.word	0xe000ed04

080046d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80046d4:	b480      	push	{r7}
 80046d6:	b083      	sub	sp, #12
 80046d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80046da:	4b12      	ldr	r3, [pc, #72]	; (8004724 <vPortExitCritical+0x50>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d10a      	bne.n	80046f8 <vPortExitCritical+0x24>
	__asm volatile
 80046e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e6:	f383 8811 	msr	BASEPRI, r3
 80046ea:	f3bf 8f6f 	isb	sy
 80046ee:	f3bf 8f4f 	dsb	sy
 80046f2:	607b      	str	r3, [r7, #4]
}
 80046f4:	bf00      	nop
 80046f6:	e7fe      	b.n	80046f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80046f8:	4b0a      	ldr	r3, [pc, #40]	; (8004724 <vPortExitCritical+0x50>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	3b01      	subs	r3, #1
 80046fe:	4a09      	ldr	r2, [pc, #36]	; (8004724 <vPortExitCritical+0x50>)
 8004700:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004702:	4b08      	ldr	r3, [pc, #32]	; (8004724 <vPortExitCritical+0x50>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d105      	bne.n	8004716 <vPortExitCritical+0x42>
 800470a:	2300      	movs	r3, #0
 800470c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	f383 8811 	msr	BASEPRI, r3
}
 8004714:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004716:	bf00      	nop
 8004718:	370c      	adds	r7, #12
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr
 8004722:	bf00      	nop
 8004724:	2000000c 	.word	0x2000000c
	...

08004730 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004730:	f3ef 8009 	mrs	r0, PSP
 8004734:	f3bf 8f6f 	isb	sy
 8004738:	4b15      	ldr	r3, [pc, #84]	; (8004790 <pxCurrentTCBConst>)
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	f01e 0f10 	tst.w	lr, #16
 8004740:	bf08      	it	eq
 8004742:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004746:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800474a:	6010      	str	r0, [r2, #0]
 800474c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004750:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004754:	f380 8811 	msr	BASEPRI, r0
 8004758:	f3bf 8f4f 	dsb	sy
 800475c:	f3bf 8f6f 	isb	sy
 8004760:	f7fe ff94 	bl	800368c <vTaskSwitchContext>
 8004764:	f04f 0000 	mov.w	r0, #0
 8004768:	f380 8811 	msr	BASEPRI, r0
 800476c:	bc09      	pop	{r0, r3}
 800476e:	6819      	ldr	r1, [r3, #0]
 8004770:	6808      	ldr	r0, [r1, #0]
 8004772:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004776:	f01e 0f10 	tst.w	lr, #16
 800477a:	bf08      	it	eq
 800477c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004780:	f380 8809 	msr	PSP, r0
 8004784:	f3bf 8f6f 	isb	sy
 8004788:	4770      	bx	lr
 800478a:	bf00      	nop
 800478c:	f3af 8000 	nop.w

08004790 <pxCurrentTCBConst>:
 8004790:	20000854 	.word	0x20000854
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004794:	bf00      	nop
 8004796:	bf00      	nop

08004798 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b082      	sub	sp, #8
 800479c:	af00      	add	r7, sp, #0
	__asm volatile
 800479e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a2:	f383 8811 	msr	BASEPRI, r3
 80047a6:	f3bf 8f6f 	isb	sy
 80047aa:	f3bf 8f4f 	dsb	sy
 80047ae:	607b      	str	r3, [r7, #4]
}
 80047b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80047b2:	f7fe fea9 	bl	8003508 <xTaskIncrementTick>
 80047b6:	4603      	mov	r3, r0
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d003      	beq.n	80047c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80047bc:	4b06      	ldr	r3, [pc, #24]	; (80047d8 <xPortSysTickHandler+0x40>)
 80047be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047c2:	601a      	str	r2, [r3, #0]
 80047c4:	2300      	movs	r3, #0
 80047c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	f383 8811 	msr	BASEPRI, r3
}
 80047ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80047d0:	bf00      	nop
 80047d2:	3708      	adds	r7, #8
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}
 80047d8:	e000ed04 	.word	0xe000ed04

080047dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80047dc:	b480      	push	{r7}
 80047de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80047e0:	4b0b      	ldr	r3, [pc, #44]	; (8004810 <vPortSetupTimerInterrupt+0x34>)
 80047e2:	2200      	movs	r2, #0
 80047e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80047e6:	4b0b      	ldr	r3, [pc, #44]	; (8004814 <vPortSetupTimerInterrupt+0x38>)
 80047e8:	2200      	movs	r2, #0
 80047ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80047ec:	4b0a      	ldr	r3, [pc, #40]	; (8004818 <vPortSetupTimerInterrupt+0x3c>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a0a      	ldr	r2, [pc, #40]	; (800481c <vPortSetupTimerInterrupt+0x40>)
 80047f2:	fba2 2303 	umull	r2, r3, r2, r3
 80047f6:	099b      	lsrs	r3, r3, #6
 80047f8:	4a09      	ldr	r2, [pc, #36]	; (8004820 <vPortSetupTimerInterrupt+0x44>)
 80047fa:	3b01      	subs	r3, #1
 80047fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80047fe:	4b04      	ldr	r3, [pc, #16]	; (8004810 <vPortSetupTimerInterrupt+0x34>)
 8004800:	2207      	movs	r2, #7
 8004802:	601a      	str	r2, [r3, #0]
}
 8004804:	bf00      	nop
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr
 800480e:	bf00      	nop
 8004810:	e000e010 	.word	0xe000e010
 8004814:	e000e018 	.word	0xe000e018
 8004818:	20000000 	.word	0x20000000
 800481c:	10624dd3 	.word	0x10624dd3
 8004820:	e000e014 	.word	0xe000e014

08004824 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004824:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004834 <vPortEnableVFP+0x10>
 8004828:	6801      	ldr	r1, [r0, #0]
 800482a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800482e:	6001      	str	r1, [r0, #0]
 8004830:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004832:	bf00      	nop
 8004834:	e000ed88 	.word	0xe000ed88

08004838 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004838:	b480      	push	{r7}
 800483a:	b085      	sub	sp, #20
 800483c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800483e:	f3ef 8305 	mrs	r3, IPSR
 8004842:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2b0f      	cmp	r3, #15
 8004848:	d914      	bls.n	8004874 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800484a:	4a17      	ldr	r2, [pc, #92]	; (80048a8 <vPortValidateInterruptPriority+0x70>)
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	4413      	add	r3, r2
 8004850:	781b      	ldrb	r3, [r3, #0]
 8004852:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004854:	4b15      	ldr	r3, [pc, #84]	; (80048ac <vPortValidateInterruptPriority+0x74>)
 8004856:	781b      	ldrb	r3, [r3, #0]
 8004858:	7afa      	ldrb	r2, [r7, #11]
 800485a:	429a      	cmp	r2, r3
 800485c:	d20a      	bcs.n	8004874 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800485e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004862:	f383 8811 	msr	BASEPRI, r3
 8004866:	f3bf 8f6f 	isb	sy
 800486a:	f3bf 8f4f 	dsb	sy
 800486e:	607b      	str	r3, [r7, #4]
}
 8004870:	bf00      	nop
 8004872:	e7fe      	b.n	8004872 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004874:	4b0e      	ldr	r3, [pc, #56]	; (80048b0 <vPortValidateInterruptPriority+0x78>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800487c:	4b0d      	ldr	r3, [pc, #52]	; (80048b4 <vPortValidateInterruptPriority+0x7c>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	429a      	cmp	r2, r3
 8004882:	d90a      	bls.n	800489a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004888:	f383 8811 	msr	BASEPRI, r3
 800488c:	f3bf 8f6f 	isb	sy
 8004890:	f3bf 8f4f 	dsb	sy
 8004894:	603b      	str	r3, [r7, #0]
}
 8004896:	bf00      	nop
 8004898:	e7fe      	b.n	8004898 <vPortValidateInterruptPriority+0x60>
	}
 800489a:	bf00      	nop
 800489c:	3714      	adds	r7, #20
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr
 80048a6:	bf00      	nop
 80048a8:	e000e3f0 	.word	0xe000e3f0
 80048ac:	20000e80 	.word	0x20000e80
 80048b0:	e000ed0c 	.word	0xe000ed0c
 80048b4:	20000e84 	.word	0x20000e84

080048b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b08a      	sub	sp, #40	; 0x28
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80048c0:	2300      	movs	r3, #0
 80048c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80048c4:	f7fe fd4e 	bl	8003364 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80048c8:	4b58      	ldr	r3, [pc, #352]	; (8004a2c <pvPortMalloc+0x174>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d101      	bne.n	80048d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80048d0:	f000 f910 	bl	8004af4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80048d4:	4b56      	ldr	r3, [pc, #344]	; (8004a30 <pvPortMalloc+0x178>)
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	4013      	ands	r3, r2
 80048dc:	2b00      	cmp	r3, #0
 80048de:	f040 808e 	bne.w	80049fe <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d01d      	beq.n	8004924 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80048e8:	2208      	movs	r2, #8
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	4413      	add	r3, r2
 80048ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f003 0307 	and.w	r3, r3, #7
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d014      	beq.n	8004924 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f023 0307 	bic.w	r3, r3, #7
 8004900:	3308      	adds	r3, #8
 8004902:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f003 0307 	and.w	r3, r3, #7
 800490a:	2b00      	cmp	r3, #0
 800490c:	d00a      	beq.n	8004924 <pvPortMalloc+0x6c>
	__asm volatile
 800490e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004912:	f383 8811 	msr	BASEPRI, r3
 8004916:	f3bf 8f6f 	isb	sy
 800491a:	f3bf 8f4f 	dsb	sy
 800491e:	617b      	str	r3, [r7, #20]
}
 8004920:	bf00      	nop
 8004922:	e7fe      	b.n	8004922 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d069      	beq.n	80049fe <pvPortMalloc+0x146>
 800492a:	4b42      	ldr	r3, [pc, #264]	; (8004a34 <pvPortMalloc+0x17c>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	429a      	cmp	r2, r3
 8004932:	d864      	bhi.n	80049fe <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004934:	4b40      	ldr	r3, [pc, #256]	; (8004a38 <pvPortMalloc+0x180>)
 8004936:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004938:	4b3f      	ldr	r3, [pc, #252]	; (8004a38 <pvPortMalloc+0x180>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800493e:	e004      	b.n	800494a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004942:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800494a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	429a      	cmp	r2, r3
 8004952:	d903      	bls.n	800495c <pvPortMalloc+0xa4>
 8004954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d1f1      	bne.n	8004940 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800495c:	4b33      	ldr	r3, [pc, #204]	; (8004a2c <pvPortMalloc+0x174>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004962:	429a      	cmp	r2, r3
 8004964:	d04b      	beq.n	80049fe <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004966:	6a3b      	ldr	r3, [r7, #32]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	2208      	movs	r2, #8
 800496c:	4413      	add	r3, r2
 800496e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	6a3b      	ldr	r3, [r7, #32]
 8004976:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497a:	685a      	ldr	r2, [r3, #4]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	1ad2      	subs	r2, r2, r3
 8004980:	2308      	movs	r3, #8
 8004982:	005b      	lsls	r3, r3, #1
 8004984:	429a      	cmp	r2, r3
 8004986:	d91f      	bls.n	80049c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004988:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4413      	add	r3, r2
 800498e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004990:	69bb      	ldr	r3, [r7, #24]
 8004992:	f003 0307 	and.w	r3, r3, #7
 8004996:	2b00      	cmp	r3, #0
 8004998:	d00a      	beq.n	80049b0 <pvPortMalloc+0xf8>
	__asm volatile
 800499a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800499e:	f383 8811 	msr	BASEPRI, r3
 80049a2:	f3bf 8f6f 	isb	sy
 80049a6:	f3bf 8f4f 	dsb	sy
 80049aa:	613b      	str	r3, [r7, #16]
}
 80049ac:	bf00      	nop
 80049ae:	e7fe      	b.n	80049ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80049b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b2:	685a      	ldr	r2, [r3, #4]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	1ad2      	subs	r2, r2, r3
 80049b8:	69bb      	ldr	r3, [r7, #24]
 80049ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80049bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80049c2:	69b8      	ldr	r0, [r7, #24]
 80049c4:	f000 f8f8 	bl	8004bb8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80049c8:	4b1a      	ldr	r3, [pc, #104]	; (8004a34 <pvPortMalloc+0x17c>)
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	4a18      	ldr	r2, [pc, #96]	; (8004a34 <pvPortMalloc+0x17c>)
 80049d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80049d6:	4b17      	ldr	r3, [pc, #92]	; (8004a34 <pvPortMalloc+0x17c>)
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	4b18      	ldr	r3, [pc, #96]	; (8004a3c <pvPortMalloc+0x184>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	429a      	cmp	r2, r3
 80049e0:	d203      	bcs.n	80049ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80049e2:	4b14      	ldr	r3, [pc, #80]	; (8004a34 <pvPortMalloc+0x17c>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a15      	ldr	r2, [pc, #84]	; (8004a3c <pvPortMalloc+0x184>)
 80049e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80049ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ec:	685a      	ldr	r2, [r3, #4]
 80049ee:	4b10      	ldr	r3, [pc, #64]	; (8004a30 <pvPortMalloc+0x178>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	431a      	orrs	r2, r3
 80049f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80049f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fa:	2200      	movs	r2, #0
 80049fc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80049fe:	f7fe fcbf 	bl	8003380 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a02:	69fb      	ldr	r3, [r7, #28]
 8004a04:	f003 0307 	and.w	r3, r3, #7
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d00a      	beq.n	8004a22 <pvPortMalloc+0x16a>
	__asm volatile
 8004a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a10:	f383 8811 	msr	BASEPRI, r3
 8004a14:	f3bf 8f6f 	isb	sy
 8004a18:	f3bf 8f4f 	dsb	sy
 8004a1c:	60fb      	str	r3, [r7, #12]
}
 8004a1e:	bf00      	nop
 8004a20:	e7fe      	b.n	8004a20 <pvPortMalloc+0x168>
	return pvReturn;
 8004a22:	69fb      	ldr	r3, [r7, #28]
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	3728      	adds	r7, #40	; 0x28
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}
 8004a2c:	20001a90 	.word	0x20001a90
 8004a30:	20001a9c 	.word	0x20001a9c
 8004a34:	20001a94 	.word	0x20001a94
 8004a38:	20001a88 	.word	0x20001a88
 8004a3c:	20001a98 	.word	0x20001a98

08004a40 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b086      	sub	sp, #24
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d048      	beq.n	8004ae4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004a52:	2308      	movs	r3, #8
 8004a54:	425b      	negs	r3, r3
 8004a56:	697a      	ldr	r2, [r7, #20]
 8004a58:	4413      	add	r3, r2
 8004a5a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	685a      	ldr	r2, [r3, #4]
 8004a64:	4b21      	ldr	r3, [pc, #132]	; (8004aec <vPortFree+0xac>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4013      	ands	r3, r2
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d10a      	bne.n	8004a84 <vPortFree+0x44>
	__asm volatile
 8004a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a72:	f383 8811 	msr	BASEPRI, r3
 8004a76:	f3bf 8f6f 	isb	sy
 8004a7a:	f3bf 8f4f 	dsb	sy
 8004a7e:	60fb      	str	r3, [r7, #12]
}
 8004a80:	bf00      	nop
 8004a82:	e7fe      	b.n	8004a82 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d00a      	beq.n	8004aa2 <vPortFree+0x62>
	__asm volatile
 8004a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a90:	f383 8811 	msr	BASEPRI, r3
 8004a94:	f3bf 8f6f 	isb	sy
 8004a98:	f3bf 8f4f 	dsb	sy
 8004a9c:	60bb      	str	r3, [r7, #8]
}
 8004a9e:	bf00      	nop
 8004aa0:	e7fe      	b.n	8004aa0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	685a      	ldr	r2, [r3, #4]
 8004aa6:	4b11      	ldr	r3, [pc, #68]	; (8004aec <vPortFree+0xac>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4013      	ands	r3, r2
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d019      	beq.n	8004ae4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d115      	bne.n	8004ae4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	685a      	ldr	r2, [r3, #4]
 8004abc:	4b0b      	ldr	r3, [pc, #44]	; (8004aec <vPortFree+0xac>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	43db      	mvns	r3, r3
 8004ac2:	401a      	ands	r2, r3
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004ac8:	f7fe fc4c 	bl	8003364 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	685a      	ldr	r2, [r3, #4]
 8004ad0:	4b07      	ldr	r3, [pc, #28]	; (8004af0 <vPortFree+0xb0>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4413      	add	r3, r2
 8004ad6:	4a06      	ldr	r2, [pc, #24]	; (8004af0 <vPortFree+0xb0>)
 8004ad8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004ada:	6938      	ldr	r0, [r7, #16]
 8004adc:	f000 f86c 	bl	8004bb8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004ae0:	f7fe fc4e 	bl	8003380 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004ae4:	bf00      	nop
 8004ae6:	3718      	adds	r7, #24
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}
 8004aec:	20001a9c 	.word	0x20001a9c
 8004af0:	20001a94 	.word	0x20001a94

08004af4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004af4:	b480      	push	{r7}
 8004af6:	b085      	sub	sp, #20
 8004af8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004afa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004afe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004b00:	4b27      	ldr	r3, [pc, #156]	; (8004ba0 <prvHeapInit+0xac>)
 8004b02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f003 0307 	and.w	r3, r3, #7
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d00c      	beq.n	8004b28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	3307      	adds	r3, #7
 8004b12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f023 0307 	bic.w	r3, r3, #7
 8004b1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004b1c:	68ba      	ldr	r2, [r7, #8]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	1ad3      	subs	r3, r2, r3
 8004b22:	4a1f      	ldr	r2, [pc, #124]	; (8004ba0 <prvHeapInit+0xac>)
 8004b24:	4413      	add	r3, r2
 8004b26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004b2c:	4a1d      	ldr	r2, [pc, #116]	; (8004ba4 <prvHeapInit+0xb0>)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004b32:	4b1c      	ldr	r3, [pc, #112]	; (8004ba4 <prvHeapInit+0xb0>)
 8004b34:	2200      	movs	r2, #0
 8004b36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	68ba      	ldr	r2, [r7, #8]
 8004b3c:	4413      	add	r3, r2
 8004b3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004b40:	2208      	movs	r2, #8
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	1a9b      	subs	r3, r3, r2
 8004b46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f023 0307 	bic.w	r3, r3, #7
 8004b4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	4a15      	ldr	r2, [pc, #84]	; (8004ba8 <prvHeapInit+0xb4>)
 8004b54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004b56:	4b14      	ldr	r3, [pc, #80]	; (8004ba8 <prvHeapInit+0xb4>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004b5e:	4b12      	ldr	r3, [pc, #72]	; (8004ba8 <prvHeapInit+0xb4>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	2200      	movs	r2, #0
 8004b64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	68fa      	ldr	r2, [r7, #12]
 8004b6e:	1ad2      	subs	r2, r2, r3
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004b74:	4b0c      	ldr	r3, [pc, #48]	; (8004ba8 <prvHeapInit+0xb4>)
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	4a0a      	ldr	r2, [pc, #40]	; (8004bac <prvHeapInit+0xb8>)
 8004b82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	4a09      	ldr	r2, [pc, #36]	; (8004bb0 <prvHeapInit+0xbc>)
 8004b8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004b8c:	4b09      	ldr	r3, [pc, #36]	; (8004bb4 <prvHeapInit+0xc0>)
 8004b8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004b92:	601a      	str	r2, [r3, #0]
}
 8004b94:	bf00      	nop
 8004b96:	3714      	adds	r7, #20
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr
 8004ba0:	20000e88 	.word	0x20000e88
 8004ba4:	20001a88 	.word	0x20001a88
 8004ba8:	20001a90 	.word	0x20001a90
 8004bac:	20001a98 	.word	0x20001a98
 8004bb0:	20001a94 	.word	0x20001a94
 8004bb4:	20001a9c 	.word	0x20001a9c

08004bb8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b085      	sub	sp, #20
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004bc0:	4b28      	ldr	r3, [pc, #160]	; (8004c64 <prvInsertBlockIntoFreeList+0xac>)
 8004bc2:	60fb      	str	r3, [r7, #12]
 8004bc4:	e002      	b.n	8004bcc <prvInsertBlockIntoFreeList+0x14>
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	60fb      	str	r3, [r7, #12]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	687a      	ldr	r2, [r7, #4]
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d8f7      	bhi.n	8004bc6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	68ba      	ldr	r2, [r7, #8]
 8004be0:	4413      	add	r3, r2
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d108      	bne.n	8004bfa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	685a      	ldr	r2, [r3, #4]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	441a      	add	r2, r3
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	68ba      	ldr	r2, [r7, #8]
 8004c04:	441a      	add	r2, r3
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d118      	bne.n	8004c40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	4b15      	ldr	r3, [pc, #84]	; (8004c68 <prvInsertBlockIntoFreeList+0xb0>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d00d      	beq.n	8004c36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	685a      	ldr	r2, [r3, #4]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	441a      	add	r2, r3
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	601a      	str	r2, [r3, #0]
 8004c34:	e008      	b.n	8004c48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004c36:	4b0c      	ldr	r3, [pc, #48]	; (8004c68 <prvInsertBlockIntoFreeList+0xb0>)
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	601a      	str	r2, [r3, #0]
 8004c3e:	e003      	b.n	8004c48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004c48:	68fa      	ldr	r2, [r7, #12]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d002      	beq.n	8004c56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004c56:	bf00      	nop
 8004c58:	3714      	adds	r7, #20
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr
 8004c62:	bf00      	nop
 8004c64:	20001a88 	.word	0x20001a88
 8004c68:	20001a90 	.word	0x20001a90

08004c6c <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004c70:	4803      	ldr	r0, [pc, #12]	; (8004c80 <_cbSendSystemDesc+0x14>)
 8004c72:	f001 fa09 	bl	8006088 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004c76:	4803      	ldr	r0, [pc, #12]	; (8004c84 <_cbSendSystemDesc+0x18>)
 8004c78:	f001 fa06 	bl	8006088 <SEGGER_SYSVIEW_SendSysDesc>
}
 8004c7c:	bf00      	nop
 8004c7e:	bd80      	pop	{r7, pc}
 8004c80:	080068b0 	.word	0x080068b0
 8004c84:	080068e4 	.word	0x080068e4

08004c88 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004c8c:	4b06      	ldr	r3, [pc, #24]	; (8004ca8 <SEGGER_SYSVIEW_Conf+0x20>)
 8004c8e:	6818      	ldr	r0, [r3, #0]
 8004c90:	4b05      	ldr	r3, [pc, #20]	; (8004ca8 <SEGGER_SYSVIEW_Conf+0x20>)
 8004c92:	6819      	ldr	r1, [r3, #0]
 8004c94:	4b05      	ldr	r3, [pc, #20]	; (8004cac <SEGGER_SYSVIEW_Conf+0x24>)
 8004c96:	4a06      	ldr	r2, [pc, #24]	; (8004cb0 <SEGGER_SYSVIEW_Conf+0x28>)
 8004c98:	f000 fd74 	bl	8005784 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004c9c:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8004ca0:	f000 fdb4 	bl	800580c <SEGGER_SYSVIEW_SetRAMBase>
}
 8004ca4:	bf00      	nop
 8004ca6:	bd80      	pop	{r7, pc}
 8004ca8:	20000000 	.word	0x20000000
 8004cac:	08004c6d 	.word	0x08004c6d
 8004cb0:	08006998 	.word	0x08006998

08004cb4 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004cb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cb6:	b085      	sub	sp, #20
 8004cb8:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004cba:	2300      	movs	r3, #0
 8004cbc:	607b      	str	r3, [r7, #4]
 8004cbe:	e048      	b.n	8004d52 <_cbSendTaskList+0x9e>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
 8004cc0:	4929      	ldr	r1, [pc, #164]	; (8004d68 <_cbSendTaskList+0xb4>)
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	4613      	mov	r3, r2
 8004cc6:	009b      	lsls	r3, r3, #2
 8004cc8:	4413      	add	r3, r2
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	440b      	add	r3, r1
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f7fe ff33 	bl	8003b3c <uxTaskGetStackHighWaterMark>
 8004cd6:	4601      	mov	r1, r0
 8004cd8:	4823      	ldr	r0, [pc, #140]	; (8004d68 <_cbSendTaskList+0xb4>)
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	4613      	mov	r3, r2
 8004cde:	009b      	lsls	r3, r3, #2
 8004ce0:	4413      	add	r3, r2
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	4403      	add	r3, r0
 8004ce6:	3310      	adds	r3, #16
 8004ce8:	6019      	str	r1, [r3, #0]
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004cea:	491f      	ldr	r1, [pc, #124]	; (8004d68 <_cbSendTaskList+0xb4>)
 8004cec:	687a      	ldr	r2, [r7, #4]
 8004cee:	4613      	mov	r3, r2
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	4413      	add	r3, r2
 8004cf4:	009b      	lsls	r3, r3, #2
 8004cf6:	440b      	add	r3, r1
 8004cf8:	6818      	ldr	r0, [r3, #0]
 8004cfa:	491b      	ldr	r1, [pc, #108]	; (8004d68 <_cbSendTaskList+0xb4>)
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	4613      	mov	r3, r2
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	4413      	add	r3, r2
 8004d04:	009b      	lsls	r3, r3, #2
 8004d06:	440b      	add	r3, r1
 8004d08:	3304      	adds	r3, #4
 8004d0a:	6819      	ldr	r1, [r3, #0]
 8004d0c:	4c16      	ldr	r4, [pc, #88]	; (8004d68 <_cbSendTaskList+0xb4>)
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	4613      	mov	r3, r2
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	4413      	add	r3, r2
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	4423      	add	r3, r4
 8004d1a:	3308      	adds	r3, #8
 8004d1c:	681c      	ldr	r4, [r3, #0]
 8004d1e:	4d12      	ldr	r5, [pc, #72]	; (8004d68 <_cbSendTaskList+0xb4>)
 8004d20:	687a      	ldr	r2, [r7, #4]
 8004d22:	4613      	mov	r3, r2
 8004d24:	009b      	lsls	r3, r3, #2
 8004d26:	4413      	add	r3, r2
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	442b      	add	r3, r5
 8004d2c:	330c      	adds	r3, #12
 8004d2e:	681d      	ldr	r5, [r3, #0]
 8004d30:	4e0d      	ldr	r6, [pc, #52]	; (8004d68 <_cbSendTaskList+0xb4>)
 8004d32:	687a      	ldr	r2, [r7, #4]
 8004d34:	4613      	mov	r3, r2
 8004d36:	009b      	lsls	r3, r3, #2
 8004d38:	4413      	add	r3, r2
 8004d3a:	009b      	lsls	r3, r3, #2
 8004d3c:	4433      	add	r3, r6
 8004d3e:	3310      	adds	r3, #16
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	9300      	str	r3, [sp, #0]
 8004d44:	462b      	mov	r3, r5
 8004d46:	4622      	mov	r2, r4
 8004d48:	f000 f8be 	bl	8004ec8 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	3301      	adds	r3, #1
 8004d50:	607b      	str	r3, [r7, #4]
 8004d52:	4b06      	ldr	r3, [pc, #24]	; (8004d6c <_cbSendTaskList+0xb8>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d3b1      	bcc.n	8004cc0 <_cbSendTaskList+0xc>
  }
}
 8004d5c:	bf00      	nop
 8004d5e:	bf00      	nop
 8004d60:	370c      	adds	r7, #12
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d66:	bf00      	nop
 8004d68:	20001aa0 	.word	0x20001aa0
 8004d6c:	20001b40 	.word	0x20001b40

08004d70 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004d70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d74:	b082      	sub	sp, #8
 8004d76:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004d78:	f7fe fbb4 	bl	80034e4 <xTaskGetTickCountFromISR>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	2200      	movs	r2, #0
 8004d80:	469a      	mov	sl, r3
 8004d82:	4693      	mov	fp, r2
 8004d84:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004d88:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	460b      	mov	r3, r1
 8004d90:	f04f 0a00 	mov.w	sl, #0
 8004d94:	f04f 0b00 	mov.w	fp, #0
 8004d98:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8004d9c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8004da0:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8004da4:	4652      	mov	r2, sl
 8004da6:	465b      	mov	r3, fp
 8004da8:	1a14      	subs	r4, r2, r0
 8004daa:	eb63 0501 	sbc.w	r5, r3, r1
 8004dae:	f04f 0200 	mov.w	r2, #0
 8004db2:	f04f 0300 	mov.w	r3, #0
 8004db6:	00ab      	lsls	r3, r5, #2
 8004db8:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004dbc:	00a2      	lsls	r2, r4, #2
 8004dbe:	4614      	mov	r4, r2
 8004dc0:	461d      	mov	r5, r3
 8004dc2:	eb14 0800 	adds.w	r8, r4, r0
 8004dc6:	eb45 0901 	adc.w	r9, r5, r1
 8004dca:	f04f 0200 	mov.w	r2, #0
 8004dce:	f04f 0300 	mov.w	r3, #0
 8004dd2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004dd6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004dda:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004dde:	4690      	mov	r8, r2
 8004de0:	4699      	mov	r9, r3
 8004de2:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8004de6:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004dea:	4610      	mov	r0, r2
 8004dec:	4619      	mov	r1, r3
 8004dee:	3708      	adds	r7, #8
 8004df0:	46bd      	mov	sp, r7
 8004df2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004df8 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b086      	sub	sp, #24
 8004dfc:	af02      	add	r7, sp, #8
 8004dfe:	60f8      	str	r0, [r7, #12]
 8004e00:	60b9      	str	r1, [r7, #8]
 8004e02:	607a      	str	r2, [r7, #4]
 8004e04:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004e06:	2205      	movs	r2, #5
 8004e08:	492b      	ldr	r1, [pc, #172]	; (8004eb8 <SYSVIEW_AddTask+0xc0>)
 8004e0a:	68b8      	ldr	r0, [r7, #8]
 8004e0c:	f001 fc4a 	bl	80066a4 <memcmp>
 8004e10:	4603      	mov	r3, r0
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d04b      	beq.n	8004eae <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004e16:	4b29      	ldr	r3, [pc, #164]	; (8004ebc <SYSVIEW_AddTask+0xc4>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	2b07      	cmp	r3, #7
 8004e1c:	d903      	bls.n	8004e26 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004e1e:	4828      	ldr	r0, [pc, #160]	; (8004ec0 <SYSVIEW_AddTask+0xc8>)
 8004e20:	f001 fbbe 	bl	80065a0 <SEGGER_SYSVIEW_Warn>
    return;
 8004e24:	e044      	b.n	8004eb0 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004e26:	4b25      	ldr	r3, [pc, #148]	; (8004ebc <SYSVIEW_AddTask+0xc4>)
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	4926      	ldr	r1, [pc, #152]	; (8004ec4 <SYSVIEW_AddTask+0xcc>)
 8004e2c:	4613      	mov	r3, r2
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	4413      	add	r3, r2
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	440b      	add	r3, r1
 8004e36:	68fa      	ldr	r2, [r7, #12]
 8004e38:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004e3a:	4b20      	ldr	r3, [pc, #128]	; (8004ebc <SYSVIEW_AddTask+0xc4>)
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	4921      	ldr	r1, [pc, #132]	; (8004ec4 <SYSVIEW_AddTask+0xcc>)
 8004e40:	4613      	mov	r3, r2
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	4413      	add	r3, r2
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	440b      	add	r3, r1
 8004e4a:	3304      	adds	r3, #4
 8004e4c:	68ba      	ldr	r2, [r7, #8]
 8004e4e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004e50:	4b1a      	ldr	r3, [pc, #104]	; (8004ebc <SYSVIEW_AddTask+0xc4>)
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	491b      	ldr	r1, [pc, #108]	; (8004ec4 <SYSVIEW_AddTask+0xcc>)
 8004e56:	4613      	mov	r3, r2
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	4413      	add	r3, r2
 8004e5c:	009b      	lsls	r3, r3, #2
 8004e5e:	440b      	add	r3, r1
 8004e60:	3308      	adds	r3, #8
 8004e62:	687a      	ldr	r2, [r7, #4]
 8004e64:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004e66:	4b15      	ldr	r3, [pc, #84]	; (8004ebc <SYSVIEW_AddTask+0xc4>)
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	4916      	ldr	r1, [pc, #88]	; (8004ec4 <SYSVIEW_AddTask+0xcc>)
 8004e6c:	4613      	mov	r3, r2
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	4413      	add	r3, r2
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	440b      	add	r3, r1
 8004e76:	330c      	adds	r3, #12
 8004e78:	683a      	ldr	r2, [r7, #0]
 8004e7a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004e7c:	4b0f      	ldr	r3, [pc, #60]	; (8004ebc <SYSVIEW_AddTask+0xc4>)
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	4910      	ldr	r1, [pc, #64]	; (8004ec4 <SYSVIEW_AddTask+0xcc>)
 8004e82:	4613      	mov	r3, r2
 8004e84:	009b      	lsls	r3, r3, #2
 8004e86:	4413      	add	r3, r2
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	440b      	add	r3, r1
 8004e8c:	3310      	adds	r3, #16
 8004e8e:	69ba      	ldr	r2, [r7, #24]
 8004e90:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004e92:	4b0a      	ldr	r3, [pc, #40]	; (8004ebc <SYSVIEW_AddTask+0xc4>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	3301      	adds	r3, #1
 8004e98:	4a08      	ldr	r2, [pc, #32]	; (8004ebc <SYSVIEW_AddTask+0xc4>)
 8004e9a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004e9c:	69bb      	ldr	r3, [r7, #24]
 8004e9e:	9300      	str	r3, [sp, #0]
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	68b9      	ldr	r1, [r7, #8]
 8004ea6:	68f8      	ldr	r0, [r7, #12]
 8004ea8:	f000 f80e 	bl	8004ec8 <SYSVIEW_SendTaskInfo>
 8004eac:	e000      	b.n	8004eb0 <SYSVIEW_AddTask+0xb8>
    return;
 8004eae:	bf00      	nop

}
 8004eb0:	3710      	adds	r7, #16
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	bf00      	nop
 8004eb8:	080068f4 	.word	0x080068f4
 8004ebc:	20001b40 	.word	0x20001b40
 8004ec0:	080068fc 	.word	0x080068fc
 8004ec4:	20001aa0 	.word	0x20001aa0

08004ec8 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b08a      	sub	sp, #40	; 0x28
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	60f8      	str	r0, [r7, #12]
 8004ed0:	60b9      	str	r1, [r7, #8]
 8004ed2:	607a      	str	r2, [r7, #4]
 8004ed4:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004ed6:	f107 0314 	add.w	r3, r7, #20
 8004eda:	2214      	movs	r2, #20
 8004edc:	2100      	movs	r1, #0
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f001 fbfe 	bl	80066e0 <memset>
  TaskInfo.TaskID     = TaskID;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ef6:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004ef8:	f107 0314 	add.w	r3, r7, #20
 8004efc:	4618      	mov	r0, r3
 8004efe:	f000 ffcb 	bl	8005e98 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004f02:	bf00      	nop
 8004f04:	3728      	adds	r7, #40	; 0x28
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
	...

08004f0c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b082      	sub	sp, #8
 8004f10:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004f12:	4b26      	ldr	r3, [pc, #152]	; (8004fac <_DoInit+0xa0>)
 8004f14:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8004f16:	22a8      	movs	r2, #168	; 0xa8
 8004f18:	2100      	movs	r1, #0
 8004f1a:	6838      	ldr	r0, [r7, #0]
 8004f1c:	f001 fbe0 	bl	80066e0 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	2203      	movs	r2, #3
 8004f24:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	2203      	movs	r2, #3
 8004f2a:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	4a20      	ldr	r2, [pc, #128]	; (8004fb0 <_DoInit+0xa4>)
 8004f30:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	4a1f      	ldr	r2, [pc, #124]	; (8004fb4 <_DoInit+0xa8>)
 8004f36:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004f3e:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	2200      	movs	r2, #0
 8004f44:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	4a16      	ldr	r2, [pc, #88]	; (8004fb0 <_DoInit+0xa4>)
 8004f56:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	4a17      	ldr	r2, [pc, #92]	; (8004fb8 <_DoInit+0xac>)
 8004f5c:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	2210      	movs	r2, #16
 8004f62:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	2200      	movs	r2, #0
 8004f68:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	2200      	movs	r2, #0
 8004f74:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8004f76:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	607b      	str	r3, [r7, #4]
 8004f7e:	e00c      	b.n	8004f9a <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f1c3 030f 	rsb	r3, r3, #15
 8004f86:	4a0d      	ldr	r2, [pc, #52]	; (8004fbc <_DoInit+0xb0>)
 8004f88:	5cd1      	ldrb	r1, [r2, r3]
 8004f8a:	683a      	ldr	r2, [r7, #0]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	4413      	add	r3, r2
 8004f90:	460a      	mov	r2, r1
 8004f92:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	3301      	adds	r3, #1
 8004f98:	607b      	str	r3, [r7, #4]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2b0f      	cmp	r3, #15
 8004f9e:	d9ef      	bls.n	8004f80 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8004fa0:	f3bf 8f5f 	dmb	sy
}
 8004fa4:	bf00      	nop
 8004fa6:	3708      	adds	r7, #8
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}
 8004fac:	20001b44 	.word	0x20001b44
 8004fb0:	0800694c 	.word	0x0800694c
 8004fb4:	20001bec 	.word	0x20001bec
 8004fb8:	20001fec 	.word	0x20001fec
 8004fbc:	080069a0 	.word	0x080069a0

08004fc0 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b08c      	sub	sp, #48	; 0x30
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	60f8      	str	r0, [r7, #12]
 8004fc8:	60b9      	str	r1, [r7, #8]
 8004fca:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004fcc:	4b3e      	ldr	r3, [pc, #248]	; (80050c8 <SEGGER_RTT_ReadNoLock+0x108>)
 8004fce:	623b      	str	r3, [r7, #32]
 8004fd0:	6a3b      	ldr	r3, [r7, #32]
 8004fd2:	781b      	ldrb	r3, [r3, #0]
 8004fd4:	b2db      	uxtb	r3, r3
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d101      	bne.n	8004fde <SEGGER_RTT_ReadNoLock+0x1e>
 8004fda:	f7ff ff97 	bl	8004f0c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004fde:	68fa      	ldr	r2, [r7, #12]
 8004fe0:	4613      	mov	r3, r2
 8004fe2:	005b      	lsls	r3, r3, #1
 8004fe4:	4413      	add	r3, r2
 8004fe6:	00db      	lsls	r3, r3, #3
 8004fe8:	3360      	adds	r3, #96	; 0x60
 8004fea:	4a37      	ldr	r2, [pc, #220]	; (80050c8 <SEGGER_RTT_ReadNoLock+0x108>)
 8004fec:	4413      	add	r3, r2
 8004fee:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004ff4:	69fb      	ldr	r3, [r7, #28]
 8004ff6:	691b      	ldr	r3, [r3, #16]
 8004ff8:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8004ffa:	69fb      	ldr	r3, [r7, #28]
 8004ffc:	68db      	ldr	r3, [r3, #12]
 8004ffe:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005000:	2300      	movs	r3, #0
 8005002:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005004:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005006:	69bb      	ldr	r3, [r7, #24]
 8005008:	429a      	cmp	r2, r3
 800500a:	d92b      	bls.n	8005064 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	689a      	ldr	r2, [r3, #8]
 8005010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005012:	1ad3      	subs	r3, r2, r3
 8005014:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005016:	697a      	ldr	r2, [r7, #20]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	4293      	cmp	r3, r2
 800501c:	bf28      	it	cs
 800501e:	4613      	movcs	r3, r2
 8005020:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005022:	69fb      	ldr	r3, [r7, #28]
 8005024:	685a      	ldr	r2, [r3, #4]
 8005026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005028:	4413      	add	r3, r2
 800502a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800502c:	697a      	ldr	r2, [r7, #20]
 800502e:	6939      	ldr	r1, [r7, #16]
 8005030:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005032:	f001 fb47 	bl	80066c4 <memcpy>
    NumBytesRead += NumBytesRem;
 8005036:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	4413      	add	r3, r2
 800503c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800503e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	4413      	add	r3, r2
 8005044:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005046:	687a      	ldr	r2, [r7, #4]
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	1ad3      	subs	r3, r2, r3
 800504c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800504e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	4413      	add	r3, r2
 8005054:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005056:	69fb      	ldr	r3, [r7, #28]
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800505c:	429a      	cmp	r2, r3
 800505e:	d101      	bne.n	8005064 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8005060:	2300      	movs	r3, #0
 8005062:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005064:	69ba      	ldr	r2, [r7, #24]
 8005066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005068:	1ad3      	subs	r3, r2, r3
 800506a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800506c:	697a      	ldr	r2, [r7, #20]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	4293      	cmp	r3, r2
 8005072:	bf28      	it	cs
 8005074:	4613      	movcs	r3, r2
 8005076:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d019      	beq.n	80050b2 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800507e:	69fb      	ldr	r3, [r7, #28]
 8005080:	685a      	ldr	r2, [r3, #4]
 8005082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005084:	4413      	add	r3, r2
 8005086:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005088:	697a      	ldr	r2, [r7, #20]
 800508a:	6939      	ldr	r1, [r7, #16]
 800508c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800508e:	f001 fb19 	bl	80066c4 <memcpy>
    NumBytesRead += NumBytesRem;
 8005092:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	4413      	add	r3, r2
 8005098:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800509a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	4413      	add	r3, r2
 80050a0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	1ad3      	subs	r3, r2, r3
 80050a8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80050aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	4413      	add	r3, r2
 80050b0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 80050b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d002      	beq.n	80050be <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80050b8:	69fb      	ldr	r3, [r7, #28]
 80050ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050bc:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80050be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3730      	adds	r7, #48	; 0x30
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}
 80050c8:	20001b44 	.word	0x20001b44

080050cc <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b088      	sub	sp, #32
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	60f8      	str	r0, [r7, #12]
 80050d4:	60b9      	str	r1, [r7, #8]
 80050d6:	607a      	str	r2, [r7, #4]
 80050d8:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80050da:	4b3d      	ldr	r3, [pc, #244]	; (80051d0 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80050dc:	61bb      	str	r3, [r7, #24]
 80050de:	69bb      	ldr	r3, [r7, #24]
 80050e0:	781b      	ldrb	r3, [r3, #0]
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d101      	bne.n	80050ec <SEGGER_RTT_AllocUpBuffer+0x20>
 80050e8:	f7ff ff10 	bl	8004f0c <_DoInit>
  SEGGER_RTT_LOCK();
 80050ec:	f3ef 8311 	mrs	r3, BASEPRI
 80050f0:	f04f 0120 	mov.w	r1, #32
 80050f4:	f381 8811 	msr	BASEPRI, r1
 80050f8:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80050fa:	4b35      	ldr	r3, [pc, #212]	; (80051d0 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80050fc:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80050fe:	2300      	movs	r3, #0
 8005100:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8005102:	6939      	ldr	r1, [r7, #16]
 8005104:	69fb      	ldr	r3, [r7, #28]
 8005106:	1c5a      	adds	r2, r3, #1
 8005108:	4613      	mov	r3, r2
 800510a:	005b      	lsls	r3, r3, #1
 800510c:	4413      	add	r3, r2
 800510e:	00db      	lsls	r3, r3, #3
 8005110:	440b      	add	r3, r1
 8005112:	3304      	adds	r3, #4
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d008      	beq.n	800512c <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800511a:	69fb      	ldr	r3, [r7, #28]
 800511c:	3301      	adds	r3, #1
 800511e:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	691b      	ldr	r3, [r3, #16]
 8005124:	69fa      	ldr	r2, [r7, #28]
 8005126:	429a      	cmp	r2, r3
 8005128:	dbeb      	blt.n	8005102 <SEGGER_RTT_AllocUpBuffer+0x36>
 800512a:	e000      	b.n	800512e <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 800512c:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	691b      	ldr	r3, [r3, #16]
 8005132:	69fa      	ldr	r2, [r7, #28]
 8005134:	429a      	cmp	r2, r3
 8005136:	da3f      	bge.n	80051b8 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005138:	6939      	ldr	r1, [r7, #16]
 800513a:	69fb      	ldr	r3, [r7, #28]
 800513c:	1c5a      	adds	r2, r3, #1
 800513e:	4613      	mov	r3, r2
 8005140:	005b      	lsls	r3, r3, #1
 8005142:	4413      	add	r3, r2
 8005144:	00db      	lsls	r3, r3, #3
 8005146:	440b      	add	r3, r1
 8005148:	68fa      	ldr	r2, [r7, #12]
 800514a:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 800514c:	6939      	ldr	r1, [r7, #16]
 800514e:	69fb      	ldr	r3, [r7, #28]
 8005150:	1c5a      	adds	r2, r3, #1
 8005152:	4613      	mov	r3, r2
 8005154:	005b      	lsls	r3, r3, #1
 8005156:	4413      	add	r3, r2
 8005158:	00db      	lsls	r3, r3, #3
 800515a:	440b      	add	r3, r1
 800515c:	3304      	adds	r3, #4
 800515e:	68ba      	ldr	r2, [r7, #8]
 8005160:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8005162:	6939      	ldr	r1, [r7, #16]
 8005164:	69fa      	ldr	r2, [r7, #28]
 8005166:	4613      	mov	r3, r2
 8005168:	005b      	lsls	r3, r3, #1
 800516a:	4413      	add	r3, r2
 800516c:	00db      	lsls	r3, r3, #3
 800516e:	440b      	add	r3, r1
 8005170:	3320      	adds	r3, #32
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8005176:	6939      	ldr	r1, [r7, #16]
 8005178:	69fa      	ldr	r2, [r7, #28]
 800517a:	4613      	mov	r3, r2
 800517c:	005b      	lsls	r3, r3, #1
 800517e:	4413      	add	r3, r2
 8005180:	00db      	lsls	r3, r3, #3
 8005182:	440b      	add	r3, r1
 8005184:	3328      	adds	r3, #40	; 0x28
 8005186:	2200      	movs	r2, #0
 8005188:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800518a:	6939      	ldr	r1, [r7, #16]
 800518c:	69fa      	ldr	r2, [r7, #28]
 800518e:	4613      	mov	r3, r2
 8005190:	005b      	lsls	r3, r3, #1
 8005192:	4413      	add	r3, r2
 8005194:	00db      	lsls	r3, r3, #3
 8005196:	440b      	add	r3, r1
 8005198:	3324      	adds	r3, #36	; 0x24
 800519a:	2200      	movs	r2, #0
 800519c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800519e:	6939      	ldr	r1, [r7, #16]
 80051a0:	69fa      	ldr	r2, [r7, #28]
 80051a2:	4613      	mov	r3, r2
 80051a4:	005b      	lsls	r3, r3, #1
 80051a6:	4413      	add	r3, r2
 80051a8:	00db      	lsls	r3, r3, #3
 80051aa:	440b      	add	r3, r1
 80051ac:	332c      	adds	r3, #44	; 0x2c
 80051ae:	683a      	ldr	r2, [r7, #0]
 80051b0:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80051b2:	f3bf 8f5f 	dmb	sy
 80051b6:	e002      	b.n	80051be <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80051b8:	f04f 33ff 	mov.w	r3, #4294967295
 80051bc:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80051c4:	69fb      	ldr	r3, [r7, #28]
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3720      	adds	r7, #32
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}
 80051ce:	bf00      	nop
 80051d0:	20001b44 	.word	0x20001b44

080051d4 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b08a      	sub	sp, #40	; 0x28
 80051d8:	af00      	add	r7, sp, #0
 80051da:	60f8      	str	r0, [r7, #12]
 80051dc:	60b9      	str	r1, [r7, #8]
 80051de:	607a      	str	r2, [r7, #4]
 80051e0:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 80051e2:	4b21      	ldr	r3, [pc, #132]	; (8005268 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80051e4:	623b      	str	r3, [r7, #32]
 80051e6:	6a3b      	ldr	r3, [r7, #32]
 80051e8:	781b      	ldrb	r3, [r3, #0]
 80051ea:	b2db      	uxtb	r3, r3
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d101      	bne.n	80051f4 <SEGGER_RTT_ConfigDownBuffer+0x20>
 80051f0:	f7ff fe8c 	bl	8004f0c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80051f4:	4b1c      	ldr	r3, [pc, #112]	; (8005268 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80051f6:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2b02      	cmp	r3, #2
 80051fc:	d82c      	bhi.n	8005258 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 80051fe:	f3ef 8311 	mrs	r3, BASEPRI
 8005202:	f04f 0120 	mov.w	r1, #32
 8005206:	f381 8811 	msr	BASEPRI, r1
 800520a:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 800520c:	68fa      	ldr	r2, [r7, #12]
 800520e:	4613      	mov	r3, r2
 8005210:	005b      	lsls	r3, r3, #1
 8005212:	4413      	add	r3, r2
 8005214:	00db      	lsls	r3, r3, #3
 8005216:	3360      	adds	r3, #96	; 0x60
 8005218:	69fa      	ldr	r2, [r7, #28]
 800521a:	4413      	add	r3, r2
 800521c:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d00e      	beq.n	8005242 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	68ba      	ldr	r2, [r7, #8]
 8005228:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	687a      	ldr	r2, [r7, #4]
 800522e:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	683a      	ldr	r2, [r7, #0]
 8005234:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	2200      	movs	r2, #0
 800523a:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	2200      	movs	r2, #0
 8005240:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005246:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005248:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 800524c:	69bb      	ldr	r3, [r7, #24]
 800524e:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8005252:	2300      	movs	r3, #0
 8005254:	627b      	str	r3, [r7, #36]	; 0x24
 8005256:	e002      	b.n	800525e <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8005258:	f04f 33ff 	mov.w	r3, #4294967295
 800525c:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 800525e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005260:	4618      	mov	r0, r3
 8005262:	3728      	adds	r7, #40	; 0x28
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}
 8005268:	20001b44 	.word	0x20001b44

0800526c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800526c:	b480      	push	{r7}
 800526e:	b087      	sub	sp, #28
 8005270:	af00      	add	r7, sp, #0
 8005272:	60f8      	str	r0, [r7, #12]
 8005274:	60b9      	str	r1, [r7, #8]
 8005276:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	1c5a      	adds	r2, r3, #1
 8005280:	60fa      	str	r2, [r7, #12]
 8005282:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2b80      	cmp	r3, #128	; 0x80
 8005288:	d90a      	bls.n	80052a0 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 800528a:	2380      	movs	r3, #128	; 0x80
 800528c:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 800528e:	e007      	b.n	80052a0 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 8005290:	68ba      	ldr	r2, [r7, #8]
 8005292:	1c53      	adds	r3, r2, #1
 8005294:	60bb      	str	r3, [r7, #8]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	1c59      	adds	r1, r3, #1
 800529a:	60f9      	str	r1, [r7, #12]
 800529c:	7812      	ldrb	r2, [r2, #0]
 800529e:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	1e5a      	subs	r2, r3, #1
 80052a4:	607a      	str	r2, [r7, #4]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d003      	beq.n	80052b2 <_EncodeStr+0x46>
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	781b      	ldrb	r3, [r3, #0]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d1ee      	bne.n	8005290 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 80052b2:	68ba      	ldr	r2, [r7, #8]
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	1ad3      	subs	r3, r2, r3
 80052b8:	b2da      	uxtb	r2, r3
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 80052be:	68fb      	ldr	r3, [r7, #12]
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	371c      	adds	r7, #28
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr

080052cc <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80052cc:	b480      	push	{r7}
 80052ce:	b083      	sub	sp, #12
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	3307      	adds	r3, #7
}
 80052d8:	4618      	mov	r0, r3
 80052da:	370c      	adds	r7, #12
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr

080052e4 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b082      	sub	sp, #8
 80052e8:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80052ea:	4b35      	ldr	r3, [pc, #212]	; (80053c0 <_HandleIncomingPacket+0xdc>)
 80052ec:	7e1b      	ldrb	r3, [r3, #24]
 80052ee:	4618      	mov	r0, r3
 80052f0:	1cfb      	adds	r3, r7, #3
 80052f2:	2201      	movs	r2, #1
 80052f4:	4619      	mov	r1, r3
 80052f6:	f7ff fe63 	bl	8004fc0 <SEGGER_RTT_ReadNoLock>
 80052fa:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d052      	beq.n	80053a8 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 8005302:	78fb      	ldrb	r3, [r7, #3]
 8005304:	2b80      	cmp	r3, #128	; 0x80
 8005306:	d031      	beq.n	800536c <_HandleIncomingPacket+0x88>
 8005308:	2b80      	cmp	r3, #128	; 0x80
 800530a:	dc40      	bgt.n	800538e <_HandleIncomingPacket+0xaa>
 800530c:	2b07      	cmp	r3, #7
 800530e:	dc15      	bgt.n	800533c <_HandleIncomingPacket+0x58>
 8005310:	2b00      	cmp	r3, #0
 8005312:	dd3c      	ble.n	800538e <_HandleIncomingPacket+0xaa>
 8005314:	3b01      	subs	r3, #1
 8005316:	2b06      	cmp	r3, #6
 8005318:	d839      	bhi.n	800538e <_HandleIncomingPacket+0xaa>
 800531a:	a201      	add	r2, pc, #4	; (adr r2, 8005320 <_HandleIncomingPacket+0x3c>)
 800531c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005320:	08005343 	.word	0x08005343
 8005324:	08005349 	.word	0x08005349
 8005328:	0800534f 	.word	0x0800534f
 800532c:	08005355 	.word	0x08005355
 8005330:	0800535b 	.word	0x0800535b
 8005334:	08005361 	.word	0x08005361
 8005338:	08005367 	.word	0x08005367
 800533c:	2b7f      	cmp	r3, #127	; 0x7f
 800533e:	d035      	beq.n	80053ac <_HandleIncomingPacket+0xc8>
 8005340:	e025      	b.n	800538e <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005342:	f000 fc2f 	bl	8005ba4 <SEGGER_SYSVIEW_Start>
      break;
 8005346:	e036      	b.n	80053b6 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005348:	f000 fce6 	bl	8005d18 <SEGGER_SYSVIEW_Stop>
      break;
 800534c:	e033      	b.n	80053b6 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800534e:	f000 febf 	bl	80060d0 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8005352:	e030      	b.n	80053b6 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005354:	f000 fe84 	bl	8006060 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005358:	e02d      	b.n	80053b6 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800535a:	f000 fd03 	bl	8005d64 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800535e:	e02a      	b.n	80053b6 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005360:	f001 f8e0 	bl	8006524 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005364:	e027      	b.n	80053b6 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8005366:	f001 f8bf 	bl	80064e8 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800536a:	e024      	b.n	80053b6 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800536c:	4b14      	ldr	r3, [pc, #80]	; (80053c0 <_HandleIncomingPacket+0xdc>)
 800536e:	7e1b      	ldrb	r3, [r3, #24]
 8005370:	4618      	mov	r0, r3
 8005372:	1cfb      	adds	r3, r7, #3
 8005374:	2201      	movs	r2, #1
 8005376:	4619      	mov	r1, r3
 8005378:	f7ff fe22 	bl	8004fc0 <SEGGER_RTT_ReadNoLock>
 800537c:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d015      	beq.n	80053b0 <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005384:	78fb      	ldrb	r3, [r7, #3]
 8005386:	4618      	mov	r0, r3
 8005388:	f001 f824 	bl	80063d4 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800538c:	e010      	b.n	80053b0 <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800538e:	78fb      	ldrb	r3, [r7, #3]
 8005390:	b25b      	sxtb	r3, r3
 8005392:	2b00      	cmp	r3, #0
 8005394:	da0e      	bge.n	80053b4 <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005396:	4b0a      	ldr	r3, [pc, #40]	; (80053c0 <_HandleIncomingPacket+0xdc>)
 8005398:	7e1b      	ldrb	r3, [r3, #24]
 800539a:	4618      	mov	r0, r3
 800539c:	1cfb      	adds	r3, r7, #3
 800539e:	2201      	movs	r2, #1
 80053a0:	4619      	mov	r1, r3
 80053a2:	f7ff fe0d 	bl	8004fc0 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80053a6:	e005      	b.n	80053b4 <_HandleIncomingPacket+0xd0>
    }
  }
 80053a8:	bf00      	nop
 80053aa:	e004      	b.n	80053b6 <_HandleIncomingPacket+0xd2>
      break;
 80053ac:	bf00      	nop
 80053ae:	e002      	b.n	80053b6 <_HandleIncomingPacket+0xd2>
      break;
 80053b0:	bf00      	nop
 80053b2:	e000      	b.n	80053b6 <_HandleIncomingPacket+0xd2>
      break;
 80053b4:	bf00      	nop
}
 80053b6:	bf00      	nop
 80053b8:	3708      	adds	r7, #8
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}
 80053be:	bf00      	nop
 80053c0:	20002404 	.word	0x20002404

080053c4 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b08c      	sub	sp, #48	; 0x30
 80053c8:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80053ca:	2301      	movs	r3, #1
 80053cc:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80053ce:	1d3b      	adds	r3, r7, #4
 80053d0:	3301      	adds	r3, #1
 80053d2:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80053d4:	69fb      	ldr	r3, [r7, #28]
 80053d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053d8:	4b31      	ldr	r3, [pc, #196]	; (80054a0 <_TrySendOverflowPacket+0xdc>)
 80053da:	695b      	ldr	r3, [r3, #20]
 80053dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80053de:	e00b      	b.n	80053f8 <_TrySendOverflowPacket+0x34>
 80053e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053e2:	b2da      	uxtb	r2, r3
 80053e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053e6:	1c59      	adds	r1, r3, #1
 80053e8:	62f9      	str	r1, [r7, #44]	; 0x2c
 80053ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053ee:	b2d2      	uxtb	r2, r2
 80053f0:	701a      	strb	r2, [r3, #0]
 80053f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053f4:	09db      	lsrs	r3, r3, #7
 80053f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80053f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053fa:	2b7f      	cmp	r3, #127	; 0x7f
 80053fc:	d8f0      	bhi.n	80053e0 <_TrySendOverflowPacket+0x1c>
 80053fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005400:	1c5a      	adds	r2, r3, #1
 8005402:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005404:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005406:	b2d2      	uxtb	r2, r2
 8005408:	701a      	strb	r2, [r3, #0]
 800540a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800540c:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800540e:	4b25      	ldr	r3, [pc, #148]	; (80054a4 <_TrySendOverflowPacket+0xe0>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005414:	4b22      	ldr	r3, [pc, #136]	; (80054a0 <_TrySendOverflowPacket+0xdc>)
 8005416:	68db      	ldr	r3, [r3, #12]
 8005418:	69ba      	ldr	r2, [r7, #24]
 800541a:	1ad3      	subs	r3, r2, r3
 800541c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800541e:	69fb      	ldr	r3, [r7, #28]
 8005420:	627b      	str	r3, [r7, #36]	; 0x24
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	623b      	str	r3, [r7, #32]
 8005426:	e00b      	b.n	8005440 <_TrySendOverflowPacket+0x7c>
 8005428:	6a3b      	ldr	r3, [r7, #32]
 800542a:	b2da      	uxtb	r2, r3
 800542c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542e:	1c59      	adds	r1, r3, #1
 8005430:	6279      	str	r1, [r7, #36]	; 0x24
 8005432:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005436:	b2d2      	uxtb	r2, r2
 8005438:	701a      	strb	r2, [r3, #0]
 800543a:	6a3b      	ldr	r3, [r7, #32]
 800543c:	09db      	lsrs	r3, r3, #7
 800543e:	623b      	str	r3, [r7, #32]
 8005440:	6a3b      	ldr	r3, [r7, #32]
 8005442:	2b7f      	cmp	r3, #127	; 0x7f
 8005444:	d8f0      	bhi.n	8005428 <_TrySendOverflowPacket+0x64>
 8005446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005448:	1c5a      	adds	r2, r3, #1
 800544a:	627a      	str	r2, [r7, #36]	; 0x24
 800544c:	6a3a      	ldr	r2, [r7, #32]
 800544e:	b2d2      	uxtb	r2, r2
 8005450:	701a      	strb	r2, [r3, #0]
 8005452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005454:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8005456:	4b12      	ldr	r3, [pc, #72]	; (80054a0 <_TrySendOverflowPacket+0xdc>)
 8005458:	785b      	ldrb	r3, [r3, #1]
 800545a:	4618      	mov	r0, r3
 800545c:	1d3b      	adds	r3, r7, #4
 800545e:	69fa      	ldr	r2, [r7, #28]
 8005460:	1ad3      	subs	r3, r2, r3
 8005462:	461a      	mov	r2, r3
 8005464:	1d3b      	adds	r3, r7, #4
 8005466:	4619      	mov	r1, r3
 8005468:	f7fa feb2 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800546c:	4603      	mov	r3, r0
 800546e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d009      	beq.n	800548a <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005476:	4a0a      	ldr	r2, [pc, #40]	; (80054a0 <_TrySendOverflowPacket+0xdc>)
 8005478:	69bb      	ldr	r3, [r7, #24]
 800547a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800547c:	4b08      	ldr	r3, [pc, #32]	; (80054a0 <_TrySendOverflowPacket+0xdc>)
 800547e:	781b      	ldrb	r3, [r3, #0]
 8005480:	3b01      	subs	r3, #1
 8005482:	b2da      	uxtb	r2, r3
 8005484:	4b06      	ldr	r3, [pc, #24]	; (80054a0 <_TrySendOverflowPacket+0xdc>)
 8005486:	701a      	strb	r2, [r3, #0]
 8005488:	e004      	b.n	8005494 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800548a:	4b05      	ldr	r3, [pc, #20]	; (80054a0 <_TrySendOverflowPacket+0xdc>)
 800548c:	695b      	ldr	r3, [r3, #20]
 800548e:	3301      	adds	r3, #1
 8005490:	4a03      	ldr	r2, [pc, #12]	; (80054a0 <_TrySendOverflowPacket+0xdc>)
 8005492:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005494:	693b      	ldr	r3, [r7, #16]
}
 8005496:	4618      	mov	r0, r3
 8005498:	3730      	adds	r7, #48	; 0x30
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}
 800549e:	bf00      	nop
 80054a0:	20002404 	.word	0x20002404
 80054a4:	e0001004 	.word	0xe0001004

080054a8 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b08a      	sub	sp, #40	; 0x28
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	60f8      	str	r0, [r7, #12]
 80054b0:	60b9      	str	r1, [r7, #8]
 80054b2:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80054b4:	4b98      	ldr	r3, [pc, #608]	; (8005718 <_SendPacket+0x270>)
 80054b6:	781b      	ldrb	r3, [r3, #0]
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d010      	beq.n	80054de <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80054bc:	4b96      	ldr	r3, [pc, #600]	; (8005718 <_SendPacket+0x270>)
 80054be:	781b      	ldrb	r3, [r3, #0]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	f000 812d 	beq.w	8005720 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80054c6:	4b94      	ldr	r3, [pc, #592]	; (8005718 <_SendPacket+0x270>)
 80054c8:	781b      	ldrb	r3, [r3, #0]
 80054ca:	2b02      	cmp	r3, #2
 80054cc:	d109      	bne.n	80054e2 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80054ce:	f7ff ff79 	bl	80053c4 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80054d2:	4b91      	ldr	r3, [pc, #580]	; (8005718 <_SendPacket+0x270>)
 80054d4:	781b      	ldrb	r3, [r3, #0]
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	f040 8124 	bne.w	8005724 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 80054dc:	e001      	b.n	80054e2 <_SendPacket+0x3a>
    goto Send;
 80054de:	bf00      	nop
 80054e0:	e000      	b.n	80054e4 <_SendPacket+0x3c>
Send:
 80054e2:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2b1f      	cmp	r3, #31
 80054e8:	d809      	bhi.n	80054fe <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80054ea:	4b8b      	ldr	r3, [pc, #556]	; (8005718 <_SendPacket+0x270>)
 80054ec:	69da      	ldr	r2, [r3, #28]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	fa22 f303 	lsr.w	r3, r2, r3
 80054f4:	f003 0301 	and.w	r3, r3, #1
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	f040 8115 	bne.w	8005728 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2b17      	cmp	r3, #23
 8005502:	d807      	bhi.n	8005514 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	3b01      	subs	r3, #1
 8005508:	60fb      	str	r3, [r7, #12]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	b2da      	uxtb	r2, r3
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	701a      	strb	r2, [r3, #0]
 8005512:	e0c4      	b.n	800569e <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8005514:	68ba      	ldr	r2, [r7, #8]
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	1ad3      	subs	r3, r2, r3
 800551a:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 800551c:	69fb      	ldr	r3, [r7, #28]
 800551e:	2b7f      	cmp	r3, #127	; 0x7f
 8005520:	d912      	bls.n	8005548 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8005522:	69fb      	ldr	r3, [r7, #28]
 8005524:	09da      	lsrs	r2, r3, #7
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	3b01      	subs	r3, #1
 800552a:	60fb      	str	r3, [r7, #12]
 800552c:	b2d2      	uxtb	r2, r2
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8005532:	69fb      	ldr	r3, [r7, #28]
 8005534:	b2db      	uxtb	r3, r3
 8005536:	68fa      	ldr	r2, [r7, #12]
 8005538:	3a01      	subs	r2, #1
 800553a:	60fa      	str	r2, [r7, #12]
 800553c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005540:	b2da      	uxtb	r2, r3
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	701a      	strb	r2, [r3, #0]
 8005546:	e006      	b.n	8005556 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	3b01      	subs	r3, #1
 800554c:	60fb      	str	r3, [r7, #12]
 800554e:	69fb      	ldr	r3, [r7, #28]
 8005550:	b2da      	uxtb	r2, r3
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2b7e      	cmp	r3, #126	; 0x7e
 800555a:	d807      	bhi.n	800556c <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	3b01      	subs	r3, #1
 8005560:	60fb      	str	r3, [r7, #12]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	b2da      	uxtb	r2, r3
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	701a      	strb	r2, [r3, #0]
 800556a:	e098      	b.n	800569e <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005572:	d212      	bcs.n	800559a <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	09da      	lsrs	r2, r3, #7
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	3b01      	subs	r3, #1
 800557c:	60fb      	str	r3, [r7, #12]
 800557e:	b2d2      	uxtb	r2, r2
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	b2db      	uxtb	r3, r3
 8005588:	68fa      	ldr	r2, [r7, #12]
 800558a:	3a01      	subs	r2, #1
 800558c:	60fa      	str	r2, [r7, #12]
 800558e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005592:	b2da      	uxtb	r2, r3
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	701a      	strb	r2, [r3, #0]
 8005598:	e081      	b.n	800569e <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80055a0:	d21d      	bcs.n	80055de <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	0b9a      	lsrs	r2, r3, #14
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	3b01      	subs	r3, #1
 80055aa:	60fb      	str	r3, [r7, #12]
 80055ac:	b2d2      	uxtb	r2, r2
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	09db      	lsrs	r3, r3, #7
 80055b6:	b2db      	uxtb	r3, r3
 80055b8:	68fa      	ldr	r2, [r7, #12]
 80055ba:	3a01      	subs	r2, #1
 80055bc:	60fa      	str	r2, [r7, #12]
 80055be:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80055c2:	b2da      	uxtb	r2, r3
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	68fa      	ldr	r2, [r7, #12]
 80055ce:	3a01      	subs	r2, #1
 80055d0:	60fa      	str	r2, [r7, #12]
 80055d2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80055d6:	b2da      	uxtb	r2, r3
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	701a      	strb	r2, [r3, #0]
 80055dc:	e05f      	b.n	800569e <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80055e4:	d228      	bcs.n	8005638 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	0d5a      	lsrs	r2, r3, #21
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	3b01      	subs	r3, #1
 80055ee:	60fb      	str	r3, [r7, #12]
 80055f0:	b2d2      	uxtb	r2, r2
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	0b9b      	lsrs	r3, r3, #14
 80055fa:	b2db      	uxtb	r3, r3
 80055fc:	68fa      	ldr	r2, [r7, #12]
 80055fe:	3a01      	subs	r2, #1
 8005600:	60fa      	str	r2, [r7, #12]
 8005602:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005606:	b2da      	uxtb	r2, r3
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	09db      	lsrs	r3, r3, #7
 8005610:	b2db      	uxtb	r3, r3
 8005612:	68fa      	ldr	r2, [r7, #12]
 8005614:	3a01      	subs	r2, #1
 8005616:	60fa      	str	r2, [r7, #12]
 8005618:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800561c:	b2da      	uxtb	r2, r3
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	b2db      	uxtb	r3, r3
 8005626:	68fa      	ldr	r2, [r7, #12]
 8005628:	3a01      	subs	r2, #1
 800562a:	60fa      	str	r2, [r7, #12]
 800562c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005630:	b2da      	uxtb	r2, r3
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	701a      	strb	r2, [r3, #0]
 8005636:	e032      	b.n	800569e <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	0f1a      	lsrs	r2, r3, #28
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	3b01      	subs	r3, #1
 8005640:	60fb      	str	r3, [r7, #12]
 8005642:	b2d2      	uxtb	r2, r2
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	0d5b      	lsrs	r3, r3, #21
 800564c:	b2db      	uxtb	r3, r3
 800564e:	68fa      	ldr	r2, [r7, #12]
 8005650:	3a01      	subs	r2, #1
 8005652:	60fa      	str	r2, [r7, #12]
 8005654:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005658:	b2da      	uxtb	r2, r3
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	0b9b      	lsrs	r3, r3, #14
 8005662:	b2db      	uxtb	r3, r3
 8005664:	68fa      	ldr	r2, [r7, #12]
 8005666:	3a01      	subs	r2, #1
 8005668:	60fa      	str	r2, [r7, #12]
 800566a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800566e:	b2da      	uxtb	r2, r3
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	09db      	lsrs	r3, r3, #7
 8005678:	b2db      	uxtb	r3, r3
 800567a:	68fa      	ldr	r2, [r7, #12]
 800567c:	3a01      	subs	r2, #1
 800567e:	60fa      	str	r2, [r7, #12]
 8005680:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005684:	b2da      	uxtb	r2, r3
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	b2db      	uxtb	r3, r3
 800568e:	68fa      	ldr	r2, [r7, #12]
 8005690:	3a01      	subs	r2, #1
 8005692:	60fa      	str	r2, [r7, #12]
 8005694:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005698:	b2da      	uxtb	r2, r3
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800569e:	4b1f      	ldr	r3, [pc, #124]	; (800571c <_SendPacket+0x274>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80056a4:	4b1c      	ldr	r3, [pc, #112]	; (8005718 <_SendPacket+0x270>)
 80056a6:	68db      	ldr	r3, [r3, #12]
 80056a8:	69ba      	ldr	r2, [r7, #24]
 80056aa:	1ad3      	subs	r3, r2, r3
 80056ac:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	627b      	str	r3, [r7, #36]	; 0x24
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	623b      	str	r3, [r7, #32]
 80056b6:	e00b      	b.n	80056d0 <_SendPacket+0x228>
 80056b8:	6a3b      	ldr	r3, [r7, #32]
 80056ba:	b2da      	uxtb	r2, r3
 80056bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056be:	1c59      	adds	r1, r3, #1
 80056c0:	6279      	str	r1, [r7, #36]	; 0x24
 80056c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80056c6:	b2d2      	uxtb	r2, r2
 80056c8:	701a      	strb	r2, [r3, #0]
 80056ca:	6a3b      	ldr	r3, [r7, #32]
 80056cc:	09db      	lsrs	r3, r3, #7
 80056ce:	623b      	str	r3, [r7, #32]
 80056d0:	6a3b      	ldr	r3, [r7, #32]
 80056d2:	2b7f      	cmp	r3, #127	; 0x7f
 80056d4:	d8f0      	bhi.n	80056b8 <_SendPacket+0x210>
 80056d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d8:	1c5a      	adds	r2, r3, #1
 80056da:	627a      	str	r2, [r7, #36]	; 0x24
 80056dc:	6a3a      	ldr	r2, [r7, #32]
 80056de:	b2d2      	uxtb	r2, r2
 80056e0:	701a      	strb	r2, [r3, #0]
 80056e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e4:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 80056e6:	4b0c      	ldr	r3, [pc, #48]	; (8005718 <_SendPacket+0x270>)
 80056e8:	785b      	ldrb	r3, [r3, #1]
 80056ea:	4618      	mov	r0, r3
 80056ec:	68ba      	ldr	r2, [r7, #8]
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	1ad3      	subs	r3, r2, r3
 80056f2:	461a      	mov	r2, r3
 80056f4:	68f9      	ldr	r1, [r7, #12]
 80056f6:	f7fa fd6b 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80056fa:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d003      	beq.n	800570a <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005702:	4a05      	ldr	r2, [pc, #20]	; (8005718 <_SendPacket+0x270>)
 8005704:	69bb      	ldr	r3, [r7, #24]
 8005706:	60d3      	str	r3, [r2, #12]
 8005708:	e00f      	b.n	800572a <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800570a:	4b03      	ldr	r3, [pc, #12]	; (8005718 <_SendPacket+0x270>)
 800570c:	781b      	ldrb	r3, [r3, #0]
 800570e:	3301      	adds	r3, #1
 8005710:	b2da      	uxtb	r2, r3
 8005712:	4b01      	ldr	r3, [pc, #4]	; (8005718 <_SendPacket+0x270>)
 8005714:	701a      	strb	r2, [r3, #0]
 8005716:	e008      	b.n	800572a <_SendPacket+0x282>
 8005718:	20002404 	.word	0x20002404
 800571c:	e0001004 	.word	0xe0001004
    goto SendDone;
 8005720:	bf00      	nop
 8005722:	e002      	b.n	800572a <_SendPacket+0x282>
      goto SendDone;
 8005724:	bf00      	nop
 8005726:	e000      	b.n	800572a <_SendPacket+0x282>
      goto SendDone;
 8005728:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800572a:	4b14      	ldr	r3, [pc, #80]	; (800577c <_SendPacket+0x2d4>)
 800572c:	7e1b      	ldrb	r3, [r3, #24]
 800572e:	4619      	mov	r1, r3
 8005730:	4a13      	ldr	r2, [pc, #76]	; (8005780 <_SendPacket+0x2d8>)
 8005732:	460b      	mov	r3, r1
 8005734:	005b      	lsls	r3, r3, #1
 8005736:	440b      	add	r3, r1
 8005738:	00db      	lsls	r3, r3, #3
 800573a:	4413      	add	r3, r2
 800573c:	336c      	adds	r3, #108	; 0x6c
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	4b0e      	ldr	r3, [pc, #56]	; (800577c <_SendPacket+0x2d4>)
 8005742:	7e1b      	ldrb	r3, [r3, #24]
 8005744:	4618      	mov	r0, r3
 8005746:	490e      	ldr	r1, [pc, #56]	; (8005780 <_SendPacket+0x2d8>)
 8005748:	4603      	mov	r3, r0
 800574a:	005b      	lsls	r3, r3, #1
 800574c:	4403      	add	r3, r0
 800574e:	00db      	lsls	r3, r3, #3
 8005750:	440b      	add	r3, r1
 8005752:	3370      	adds	r3, #112	; 0x70
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	429a      	cmp	r2, r3
 8005758:	d00b      	beq.n	8005772 <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800575a:	4b08      	ldr	r3, [pc, #32]	; (800577c <_SendPacket+0x2d4>)
 800575c:	789b      	ldrb	r3, [r3, #2]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d107      	bne.n	8005772 <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005762:	4b06      	ldr	r3, [pc, #24]	; (800577c <_SendPacket+0x2d4>)
 8005764:	2201      	movs	r2, #1
 8005766:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005768:	f7ff fdbc 	bl	80052e4 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800576c:	4b03      	ldr	r3, [pc, #12]	; (800577c <_SendPacket+0x2d4>)
 800576e:	2200      	movs	r2, #0
 8005770:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005772:	bf00      	nop
 8005774:	3728      	adds	r7, #40	; 0x28
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}
 800577a:	bf00      	nop
 800577c:	20002404 	.word	0x20002404
 8005780:	20001b44 	.word	0x20001b44

08005784 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8005784:	b580      	push	{r7, lr}
 8005786:	b086      	sub	sp, #24
 8005788:	af02      	add	r7, sp, #8
 800578a:	60f8      	str	r0, [r7, #12]
 800578c:	60b9      	str	r1, [r7, #8]
 800578e:	607a      	str	r2, [r7, #4]
 8005790:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005792:	2300      	movs	r3, #0
 8005794:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005798:	4917      	ldr	r1, [pc, #92]	; (80057f8 <SEGGER_SYSVIEW_Init+0x74>)
 800579a:	4818      	ldr	r0, [pc, #96]	; (80057fc <SEGGER_SYSVIEW_Init+0x78>)
 800579c:	f7ff fc96 	bl	80050cc <SEGGER_RTT_AllocUpBuffer>
 80057a0:	4603      	mov	r3, r0
 80057a2:	b2da      	uxtb	r2, r3
 80057a4:	4b16      	ldr	r3, [pc, #88]	; (8005800 <SEGGER_SYSVIEW_Init+0x7c>)
 80057a6:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80057a8:	4b15      	ldr	r3, [pc, #84]	; (8005800 <SEGGER_SYSVIEW_Init+0x7c>)
 80057aa:	785a      	ldrb	r2, [r3, #1]
 80057ac:	4b14      	ldr	r3, [pc, #80]	; (8005800 <SEGGER_SYSVIEW_Init+0x7c>)
 80057ae:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80057b0:	4b13      	ldr	r3, [pc, #76]	; (8005800 <SEGGER_SYSVIEW_Init+0x7c>)
 80057b2:	7e1b      	ldrb	r3, [r3, #24]
 80057b4:	4618      	mov	r0, r3
 80057b6:	2300      	movs	r3, #0
 80057b8:	9300      	str	r3, [sp, #0]
 80057ba:	2308      	movs	r3, #8
 80057bc:	4a11      	ldr	r2, [pc, #68]	; (8005804 <SEGGER_SYSVIEW_Init+0x80>)
 80057be:	490f      	ldr	r1, [pc, #60]	; (80057fc <SEGGER_SYSVIEW_Init+0x78>)
 80057c0:	f7ff fd08 	bl	80051d4 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80057c4:	4b0e      	ldr	r3, [pc, #56]	; (8005800 <SEGGER_SYSVIEW_Init+0x7c>)
 80057c6:	2200      	movs	r2, #0
 80057c8:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80057ca:	4b0f      	ldr	r3, [pc, #60]	; (8005808 <SEGGER_SYSVIEW_Init+0x84>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a0c      	ldr	r2, [pc, #48]	; (8005800 <SEGGER_SYSVIEW_Init+0x7c>)
 80057d0:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80057d2:	4a0b      	ldr	r2, [pc, #44]	; (8005800 <SEGGER_SYSVIEW_Init+0x7c>)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80057d8:	4a09      	ldr	r2, [pc, #36]	; (8005800 <SEGGER_SYSVIEW_Init+0x7c>)
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80057de:	4a08      	ldr	r2, [pc, #32]	; (8005800 <SEGGER_SYSVIEW_Init+0x7c>)
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80057e4:	4a06      	ldr	r2, [pc, #24]	; (8005800 <SEGGER_SYSVIEW_Init+0x7c>)
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80057ea:	4b05      	ldr	r3, [pc, #20]	; (8005800 <SEGGER_SYSVIEW_Init+0x7c>)
 80057ec:	2200      	movs	r2, #0
 80057ee:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80057f0:	bf00      	nop
 80057f2:	3710      	adds	r7, #16
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}
 80057f8:	20001ffc 	.word	0x20001ffc
 80057fc:	08006960 	.word	0x08006960
 8005800:	20002404 	.word	0x20002404
 8005804:	200023fc 	.word	0x200023fc
 8005808:	e0001004 	.word	0xe0001004

0800580c <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 800580c:	b480      	push	{r7}
 800580e:	b083      	sub	sp, #12
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005814:	4a04      	ldr	r2, [pc, #16]	; (8005828 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6113      	str	r3, [r2, #16]
}
 800581a:	bf00      	nop
 800581c:	370c      	adds	r7, #12
 800581e:	46bd      	mov	sp, r7
 8005820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005824:	4770      	bx	lr
 8005826:	bf00      	nop
 8005828:	20002404 	.word	0x20002404

0800582c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800582c:	b580      	push	{r7, lr}
 800582e:	b084      	sub	sp, #16
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005834:	f3ef 8311 	mrs	r3, BASEPRI
 8005838:	f04f 0120 	mov.w	r1, #32
 800583c:	f381 8811 	msr	BASEPRI, r1
 8005840:	60fb      	str	r3, [r7, #12]
 8005842:	4808      	ldr	r0, [pc, #32]	; (8005864 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005844:	f7ff fd42 	bl	80052cc <_PreparePacket>
 8005848:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800584a:	687a      	ldr	r2, [r7, #4]
 800584c:	68b9      	ldr	r1, [r7, #8]
 800584e:	68b8      	ldr	r0, [r7, #8]
 8005850:	f7ff fe2a 	bl	80054a8 <_SendPacket>
  RECORD_END();
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f383 8811 	msr	BASEPRI, r3
}
 800585a:	bf00      	nop
 800585c:	3710      	adds	r7, #16
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}
 8005862:	bf00      	nop
 8005864:	20002434 	.word	0x20002434

08005868 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005868:	b580      	push	{r7, lr}
 800586a:	b088      	sub	sp, #32
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
 8005870:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005872:	f3ef 8311 	mrs	r3, BASEPRI
 8005876:	f04f 0120 	mov.w	r1, #32
 800587a:	f381 8811 	msr	BASEPRI, r1
 800587e:	617b      	str	r3, [r7, #20]
 8005880:	4816      	ldr	r0, [pc, #88]	; (80058dc <SEGGER_SYSVIEW_RecordU32+0x74>)
 8005882:	f7ff fd23 	bl	80052cc <_PreparePacket>
 8005886:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	61fb      	str	r3, [r7, #28]
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	61bb      	str	r3, [r7, #24]
 8005894:	e00b      	b.n	80058ae <SEGGER_SYSVIEW_RecordU32+0x46>
 8005896:	69bb      	ldr	r3, [r7, #24]
 8005898:	b2da      	uxtb	r2, r3
 800589a:	69fb      	ldr	r3, [r7, #28]
 800589c:	1c59      	adds	r1, r3, #1
 800589e:	61f9      	str	r1, [r7, #28]
 80058a0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058a4:	b2d2      	uxtb	r2, r2
 80058a6:	701a      	strb	r2, [r3, #0]
 80058a8:	69bb      	ldr	r3, [r7, #24]
 80058aa:	09db      	lsrs	r3, r3, #7
 80058ac:	61bb      	str	r3, [r7, #24]
 80058ae:	69bb      	ldr	r3, [r7, #24]
 80058b0:	2b7f      	cmp	r3, #127	; 0x7f
 80058b2:	d8f0      	bhi.n	8005896 <SEGGER_SYSVIEW_RecordU32+0x2e>
 80058b4:	69fb      	ldr	r3, [r7, #28]
 80058b6:	1c5a      	adds	r2, r3, #1
 80058b8:	61fa      	str	r2, [r7, #28]
 80058ba:	69ba      	ldr	r2, [r7, #24]
 80058bc:	b2d2      	uxtb	r2, r2
 80058be:	701a      	strb	r2, [r3, #0]
 80058c0:	69fb      	ldr	r3, [r7, #28]
 80058c2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80058c4:	687a      	ldr	r2, [r7, #4]
 80058c6:	68f9      	ldr	r1, [r7, #12]
 80058c8:	6938      	ldr	r0, [r7, #16]
 80058ca:	f7ff fded 	bl	80054a8 <_SendPacket>
  RECORD_END();
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	f383 8811 	msr	BASEPRI, r3
}
 80058d4:	bf00      	nop
 80058d6:	3720      	adds	r7, #32
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}
 80058dc:	20002434 	.word	0x20002434

080058e0 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b08c      	sub	sp, #48	; 0x30
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	60f8      	str	r0, [r7, #12]
 80058e8:	60b9      	str	r1, [r7, #8]
 80058ea:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80058ec:	f3ef 8311 	mrs	r3, BASEPRI
 80058f0:	f04f 0120 	mov.w	r1, #32
 80058f4:	f381 8811 	msr	BASEPRI, r1
 80058f8:	61fb      	str	r3, [r7, #28]
 80058fa:	4825      	ldr	r0, [pc, #148]	; (8005990 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80058fc:	f7ff fce6 	bl	80052cc <_PreparePacket>
 8005900:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005902:	69bb      	ldr	r3, [r7, #24]
 8005904:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	62fb      	str	r3, [r7, #44]	; 0x2c
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	62bb      	str	r3, [r7, #40]	; 0x28
 800590e:	e00b      	b.n	8005928 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005912:	b2da      	uxtb	r2, r3
 8005914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005916:	1c59      	adds	r1, r3, #1
 8005918:	62f9      	str	r1, [r7, #44]	; 0x2c
 800591a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800591e:	b2d2      	uxtb	r2, r2
 8005920:	701a      	strb	r2, [r3, #0]
 8005922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005924:	09db      	lsrs	r3, r3, #7
 8005926:	62bb      	str	r3, [r7, #40]	; 0x28
 8005928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800592a:	2b7f      	cmp	r3, #127	; 0x7f
 800592c:	d8f0      	bhi.n	8005910 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800592e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005930:	1c5a      	adds	r2, r3, #1
 8005932:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005934:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005936:	b2d2      	uxtb	r2, r2
 8005938:	701a      	strb	r2, [r3, #0]
 800593a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800593c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	627b      	str	r3, [r7, #36]	; 0x24
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	623b      	str	r3, [r7, #32]
 8005946:	e00b      	b.n	8005960 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8005948:	6a3b      	ldr	r3, [r7, #32]
 800594a:	b2da      	uxtb	r2, r3
 800594c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800594e:	1c59      	adds	r1, r3, #1
 8005950:	6279      	str	r1, [r7, #36]	; 0x24
 8005952:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005956:	b2d2      	uxtb	r2, r2
 8005958:	701a      	strb	r2, [r3, #0]
 800595a:	6a3b      	ldr	r3, [r7, #32]
 800595c:	09db      	lsrs	r3, r3, #7
 800595e:	623b      	str	r3, [r7, #32]
 8005960:	6a3b      	ldr	r3, [r7, #32]
 8005962:	2b7f      	cmp	r3, #127	; 0x7f
 8005964:	d8f0      	bhi.n	8005948 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8005966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005968:	1c5a      	adds	r2, r3, #1
 800596a:	627a      	str	r2, [r7, #36]	; 0x24
 800596c:	6a3a      	ldr	r2, [r7, #32]
 800596e:	b2d2      	uxtb	r2, r2
 8005970:	701a      	strb	r2, [r3, #0]
 8005972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005974:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005976:	68fa      	ldr	r2, [r7, #12]
 8005978:	6979      	ldr	r1, [r7, #20]
 800597a:	69b8      	ldr	r0, [r7, #24]
 800597c:	f7ff fd94 	bl	80054a8 <_SendPacket>
  RECORD_END();
 8005980:	69fb      	ldr	r3, [r7, #28]
 8005982:	f383 8811 	msr	BASEPRI, r3
}
 8005986:	bf00      	nop
 8005988:	3730      	adds	r7, #48	; 0x30
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}
 800598e:	bf00      	nop
 8005990:	20002434 	.word	0x20002434

08005994 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8005994:	b580      	push	{r7, lr}
 8005996:	b08e      	sub	sp, #56	; 0x38
 8005998:	af00      	add	r7, sp, #0
 800599a:	60f8      	str	r0, [r7, #12]
 800599c:	60b9      	str	r1, [r7, #8]
 800599e:	607a      	str	r2, [r7, #4]
 80059a0:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 80059a2:	f3ef 8311 	mrs	r3, BASEPRI
 80059a6:	f04f 0120 	mov.w	r1, #32
 80059aa:	f381 8811 	msr	BASEPRI, r1
 80059ae:	61fb      	str	r3, [r7, #28]
 80059b0:	4832      	ldr	r0, [pc, #200]	; (8005a7c <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 80059b2:	f7ff fc8b 	bl	80052cc <_PreparePacket>
 80059b6:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80059b8:	69bb      	ldr	r3, [r7, #24]
 80059ba:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	637b      	str	r3, [r7, #52]	; 0x34
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	633b      	str	r3, [r7, #48]	; 0x30
 80059c4:	e00b      	b.n	80059de <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 80059c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059c8:	b2da      	uxtb	r2, r3
 80059ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059cc:	1c59      	adds	r1, r3, #1
 80059ce:	6379      	str	r1, [r7, #52]	; 0x34
 80059d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059d4:	b2d2      	uxtb	r2, r2
 80059d6:	701a      	strb	r2, [r3, #0]
 80059d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059da:	09db      	lsrs	r3, r3, #7
 80059dc:	633b      	str	r3, [r7, #48]	; 0x30
 80059de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059e0:	2b7f      	cmp	r3, #127	; 0x7f
 80059e2:	d8f0      	bhi.n	80059c6 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 80059e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059e6:	1c5a      	adds	r2, r3, #1
 80059e8:	637a      	str	r2, [r7, #52]	; 0x34
 80059ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059ec:	b2d2      	uxtb	r2, r2
 80059ee:	701a      	strb	r2, [r3, #0]
 80059f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059f2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80059fc:	e00b      	b.n	8005a16 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 80059fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a00:	b2da      	uxtb	r2, r3
 8005a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a04:	1c59      	adds	r1, r3, #1
 8005a06:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005a08:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a0c:	b2d2      	uxtb	r2, r2
 8005a0e:	701a      	strb	r2, [r3, #0]
 8005a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a12:	09db      	lsrs	r3, r3, #7
 8005a14:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a18:	2b7f      	cmp	r3, #127	; 0x7f
 8005a1a:	d8f0      	bhi.n	80059fe <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8005a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a1e:	1c5a      	adds	r2, r3, #1
 8005a20:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a24:	b2d2      	uxtb	r2, r2
 8005a26:	701a      	strb	r2, [r3, #0]
 8005a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a2a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	627b      	str	r3, [r7, #36]	; 0x24
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	623b      	str	r3, [r7, #32]
 8005a34:	e00b      	b.n	8005a4e <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8005a36:	6a3b      	ldr	r3, [r7, #32]
 8005a38:	b2da      	uxtb	r2, r3
 8005a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a3c:	1c59      	adds	r1, r3, #1
 8005a3e:	6279      	str	r1, [r7, #36]	; 0x24
 8005a40:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a44:	b2d2      	uxtb	r2, r2
 8005a46:	701a      	strb	r2, [r3, #0]
 8005a48:	6a3b      	ldr	r3, [r7, #32]
 8005a4a:	09db      	lsrs	r3, r3, #7
 8005a4c:	623b      	str	r3, [r7, #32]
 8005a4e:	6a3b      	ldr	r3, [r7, #32]
 8005a50:	2b7f      	cmp	r3, #127	; 0x7f
 8005a52:	d8f0      	bhi.n	8005a36 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8005a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a56:	1c5a      	adds	r2, r3, #1
 8005a58:	627a      	str	r2, [r7, #36]	; 0x24
 8005a5a:	6a3a      	ldr	r2, [r7, #32]
 8005a5c:	b2d2      	uxtb	r2, r2
 8005a5e:	701a      	strb	r2, [r3, #0]
 8005a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a62:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005a64:	68fa      	ldr	r2, [r7, #12]
 8005a66:	6979      	ldr	r1, [r7, #20]
 8005a68:	69b8      	ldr	r0, [r7, #24]
 8005a6a:	f7ff fd1d 	bl	80054a8 <_SendPacket>
  RECORD_END();
 8005a6e:	69fb      	ldr	r3, [r7, #28]
 8005a70:	f383 8811 	msr	BASEPRI, r3
}
 8005a74:	bf00      	nop
 8005a76:	3738      	adds	r7, #56	; 0x38
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}
 8005a7c:	20002434 	.word	0x20002434

08005a80 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b090      	sub	sp, #64	; 0x40
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	60f8      	str	r0, [r7, #12]
 8005a88:	60b9      	str	r1, [r7, #8]
 8005a8a:	607a      	str	r2, [r7, #4]
 8005a8c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005a8e:	f3ef 8311 	mrs	r3, BASEPRI
 8005a92:	f04f 0120 	mov.w	r1, #32
 8005a96:	f381 8811 	msr	BASEPRI, r1
 8005a9a:	61fb      	str	r3, [r7, #28]
 8005a9c:	4840      	ldr	r0, [pc, #256]	; (8005ba0 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8005a9e:	f7ff fc15 	bl	80052cc <_PreparePacket>
 8005aa2:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005aa4:	69bb      	ldr	r3, [r7, #24]
 8005aa6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ab0:	e00b      	b.n	8005aca <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8005ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ab4:	b2da      	uxtb	r2, r3
 8005ab6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ab8:	1c59      	adds	r1, r3, #1
 8005aba:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005abc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ac0:	b2d2      	uxtb	r2, r2
 8005ac2:	701a      	strb	r2, [r3, #0]
 8005ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ac6:	09db      	lsrs	r3, r3, #7
 8005ac8:	63bb      	str	r3, [r7, #56]	; 0x38
 8005aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005acc:	2b7f      	cmp	r3, #127	; 0x7f
 8005ace:	d8f0      	bhi.n	8005ab2 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8005ad0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ad2:	1c5a      	adds	r2, r3, #1
 8005ad4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005ad6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ad8:	b2d2      	uxtb	r2, r2
 8005ada:	701a      	strb	r2, [r3, #0]
 8005adc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ade:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	637b      	str	r3, [r7, #52]	; 0x34
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	633b      	str	r3, [r7, #48]	; 0x30
 8005ae8:	e00b      	b.n	8005b02 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8005aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aec:	b2da      	uxtb	r2, r3
 8005aee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005af0:	1c59      	adds	r1, r3, #1
 8005af2:	6379      	str	r1, [r7, #52]	; 0x34
 8005af4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005af8:	b2d2      	uxtb	r2, r2
 8005afa:	701a      	strb	r2, [r3, #0]
 8005afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005afe:	09db      	lsrs	r3, r3, #7
 8005b00:	633b      	str	r3, [r7, #48]	; 0x30
 8005b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b04:	2b7f      	cmp	r3, #127	; 0x7f
 8005b06:	d8f0      	bhi.n	8005aea <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8005b08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b0a:	1c5a      	adds	r2, r3, #1
 8005b0c:	637a      	str	r2, [r7, #52]	; 0x34
 8005b0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b10:	b2d2      	uxtb	r2, r2
 8005b12:	701a      	strb	r2, [r3, #0]
 8005b14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b16:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b20:	e00b      	b.n	8005b3a <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8005b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b24:	b2da      	uxtb	r2, r3
 8005b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b28:	1c59      	adds	r1, r3, #1
 8005b2a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005b2c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b30:	b2d2      	uxtb	r2, r2
 8005b32:	701a      	strb	r2, [r3, #0]
 8005b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b36:	09db      	lsrs	r3, r3, #7
 8005b38:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b3c:	2b7f      	cmp	r3, #127	; 0x7f
 8005b3e:	d8f0      	bhi.n	8005b22 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8005b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b42:	1c5a      	adds	r2, r3, #1
 8005b44:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b48:	b2d2      	uxtb	r2, r2
 8005b4a:	701a      	strb	r2, [r3, #0]
 8005b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b4e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	627b      	str	r3, [r7, #36]	; 0x24
 8005b54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b56:	623b      	str	r3, [r7, #32]
 8005b58:	e00b      	b.n	8005b72 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8005b5a:	6a3b      	ldr	r3, [r7, #32]
 8005b5c:	b2da      	uxtb	r2, r3
 8005b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b60:	1c59      	adds	r1, r3, #1
 8005b62:	6279      	str	r1, [r7, #36]	; 0x24
 8005b64:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b68:	b2d2      	uxtb	r2, r2
 8005b6a:	701a      	strb	r2, [r3, #0]
 8005b6c:	6a3b      	ldr	r3, [r7, #32]
 8005b6e:	09db      	lsrs	r3, r3, #7
 8005b70:	623b      	str	r3, [r7, #32]
 8005b72:	6a3b      	ldr	r3, [r7, #32]
 8005b74:	2b7f      	cmp	r3, #127	; 0x7f
 8005b76:	d8f0      	bhi.n	8005b5a <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8005b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7a:	1c5a      	adds	r2, r3, #1
 8005b7c:	627a      	str	r2, [r7, #36]	; 0x24
 8005b7e:	6a3a      	ldr	r2, [r7, #32]
 8005b80:	b2d2      	uxtb	r2, r2
 8005b82:	701a      	strb	r2, [r3, #0]
 8005b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b86:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005b88:	68fa      	ldr	r2, [r7, #12]
 8005b8a:	6979      	ldr	r1, [r7, #20]
 8005b8c:	69b8      	ldr	r0, [r7, #24]
 8005b8e:	f7ff fc8b 	bl	80054a8 <_SendPacket>
  RECORD_END();
 8005b92:	69fb      	ldr	r3, [r7, #28]
 8005b94:	f383 8811 	msr	BASEPRI, r3
}
 8005b98:	bf00      	nop
 8005b9a:	3740      	adds	r7, #64	; 0x40
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}
 8005ba0:	20002434 	.word	0x20002434

08005ba4 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b08c      	sub	sp, #48	; 0x30
 8005ba8:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8005baa:	4b58      	ldr	r3, [pc, #352]	; (8005d0c <SEGGER_SYSVIEW_Start+0x168>)
 8005bac:	2201      	movs	r2, #1
 8005bae:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005bb0:	f3ef 8311 	mrs	r3, BASEPRI
 8005bb4:	f04f 0120 	mov.w	r1, #32
 8005bb8:	f381 8811 	msr	BASEPRI, r1
 8005bbc:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8005bbe:	4b53      	ldr	r3, [pc, #332]	; (8005d0c <SEGGER_SYSVIEW_Start+0x168>)
 8005bc0:	785b      	ldrb	r3, [r3, #1]
 8005bc2:	220a      	movs	r2, #10
 8005bc4:	4952      	ldr	r1, [pc, #328]	; (8005d10 <SEGGER_SYSVIEW_Start+0x16c>)
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f7fa fb02 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8005bd2:	200a      	movs	r0, #10
 8005bd4:	f7ff fe2a 	bl	800582c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005bd8:	f3ef 8311 	mrs	r3, BASEPRI
 8005bdc:	f04f 0120 	mov.w	r1, #32
 8005be0:	f381 8811 	msr	BASEPRI, r1
 8005be4:	60bb      	str	r3, [r7, #8]
 8005be6:	484b      	ldr	r0, [pc, #300]	; (8005d14 <SEGGER_SYSVIEW_Start+0x170>)
 8005be8:	f7ff fb70 	bl	80052cc <_PreparePacket>
 8005bec:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005bf6:	4b45      	ldr	r3, [pc, #276]	; (8005d0c <SEGGER_SYSVIEW_Start+0x168>)
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	62bb      	str	r3, [r7, #40]	; 0x28
 8005bfc:	e00b      	b.n	8005c16 <SEGGER_SYSVIEW_Start+0x72>
 8005bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c00:	b2da      	uxtb	r2, r3
 8005c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c04:	1c59      	adds	r1, r3, #1
 8005c06:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005c08:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c0c:	b2d2      	uxtb	r2, r2
 8005c0e:	701a      	strb	r2, [r3, #0]
 8005c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c12:	09db      	lsrs	r3, r3, #7
 8005c14:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c18:	2b7f      	cmp	r3, #127	; 0x7f
 8005c1a:	d8f0      	bhi.n	8005bfe <SEGGER_SYSVIEW_Start+0x5a>
 8005c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c1e:	1c5a      	adds	r2, r3, #1
 8005c20:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c24:	b2d2      	uxtb	r2, r2
 8005c26:	701a      	strb	r2, [r3, #0]
 8005c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c2a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	627b      	str	r3, [r7, #36]	; 0x24
 8005c30:	4b36      	ldr	r3, [pc, #216]	; (8005d0c <SEGGER_SYSVIEW_Start+0x168>)
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	623b      	str	r3, [r7, #32]
 8005c36:	e00b      	b.n	8005c50 <SEGGER_SYSVIEW_Start+0xac>
 8005c38:	6a3b      	ldr	r3, [r7, #32]
 8005c3a:	b2da      	uxtb	r2, r3
 8005c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3e:	1c59      	adds	r1, r3, #1
 8005c40:	6279      	str	r1, [r7, #36]	; 0x24
 8005c42:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c46:	b2d2      	uxtb	r2, r2
 8005c48:	701a      	strb	r2, [r3, #0]
 8005c4a:	6a3b      	ldr	r3, [r7, #32]
 8005c4c:	09db      	lsrs	r3, r3, #7
 8005c4e:	623b      	str	r3, [r7, #32]
 8005c50:	6a3b      	ldr	r3, [r7, #32]
 8005c52:	2b7f      	cmp	r3, #127	; 0x7f
 8005c54:	d8f0      	bhi.n	8005c38 <SEGGER_SYSVIEW_Start+0x94>
 8005c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c58:	1c5a      	adds	r2, r3, #1
 8005c5a:	627a      	str	r2, [r7, #36]	; 0x24
 8005c5c:	6a3a      	ldr	r2, [r7, #32]
 8005c5e:	b2d2      	uxtb	r2, r2
 8005c60:	701a      	strb	r2, [r3, #0]
 8005c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c64:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	61fb      	str	r3, [r7, #28]
 8005c6a:	4b28      	ldr	r3, [pc, #160]	; (8005d0c <SEGGER_SYSVIEW_Start+0x168>)
 8005c6c:	691b      	ldr	r3, [r3, #16]
 8005c6e:	61bb      	str	r3, [r7, #24]
 8005c70:	e00b      	b.n	8005c8a <SEGGER_SYSVIEW_Start+0xe6>
 8005c72:	69bb      	ldr	r3, [r7, #24]
 8005c74:	b2da      	uxtb	r2, r3
 8005c76:	69fb      	ldr	r3, [r7, #28]
 8005c78:	1c59      	adds	r1, r3, #1
 8005c7a:	61f9      	str	r1, [r7, #28]
 8005c7c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c80:	b2d2      	uxtb	r2, r2
 8005c82:	701a      	strb	r2, [r3, #0]
 8005c84:	69bb      	ldr	r3, [r7, #24]
 8005c86:	09db      	lsrs	r3, r3, #7
 8005c88:	61bb      	str	r3, [r7, #24]
 8005c8a:	69bb      	ldr	r3, [r7, #24]
 8005c8c:	2b7f      	cmp	r3, #127	; 0x7f
 8005c8e:	d8f0      	bhi.n	8005c72 <SEGGER_SYSVIEW_Start+0xce>
 8005c90:	69fb      	ldr	r3, [r7, #28]
 8005c92:	1c5a      	adds	r2, r3, #1
 8005c94:	61fa      	str	r2, [r7, #28]
 8005c96:	69ba      	ldr	r2, [r7, #24]
 8005c98:	b2d2      	uxtb	r2, r2
 8005c9a:	701a      	strb	r2, [r3, #0]
 8005c9c:	69fb      	ldr	r3, [r7, #28]
 8005c9e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	617b      	str	r3, [r7, #20]
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	613b      	str	r3, [r7, #16]
 8005ca8:	e00b      	b.n	8005cc2 <SEGGER_SYSVIEW_Start+0x11e>
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	b2da      	uxtb	r2, r3
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	1c59      	adds	r1, r3, #1
 8005cb2:	6179      	str	r1, [r7, #20]
 8005cb4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005cb8:	b2d2      	uxtb	r2, r2
 8005cba:	701a      	strb	r2, [r3, #0]
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	09db      	lsrs	r3, r3, #7
 8005cc0:	613b      	str	r3, [r7, #16]
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	2b7f      	cmp	r3, #127	; 0x7f
 8005cc6:	d8f0      	bhi.n	8005caa <SEGGER_SYSVIEW_Start+0x106>
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	1c5a      	adds	r2, r3, #1
 8005ccc:	617a      	str	r2, [r7, #20]
 8005cce:	693a      	ldr	r2, [r7, #16]
 8005cd0:	b2d2      	uxtb	r2, r2
 8005cd2:	701a      	strb	r2, [r3, #0]
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005cd8:	2218      	movs	r2, #24
 8005cda:	6839      	ldr	r1, [r7, #0]
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f7ff fbe3 	bl	80054a8 <_SendPacket>
      RECORD_END();
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005ce8:	4b08      	ldr	r3, [pc, #32]	; (8005d0c <SEGGER_SYSVIEW_Start+0x168>)
 8005cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d002      	beq.n	8005cf6 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005cf0:	4b06      	ldr	r3, [pc, #24]	; (8005d0c <SEGGER_SYSVIEW_Start+0x168>)
 8005cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf4:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8005cf6:	f000 f9eb 	bl	80060d0 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8005cfa:	f000 f9b1 	bl	8006060 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8005cfe:	f000 fc11 	bl	8006524 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8005d02:	bf00      	nop
 8005d04:	3730      	adds	r7, #48	; 0x30
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}
 8005d0a:	bf00      	nop
 8005d0c:	20002404 	.word	0x20002404
 8005d10:	080069b4 	.word	0x080069b4
 8005d14:	20002434 	.word	0x20002434

08005d18 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b082      	sub	sp, #8
 8005d1c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005d1e:	f3ef 8311 	mrs	r3, BASEPRI
 8005d22:	f04f 0120 	mov.w	r1, #32
 8005d26:	f381 8811 	msr	BASEPRI, r1
 8005d2a:	607b      	str	r3, [r7, #4]
 8005d2c:	480b      	ldr	r0, [pc, #44]	; (8005d5c <SEGGER_SYSVIEW_Stop+0x44>)
 8005d2e:	f7ff facd 	bl	80052cc <_PreparePacket>
 8005d32:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8005d34:	4b0a      	ldr	r3, [pc, #40]	; (8005d60 <SEGGER_SYSVIEW_Stop+0x48>)
 8005d36:	781b      	ldrb	r3, [r3, #0]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d007      	beq.n	8005d4c <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8005d3c:	220b      	movs	r2, #11
 8005d3e:	6839      	ldr	r1, [r7, #0]
 8005d40:	6838      	ldr	r0, [r7, #0]
 8005d42:	f7ff fbb1 	bl	80054a8 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8005d46:	4b06      	ldr	r3, [pc, #24]	; (8005d60 <SEGGER_SYSVIEW_Stop+0x48>)
 8005d48:	2200      	movs	r2, #0
 8005d4a:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f383 8811 	msr	BASEPRI, r3
}
 8005d52:	bf00      	nop
 8005d54:	3708      	adds	r7, #8
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}
 8005d5a:	bf00      	nop
 8005d5c:	20002434 	.word	0x20002434
 8005d60:	20002404 	.word	0x20002404

08005d64 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b08c      	sub	sp, #48	; 0x30
 8005d68:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005d6a:	f3ef 8311 	mrs	r3, BASEPRI
 8005d6e:	f04f 0120 	mov.w	r1, #32
 8005d72:	f381 8811 	msr	BASEPRI, r1
 8005d76:	60fb      	str	r3, [r7, #12]
 8005d78:	4845      	ldr	r0, [pc, #276]	; (8005e90 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8005d7a:	f7ff faa7 	bl	80052cc <_PreparePacket>
 8005d7e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d88:	4b42      	ldr	r3, [pc, #264]	; (8005e94 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d8e:	e00b      	b.n	8005da8 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8005d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d92:	b2da      	uxtb	r2, r3
 8005d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d96:	1c59      	adds	r1, r3, #1
 8005d98:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005d9a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d9e:	b2d2      	uxtb	r2, r2
 8005da0:	701a      	strb	r2, [r3, #0]
 8005da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005da4:	09db      	lsrs	r3, r3, #7
 8005da6:	62bb      	str	r3, [r7, #40]	; 0x28
 8005da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005daa:	2b7f      	cmp	r3, #127	; 0x7f
 8005dac:	d8f0      	bhi.n	8005d90 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8005dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005db0:	1c5a      	adds	r2, r3, #1
 8005db2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005db4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005db6:	b2d2      	uxtb	r2, r2
 8005db8:	701a      	strb	r2, [r3, #0]
 8005dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dbc:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	627b      	str	r3, [r7, #36]	; 0x24
 8005dc2:	4b34      	ldr	r3, [pc, #208]	; (8005e94 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005dc4:	689b      	ldr	r3, [r3, #8]
 8005dc6:	623b      	str	r3, [r7, #32]
 8005dc8:	e00b      	b.n	8005de2 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8005dca:	6a3b      	ldr	r3, [r7, #32]
 8005dcc:	b2da      	uxtb	r2, r3
 8005dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd0:	1c59      	adds	r1, r3, #1
 8005dd2:	6279      	str	r1, [r7, #36]	; 0x24
 8005dd4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005dd8:	b2d2      	uxtb	r2, r2
 8005dda:	701a      	strb	r2, [r3, #0]
 8005ddc:	6a3b      	ldr	r3, [r7, #32]
 8005dde:	09db      	lsrs	r3, r3, #7
 8005de0:	623b      	str	r3, [r7, #32]
 8005de2:	6a3b      	ldr	r3, [r7, #32]
 8005de4:	2b7f      	cmp	r3, #127	; 0x7f
 8005de6:	d8f0      	bhi.n	8005dca <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dea:	1c5a      	adds	r2, r3, #1
 8005dec:	627a      	str	r2, [r7, #36]	; 0x24
 8005dee:	6a3a      	ldr	r2, [r7, #32]
 8005df0:	b2d2      	uxtb	r2, r2
 8005df2:	701a      	strb	r2, [r3, #0]
 8005df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	61fb      	str	r3, [r7, #28]
 8005dfc:	4b25      	ldr	r3, [pc, #148]	; (8005e94 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005dfe:	691b      	ldr	r3, [r3, #16]
 8005e00:	61bb      	str	r3, [r7, #24]
 8005e02:	e00b      	b.n	8005e1c <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005e04:	69bb      	ldr	r3, [r7, #24]
 8005e06:	b2da      	uxtb	r2, r3
 8005e08:	69fb      	ldr	r3, [r7, #28]
 8005e0a:	1c59      	adds	r1, r3, #1
 8005e0c:	61f9      	str	r1, [r7, #28]
 8005e0e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e12:	b2d2      	uxtb	r2, r2
 8005e14:	701a      	strb	r2, [r3, #0]
 8005e16:	69bb      	ldr	r3, [r7, #24]
 8005e18:	09db      	lsrs	r3, r3, #7
 8005e1a:	61bb      	str	r3, [r7, #24]
 8005e1c:	69bb      	ldr	r3, [r7, #24]
 8005e1e:	2b7f      	cmp	r3, #127	; 0x7f
 8005e20:	d8f0      	bhi.n	8005e04 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8005e22:	69fb      	ldr	r3, [r7, #28]
 8005e24:	1c5a      	adds	r2, r3, #1
 8005e26:	61fa      	str	r2, [r7, #28]
 8005e28:	69ba      	ldr	r2, [r7, #24]
 8005e2a:	b2d2      	uxtb	r2, r2
 8005e2c:	701a      	strb	r2, [r3, #0]
 8005e2e:	69fb      	ldr	r3, [r7, #28]
 8005e30:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	617b      	str	r3, [r7, #20]
 8005e36:	2300      	movs	r3, #0
 8005e38:	613b      	str	r3, [r7, #16]
 8005e3a:	e00b      	b.n	8005e54 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	b2da      	uxtb	r2, r3
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	1c59      	adds	r1, r3, #1
 8005e44:	6179      	str	r1, [r7, #20]
 8005e46:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e4a:	b2d2      	uxtb	r2, r2
 8005e4c:	701a      	strb	r2, [r3, #0]
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	09db      	lsrs	r3, r3, #7
 8005e52:	613b      	str	r3, [r7, #16]
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	2b7f      	cmp	r3, #127	; 0x7f
 8005e58:	d8f0      	bhi.n	8005e3c <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	1c5a      	adds	r2, r3, #1
 8005e5e:	617a      	str	r2, [r7, #20]
 8005e60:	693a      	ldr	r2, [r7, #16]
 8005e62:	b2d2      	uxtb	r2, r2
 8005e64:	701a      	strb	r2, [r3, #0]
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005e6a:	2218      	movs	r2, #24
 8005e6c:	6879      	ldr	r1, [r7, #4]
 8005e6e:	68b8      	ldr	r0, [r7, #8]
 8005e70:	f7ff fb1a 	bl	80054a8 <_SendPacket>
  RECORD_END();
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005e7a:	4b06      	ldr	r3, [pc, #24]	; (8005e94 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d002      	beq.n	8005e88 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8005e82:	4b04      	ldr	r3, [pc, #16]	; (8005e94 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e86:	4798      	blx	r3
  }
}
 8005e88:	bf00      	nop
 8005e8a:	3730      	adds	r7, #48	; 0x30
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}
 8005e90:	20002434 	.word	0x20002434
 8005e94:	20002404 	.word	0x20002404

08005e98 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b092      	sub	sp, #72	; 0x48
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005ea0:	f3ef 8311 	mrs	r3, BASEPRI
 8005ea4:	f04f 0120 	mov.w	r1, #32
 8005ea8:	f381 8811 	msr	BASEPRI, r1
 8005eac:	617b      	str	r3, [r7, #20]
 8005eae:	486a      	ldr	r0, [pc, #424]	; (8006058 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005eb0:	f7ff fa0c 	bl	80052cc <_PreparePacket>
 8005eb4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	647b      	str	r3, [r7, #68]	; 0x44
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681a      	ldr	r2, [r3, #0]
 8005ec2:	4b66      	ldr	r3, [pc, #408]	; (800605c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005ec4:	691b      	ldr	r3, [r3, #16]
 8005ec6:	1ad3      	subs	r3, r2, r3
 8005ec8:	643b      	str	r3, [r7, #64]	; 0x40
 8005eca:	e00b      	b.n	8005ee4 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005ecc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ece:	b2da      	uxtb	r2, r3
 8005ed0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ed2:	1c59      	adds	r1, r3, #1
 8005ed4:	6479      	str	r1, [r7, #68]	; 0x44
 8005ed6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005eda:	b2d2      	uxtb	r2, r2
 8005edc:	701a      	strb	r2, [r3, #0]
 8005ede:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ee0:	09db      	lsrs	r3, r3, #7
 8005ee2:	643b      	str	r3, [r7, #64]	; 0x40
 8005ee4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ee6:	2b7f      	cmp	r3, #127	; 0x7f
 8005ee8:	d8f0      	bhi.n	8005ecc <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8005eea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005eec:	1c5a      	adds	r2, r3, #1
 8005eee:	647a      	str	r2, [r7, #68]	; 0x44
 8005ef0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005ef2:	b2d2      	uxtb	r2, r2
 8005ef4:	701a      	strb	r2, [r3, #0]
 8005ef6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ef8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	689b      	ldr	r3, [r3, #8]
 8005f02:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f04:	e00b      	b.n	8005f1e <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8005f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f08:	b2da      	uxtb	r2, r3
 8005f0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f0c:	1c59      	adds	r1, r3, #1
 8005f0e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005f10:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f14:	b2d2      	uxtb	r2, r2
 8005f16:	701a      	strb	r2, [r3, #0]
 8005f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f1a:	09db      	lsrs	r3, r3, #7
 8005f1c:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f20:	2b7f      	cmp	r3, #127	; 0x7f
 8005f22:	d8f0      	bhi.n	8005f06 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8005f24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f26:	1c5a      	adds	r2, r3, #1
 8005f28:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005f2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f2c:	b2d2      	uxtb	r2, r2
 8005f2e:	701a      	strb	r2, [r3, #0]
 8005f30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f32:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	2220      	movs	r2, #32
 8005f3a:	4619      	mov	r1, r3
 8005f3c:	68f8      	ldr	r0, [r7, #12]
 8005f3e:	f7ff f995 	bl	800526c <_EncodeStr>
 8005f42:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8005f44:	2209      	movs	r2, #9
 8005f46:	68f9      	ldr	r1, [r7, #12]
 8005f48:	6938      	ldr	r0, [r7, #16]
 8005f4a:	f7ff faad 	bl	80054a8 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	637b      	str	r3, [r7, #52]	; 0x34
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681a      	ldr	r2, [r3, #0]
 8005f5a:	4b40      	ldr	r3, [pc, #256]	; (800605c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005f5c:	691b      	ldr	r3, [r3, #16]
 8005f5e:	1ad3      	subs	r3, r2, r3
 8005f60:	633b      	str	r3, [r7, #48]	; 0x30
 8005f62:	e00b      	b.n	8005f7c <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8005f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f66:	b2da      	uxtb	r2, r3
 8005f68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f6a:	1c59      	adds	r1, r3, #1
 8005f6c:	6379      	str	r1, [r7, #52]	; 0x34
 8005f6e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f72:	b2d2      	uxtb	r2, r2
 8005f74:	701a      	strb	r2, [r3, #0]
 8005f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f78:	09db      	lsrs	r3, r3, #7
 8005f7a:	633b      	str	r3, [r7, #48]	; 0x30
 8005f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f7e:	2b7f      	cmp	r3, #127	; 0x7f
 8005f80:	d8f0      	bhi.n	8005f64 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8005f82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f84:	1c5a      	adds	r2, r3, #1
 8005f86:	637a      	str	r2, [r7, #52]	; 0x34
 8005f88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f8a:	b2d2      	uxtb	r2, r2
 8005f8c:	701a      	strb	r2, [r3, #0]
 8005f8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f90:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	68db      	ldr	r3, [r3, #12]
 8005f9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f9c:	e00b      	b.n	8005fb6 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8005f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fa0:	b2da      	uxtb	r2, r3
 8005fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fa4:	1c59      	adds	r1, r3, #1
 8005fa6:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005fa8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005fac:	b2d2      	uxtb	r2, r2
 8005fae:	701a      	strb	r2, [r3, #0]
 8005fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fb2:	09db      	lsrs	r3, r3, #7
 8005fb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fb8:	2b7f      	cmp	r3, #127	; 0x7f
 8005fba:	d8f0      	bhi.n	8005f9e <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fbe:	1c5a      	adds	r2, r3, #1
 8005fc0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005fc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005fc4:	b2d2      	uxtb	r2, r2
 8005fc6:	701a      	strb	r2, [r3, #0]
 8005fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fca:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	627b      	str	r3, [r7, #36]	; 0x24
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	691b      	ldr	r3, [r3, #16]
 8005fd4:	623b      	str	r3, [r7, #32]
 8005fd6:	e00b      	b.n	8005ff0 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8005fd8:	6a3b      	ldr	r3, [r7, #32]
 8005fda:	b2da      	uxtb	r2, r3
 8005fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fde:	1c59      	adds	r1, r3, #1
 8005fe0:	6279      	str	r1, [r7, #36]	; 0x24
 8005fe2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005fe6:	b2d2      	uxtb	r2, r2
 8005fe8:	701a      	strb	r2, [r3, #0]
 8005fea:	6a3b      	ldr	r3, [r7, #32]
 8005fec:	09db      	lsrs	r3, r3, #7
 8005fee:	623b      	str	r3, [r7, #32]
 8005ff0:	6a3b      	ldr	r3, [r7, #32]
 8005ff2:	2b7f      	cmp	r3, #127	; 0x7f
 8005ff4:	d8f0      	bhi.n	8005fd8 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8005ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff8:	1c5a      	adds	r2, r3, #1
 8005ffa:	627a      	str	r2, [r7, #36]	; 0x24
 8005ffc:	6a3a      	ldr	r2, [r7, #32]
 8005ffe:	b2d2      	uxtb	r2, r2
 8006000:	701a      	strb	r2, [r3, #0]
 8006002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006004:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	61fb      	str	r3, [r7, #28]
 800600a:	2300      	movs	r3, #0
 800600c:	61bb      	str	r3, [r7, #24]
 800600e:	e00b      	b.n	8006028 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8006010:	69bb      	ldr	r3, [r7, #24]
 8006012:	b2da      	uxtb	r2, r3
 8006014:	69fb      	ldr	r3, [r7, #28]
 8006016:	1c59      	adds	r1, r3, #1
 8006018:	61f9      	str	r1, [r7, #28]
 800601a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800601e:	b2d2      	uxtb	r2, r2
 8006020:	701a      	strb	r2, [r3, #0]
 8006022:	69bb      	ldr	r3, [r7, #24]
 8006024:	09db      	lsrs	r3, r3, #7
 8006026:	61bb      	str	r3, [r7, #24]
 8006028:	69bb      	ldr	r3, [r7, #24]
 800602a:	2b7f      	cmp	r3, #127	; 0x7f
 800602c:	d8f0      	bhi.n	8006010 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800602e:	69fb      	ldr	r3, [r7, #28]
 8006030:	1c5a      	adds	r2, r3, #1
 8006032:	61fa      	str	r2, [r7, #28]
 8006034:	69ba      	ldr	r2, [r7, #24]
 8006036:	b2d2      	uxtb	r2, r2
 8006038:	701a      	strb	r2, [r3, #0]
 800603a:	69fb      	ldr	r3, [r7, #28]
 800603c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800603e:	2215      	movs	r2, #21
 8006040:	68f9      	ldr	r1, [r7, #12]
 8006042:	6938      	ldr	r0, [r7, #16]
 8006044:	f7ff fa30 	bl	80054a8 <_SendPacket>
  RECORD_END();
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	f383 8811 	msr	BASEPRI, r3
}
 800604e:	bf00      	nop
 8006050:	3748      	adds	r7, #72	; 0x48
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}
 8006056:	bf00      	nop
 8006058:	20002434 	.word	0x20002434
 800605c:	20002404 	.word	0x20002404

08006060 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006060:	b580      	push	{r7, lr}
 8006062:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006064:	4b07      	ldr	r3, [pc, #28]	; (8006084 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006066:	6a1b      	ldr	r3, [r3, #32]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d008      	beq.n	800607e <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800606c:	4b05      	ldr	r3, [pc, #20]	; (8006084 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800606e:	6a1b      	ldr	r3, [r3, #32]
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d003      	beq.n	800607e <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8006076:	4b03      	ldr	r3, [pc, #12]	; (8006084 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006078:	6a1b      	ldr	r3, [r3, #32]
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	4798      	blx	r3
  }
}
 800607e:	bf00      	nop
 8006080:	bd80      	pop	{r7, pc}
 8006082:	bf00      	nop
 8006084:	20002404 	.word	0x20002404

08006088 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8006088:	b580      	push	{r7, lr}
 800608a:	b086      	sub	sp, #24
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006090:	f3ef 8311 	mrs	r3, BASEPRI
 8006094:	f04f 0120 	mov.w	r1, #32
 8006098:	f381 8811 	msr	BASEPRI, r1
 800609c:	617b      	str	r3, [r7, #20]
 800609e:	480b      	ldr	r0, [pc, #44]	; (80060cc <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80060a0:	f7ff f914 	bl	80052cc <_PreparePacket>
 80060a4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80060a6:	2280      	movs	r2, #128	; 0x80
 80060a8:	6879      	ldr	r1, [r7, #4]
 80060aa:	6938      	ldr	r0, [r7, #16]
 80060ac:	f7ff f8de 	bl	800526c <_EncodeStr>
 80060b0:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80060b2:	220e      	movs	r2, #14
 80060b4:	68f9      	ldr	r1, [r7, #12]
 80060b6:	6938      	ldr	r0, [r7, #16]
 80060b8:	f7ff f9f6 	bl	80054a8 <_SendPacket>
  RECORD_END();
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	f383 8811 	msr	BASEPRI, r3
}
 80060c2:	bf00      	nop
 80060c4:	3718      	adds	r7, #24
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}
 80060ca:	bf00      	nop
 80060cc:	20002434 	.word	0x20002434

080060d0 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80060d0:	b590      	push	{r4, r7, lr}
 80060d2:	b083      	sub	sp, #12
 80060d4:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80060d6:	4b15      	ldr	r3, [pc, #84]	; (800612c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80060d8:	6a1b      	ldr	r3, [r3, #32]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d01a      	beq.n	8006114 <SEGGER_SYSVIEW_RecordSystime+0x44>
 80060de:	4b13      	ldr	r3, [pc, #76]	; (800612c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80060e0:	6a1b      	ldr	r3, [r3, #32]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d015      	beq.n	8006114 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80060e8:	4b10      	ldr	r3, [pc, #64]	; (800612c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80060ea:	6a1b      	ldr	r3, [r3, #32]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4798      	blx	r3
 80060f0:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80060f4:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80060f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80060fa:	f04f 0200 	mov.w	r2, #0
 80060fe:	f04f 0300 	mov.w	r3, #0
 8006102:	000a      	movs	r2, r1
 8006104:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006106:	4613      	mov	r3, r2
 8006108:	461a      	mov	r2, r3
 800610a:	4621      	mov	r1, r4
 800610c:	200d      	movs	r0, #13
 800610e:	f7ff fbe7 	bl	80058e0 <SEGGER_SYSVIEW_RecordU32x2>
 8006112:	e006      	b.n	8006122 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006114:	4b06      	ldr	r3, [pc, #24]	; (8006130 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4619      	mov	r1, r3
 800611a:	200c      	movs	r0, #12
 800611c:	f7ff fba4 	bl	8005868 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006120:	bf00      	nop
 8006122:	bf00      	nop
 8006124:	370c      	adds	r7, #12
 8006126:	46bd      	mov	sp, r7
 8006128:	bd90      	pop	{r4, r7, pc}
 800612a:	bf00      	nop
 800612c:	20002404 	.word	0x20002404
 8006130:	e0001004 	.word	0xe0001004

08006134 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006134:	b580      	push	{r7, lr}
 8006136:	b086      	sub	sp, #24
 8006138:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800613a:	f3ef 8311 	mrs	r3, BASEPRI
 800613e:	f04f 0120 	mov.w	r1, #32
 8006142:	f381 8811 	msr	BASEPRI, r1
 8006146:	60fb      	str	r3, [r7, #12]
 8006148:	4819      	ldr	r0, [pc, #100]	; (80061b0 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800614a:	f7ff f8bf 	bl	80052cc <_PreparePacket>
 800614e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8006154:	4b17      	ldr	r3, [pc, #92]	; (80061b4 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800615c:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	617b      	str	r3, [r7, #20]
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	613b      	str	r3, [r7, #16]
 8006166:	e00b      	b.n	8006180 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	b2da      	uxtb	r2, r3
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	1c59      	adds	r1, r3, #1
 8006170:	6179      	str	r1, [r7, #20]
 8006172:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006176:	b2d2      	uxtb	r2, r2
 8006178:	701a      	strb	r2, [r3, #0]
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	09db      	lsrs	r3, r3, #7
 800617e:	613b      	str	r3, [r7, #16]
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	2b7f      	cmp	r3, #127	; 0x7f
 8006184:	d8f0      	bhi.n	8006168 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	1c5a      	adds	r2, r3, #1
 800618a:	617a      	str	r2, [r7, #20]
 800618c:	693a      	ldr	r2, [r7, #16]
 800618e:	b2d2      	uxtb	r2, r2
 8006190:	701a      	strb	r2, [r3, #0]
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8006196:	2202      	movs	r2, #2
 8006198:	6879      	ldr	r1, [r7, #4]
 800619a:	68b8      	ldr	r0, [r7, #8]
 800619c:	f7ff f984 	bl	80054a8 <_SendPacket>
  RECORD_END();
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f383 8811 	msr	BASEPRI, r3
}
 80061a6:	bf00      	nop
 80061a8:	3718      	adds	r7, #24
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}
 80061ae:	bf00      	nop
 80061b0:	20002434 	.word	0x20002434
 80061b4:	e000ed04 	.word	0xe000ed04

080061b8 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b082      	sub	sp, #8
 80061bc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80061be:	f3ef 8311 	mrs	r3, BASEPRI
 80061c2:	f04f 0120 	mov.w	r1, #32
 80061c6:	f381 8811 	msr	BASEPRI, r1
 80061ca:	607b      	str	r3, [r7, #4]
 80061cc:	4807      	ldr	r0, [pc, #28]	; (80061ec <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80061ce:	f7ff f87d 	bl	80052cc <_PreparePacket>
 80061d2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80061d4:	2203      	movs	r2, #3
 80061d6:	6839      	ldr	r1, [r7, #0]
 80061d8:	6838      	ldr	r0, [r7, #0]
 80061da:	f7ff f965 	bl	80054a8 <_SendPacket>
  RECORD_END();
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	f383 8811 	msr	BASEPRI, r3
}
 80061e4:	bf00      	nop
 80061e6:	3708      	adds	r7, #8
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}
 80061ec:	20002434 	.word	0x20002434

080061f0 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b082      	sub	sp, #8
 80061f4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80061f6:	f3ef 8311 	mrs	r3, BASEPRI
 80061fa:	f04f 0120 	mov.w	r1, #32
 80061fe:	f381 8811 	msr	BASEPRI, r1
 8006202:	607b      	str	r3, [r7, #4]
 8006204:	4807      	ldr	r0, [pc, #28]	; (8006224 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006206:	f7ff f861 	bl	80052cc <_PreparePacket>
 800620a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800620c:	2211      	movs	r2, #17
 800620e:	6839      	ldr	r1, [r7, #0]
 8006210:	6838      	ldr	r0, [r7, #0]
 8006212:	f7ff f949 	bl	80054a8 <_SendPacket>
  RECORD_END();
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	f383 8811 	msr	BASEPRI, r3
}
 800621c:	bf00      	nop
 800621e:	3708      	adds	r7, #8
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}
 8006224:	20002434 	.word	0x20002434

08006228 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006228:	b580      	push	{r7, lr}
 800622a:	b088      	sub	sp, #32
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006230:	f3ef 8311 	mrs	r3, BASEPRI
 8006234:	f04f 0120 	mov.w	r1, #32
 8006238:	f381 8811 	msr	BASEPRI, r1
 800623c:	617b      	str	r3, [r7, #20]
 800623e:	4819      	ldr	r0, [pc, #100]	; (80062a4 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006240:	f7ff f844 	bl	80052cc <_PreparePacket>
 8006244:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800624a:	4b17      	ldr	r3, [pc, #92]	; (80062a8 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800624c:	691b      	ldr	r3, [r3, #16]
 800624e:	687a      	ldr	r2, [r7, #4]
 8006250:	1ad3      	subs	r3, r2, r3
 8006252:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	61fb      	str	r3, [r7, #28]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	61bb      	str	r3, [r7, #24]
 800625c:	e00b      	b.n	8006276 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800625e:	69bb      	ldr	r3, [r7, #24]
 8006260:	b2da      	uxtb	r2, r3
 8006262:	69fb      	ldr	r3, [r7, #28]
 8006264:	1c59      	adds	r1, r3, #1
 8006266:	61f9      	str	r1, [r7, #28]
 8006268:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800626c:	b2d2      	uxtb	r2, r2
 800626e:	701a      	strb	r2, [r3, #0]
 8006270:	69bb      	ldr	r3, [r7, #24]
 8006272:	09db      	lsrs	r3, r3, #7
 8006274:	61bb      	str	r3, [r7, #24]
 8006276:	69bb      	ldr	r3, [r7, #24]
 8006278:	2b7f      	cmp	r3, #127	; 0x7f
 800627a:	d8f0      	bhi.n	800625e <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 800627c:	69fb      	ldr	r3, [r7, #28]
 800627e:	1c5a      	adds	r2, r3, #1
 8006280:	61fa      	str	r2, [r7, #28]
 8006282:	69ba      	ldr	r2, [r7, #24]
 8006284:	b2d2      	uxtb	r2, r2
 8006286:	701a      	strb	r2, [r3, #0]
 8006288:	69fb      	ldr	r3, [r7, #28]
 800628a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800628c:	2208      	movs	r2, #8
 800628e:	68f9      	ldr	r1, [r7, #12]
 8006290:	6938      	ldr	r0, [r7, #16]
 8006292:	f7ff f909 	bl	80054a8 <_SendPacket>
  RECORD_END();
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	f383 8811 	msr	BASEPRI, r3
}
 800629c:	bf00      	nop
 800629e:	3720      	adds	r7, #32
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}
 80062a4:	20002434 	.word	0x20002434
 80062a8:	20002404 	.word	0x20002404

080062ac <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b088      	sub	sp, #32
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80062b4:	f3ef 8311 	mrs	r3, BASEPRI
 80062b8:	f04f 0120 	mov.w	r1, #32
 80062bc:	f381 8811 	msr	BASEPRI, r1
 80062c0:	617b      	str	r3, [r7, #20]
 80062c2:	4819      	ldr	r0, [pc, #100]	; (8006328 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80062c4:	f7ff f802 	bl	80052cc <_PreparePacket>
 80062c8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80062ce:	4b17      	ldr	r3, [pc, #92]	; (800632c <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80062d0:	691b      	ldr	r3, [r3, #16]
 80062d2:	687a      	ldr	r2, [r7, #4]
 80062d4:	1ad3      	subs	r3, r2, r3
 80062d6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	61fb      	str	r3, [r7, #28]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	61bb      	str	r3, [r7, #24]
 80062e0:	e00b      	b.n	80062fa <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80062e2:	69bb      	ldr	r3, [r7, #24]
 80062e4:	b2da      	uxtb	r2, r3
 80062e6:	69fb      	ldr	r3, [r7, #28]
 80062e8:	1c59      	adds	r1, r3, #1
 80062ea:	61f9      	str	r1, [r7, #28]
 80062ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062f0:	b2d2      	uxtb	r2, r2
 80062f2:	701a      	strb	r2, [r3, #0]
 80062f4:	69bb      	ldr	r3, [r7, #24]
 80062f6:	09db      	lsrs	r3, r3, #7
 80062f8:	61bb      	str	r3, [r7, #24]
 80062fa:	69bb      	ldr	r3, [r7, #24]
 80062fc:	2b7f      	cmp	r3, #127	; 0x7f
 80062fe:	d8f0      	bhi.n	80062e2 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006300:	69fb      	ldr	r3, [r7, #28]
 8006302:	1c5a      	adds	r2, r3, #1
 8006304:	61fa      	str	r2, [r7, #28]
 8006306:	69ba      	ldr	r2, [r7, #24]
 8006308:	b2d2      	uxtb	r2, r2
 800630a:	701a      	strb	r2, [r3, #0]
 800630c:	69fb      	ldr	r3, [r7, #28]
 800630e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006310:	2204      	movs	r2, #4
 8006312:	68f9      	ldr	r1, [r7, #12]
 8006314:	6938      	ldr	r0, [r7, #16]
 8006316:	f7ff f8c7 	bl	80054a8 <_SendPacket>
  RECORD_END();
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	f383 8811 	msr	BASEPRI, r3
}
 8006320:	bf00      	nop
 8006322:	3720      	adds	r7, #32
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}
 8006328:	20002434 	.word	0x20002434
 800632c:	20002404 	.word	0x20002404

08006330 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006330:	b580      	push	{r7, lr}
 8006332:	b088      	sub	sp, #32
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006338:	f3ef 8311 	mrs	r3, BASEPRI
 800633c:	f04f 0120 	mov.w	r1, #32
 8006340:	f381 8811 	msr	BASEPRI, r1
 8006344:	617b      	str	r3, [r7, #20]
 8006346:	4819      	ldr	r0, [pc, #100]	; (80063ac <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006348:	f7fe ffc0 	bl	80052cc <_PreparePacket>
 800634c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006352:	4b17      	ldr	r3, [pc, #92]	; (80063b0 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006354:	691b      	ldr	r3, [r3, #16]
 8006356:	687a      	ldr	r2, [r7, #4]
 8006358:	1ad3      	subs	r3, r2, r3
 800635a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	61fb      	str	r3, [r7, #28]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	61bb      	str	r3, [r7, #24]
 8006364:	e00b      	b.n	800637e <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006366:	69bb      	ldr	r3, [r7, #24]
 8006368:	b2da      	uxtb	r2, r3
 800636a:	69fb      	ldr	r3, [r7, #28]
 800636c:	1c59      	adds	r1, r3, #1
 800636e:	61f9      	str	r1, [r7, #28]
 8006370:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006374:	b2d2      	uxtb	r2, r2
 8006376:	701a      	strb	r2, [r3, #0]
 8006378:	69bb      	ldr	r3, [r7, #24]
 800637a:	09db      	lsrs	r3, r3, #7
 800637c:	61bb      	str	r3, [r7, #24]
 800637e:	69bb      	ldr	r3, [r7, #24]
 8006380:	2b7f      	cmp	r3, #127	; 0x7f
 8006382:	d8f0      	bhi.n	8006366 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006384:	69fb      	ldr	r3, [r7, #28]
 8006386:	1c5a      	adds	r2, r3, #1
 8006388:	61fa      	str	r2, [r7, #28]
 800638a:	69ba      	ldr	r2, [r7, #24]
 800638c:	b2d2      	uxtb	r2, r2
 800638e:	701a      	strb	r2, [r3, #0]
 8006390:	69fb      	ldr	r3, [r7, #28]
 8006392:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006394:	2206      	movs	r2, #6
 8006396:	68f9      	ldr	r1, [r7, #12]
 8006398:	6938      	ldr	r0, [r7, #16]
 800639a:	f7ff f885 	bl	80054a8 <_SendPacket>
  RECORD_END();
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	f383 8811 	msr	BASEPRI, r3
}
 80063a4:	bf00      	nop
 80063a6:	3720      	adds	r7, #32
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}
 80063ac:	20002434 	.word	0x20002434
 80063b0:	20002404 	.word	0x20002404

080063b4 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80063b4:	b480      	push	{r7}
 80063b6:	b083      	sub	sp, #12
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80063bc:	4b04      	ldr	r3, [pc, #16]	; (80063d0 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80063be:	691b      	ldr	r3, [r3, #16]
 80063c0:	687a      	ldr	r2, [r7, #4]
 80063c2:	1ad3      	subs	r3, r2, r3
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	370c      	adds	r7, #12
 80063c8:	46bd      	mov	sp, r7
 80063ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ce:	4770      	bx	lr
 80063d0:	20002404 	.word	0x20002404

080063d4 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b08c      	sub	sp, #48	; 0x30
 80063d8:	af00      	add	r7, sp, #0
 80063da:	4603      	mov	r3, r0
 80063dc:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80063de:	4b40      	ldr	r3, [pc, #256]	; (80064e0 <SEGGER_SYSVIEW_SendModule+0x10c>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d077      	beq.n	80064d6 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 80063e6:	4b3e      	ldr	r3, [pc, #248]	; (80064e0 <SEGGER_SYSVIEW_SendModule+0x10c>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80063ec:	2300      	movs	r3, #0
 80063ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80063f0:	e008      	b.n	8006404 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80063f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063f4:	691b      	ldr	r3, [r3, #16]
 80063f6:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80063f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d007      	beq.n	800640e <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80063fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006400:	3301      	adds	r3, #1
 8006402:	62bb      	str	r3, [r7, #40]	; 0x28
 8006404:	79fb      	ldrb	r3, [r7, #7]
 8006406:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006408:	429a      	cmp	r2, r3
 800640a:	d3f2      	bcc.n	80063f2 <SEGGER_SYSVIEW_SendModule+0x1e>
 800640c:	e000      	b.n	8006410 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800640e:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006412:	2b00      	cmp	r3, #0
 8006414:	d055      	beq.n	80064c2 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006416:	f3ef 8311 	mrs	r3, BASEPRI
 800641a:	f04f 0120 	mov.w	r1, #32
 800641e:	f381 8811 	msr	BASEPRI, r1
 8006422:	617b      	str	r3, [r7, #20]
 8006424:	482f      	ldr	r0, [pc, #188]	; (80064e4 <SEGGER_SYSVIEW_SendModule+0x110>)
 8006426:	f7fe ff51 	bl	80052cc <_PreparePacket>
 800642a:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	627b      	str	r3, [r7, #36]	; 0x24
 8006434:	79fb      	ldrb	r3, [r7, #7]
 8006436:	623b      	str	r3, [r7, #32]
 8006438:	e00b      	b.n	8006452 <SEGGER_SYSVIEW_SendModule+0x7e>
 800643a:	6a3b      	ldr	r3, [r7, #32]
 800643c:	b2da      	uxtb	r2, r3
 800643e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006440:	1c59      	adds	r1, r3, #1
 8006442:	6279      	str	r1, [r7, #36]	; 0x24
 8006444:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006448:	b2d2      	uxtb	r2, r2
 800644a:	701a      	strb	r2, [r3, #0]
 800644c:	6a3b      	ldr	r3, [r7, #32]
 800644e:	09db      	lsrs	r3, r3, #7
 8006450:	623b      	str	r3, [r7, #32]
 8006452:	6a3b      	ldr	r3, [r7, #32]
 8006454:	2b7f      	cmp	r3, #127	; 0x7f
 8006456:	d8f0      	bhi.n	800643a <SEGGER_SYSVIEW_SendModule+0x66>
 8006458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800645a:	1c5a      	adds	r2, r3, #1
 800645c:	627a      	str	r2, [r7, #36]	; 0x24
 800645e:	6a3a      	ldr	r2, [r7, #32]
 8006460:	b2d2      	uxtb	r2, r2
 8006462:	701a      	strb	r2, [r3, #0]
 8006464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006466:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	61fb      	str	r3, [r7, #28]
 800646c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800646e:	689b      	ldr	r3, [r3, #8]
 8006470:	61bb      	str	r3, [r7, #24]
 8006472:	e00b      	b.n	800648c <SEGGER_SYSVIEW_SendModule+0xb8>
 8006474:	69bb      	ldr	r3, [r7, #24]
 8006476:	b2da      	uxtb	r2, r3
 8006478:	69fb      	ldr	r3, [r7, #28]
 800647a:	1c59      	adds	r1, r3, #1
 800647c:	61f9      	str	r1, [r7, #28]
 800647e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006482:	b2d2      	uxtb	r2, r2
 8006484:	701a      	strb	r2, [r3, #0]
 8006486:	69bb      	ldr	r3, [r7, #24]
 8006488:	09db      	lsrs	r3, r3, #7
 800648a:	61bb      	str	r3, [r7, #24]
 800648c:	69bb      	ldr	r3, [r7, #24]
 800648e:	2b7f      	cmp	r3, #127	; 0x7f
 8006490:	d8f0      	bhi.n	8006474 <SEGGER_SYSVIEW_SendModule+0xa0>
 8006492:	69fb      	ldr	r3, [r7, #28]
 8006494:	1c5a      	adds	r2, r3, #1
 8006496:	61fa      	str	r2, [r7, #28]
 8006498:	69ba      	ldr	r2, [r7, #24]
 800649a:	b2d2      	uxtb	r2, r2
 800649c:	701a      	strb	r2, [r3, #0]
 800649e:	69fb      	ldr	r3, [r7, #28]
 80064a0:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80064a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	2280      	movs	r2, #128	; 0x80
 80064a8:	4619      	mov	r1, r3
 80064aa:	68f8      	ldr	r0, [r7, #12]
 80064ac:	f7fe fede 	bl	800526c <_EncodeStr>
 80064b0:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80064b2:	2216      	movs	r2, #22
 80064b4:	68f9      	ldr	r1, [r7, #12]
 80064b6:	6938      	ldr	r0, [r7, #16]
 80064b8:	f7fe fff6 	bl	80054a8 <_SendPacket>
      RECORD_END();
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 80064c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d006      	beq.n	80064d6 <SEGGER_SYSVIEW_SendModule+0x102>
 80064c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ca:	68db      	ldr	r3, [r3, #12]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d002      	beq.n	80064d6 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 80064d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064d2:	68db      	ldr	r3, [r3, #12]
 80064d4:	4798      	blx	r3
    }
  }
}
 80064d6:	bf00      	nop
 80064d8:	3730      	adds	r7, #48	; 0x30
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}
 80064de:	bf00      	nop
 80064e0:	2000242c 	.word	0x2000242c
 80064e4:	20002434 	.word	0x20002434

080064e8 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b082      	sub	sp, #8
 80064ec:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80064ee:	4b0c      	ldr	r3, [pc, #48]	; (8006520 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d00f      	beq.n	8006516 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80064f6:	4b0a      	ldr	r3, [pc, #40]	; (8006520 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	68db      	ldr	r3, [r3, #12]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d002      	beq.n	800650a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	68db      	ldr	r3, [r3, #12]
 8006508:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	691b      	ldr	r3, [r3, #16]
 800650e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d1f2      	bne.n	80064fc <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006516:	bf00      	nop
 8006518:	3708      	adds	r7, #8
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}
 800651e:	bf00      	nop
 8006520:	2000242c 	.word	0x2000242c

08006524 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006524:	b580      	push	{r7, lr}
 8006526:	b086      	sub	sp, #24
 8006528:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800652a:	f3ef 8311 	mrs	r3, BASEPRI
 800652e:	f04f 0120 	mov.w	r1, #32
 8006532:	f381 8811 	msr	BASEPRI, r1
 8006536:	60fb      	str	r3, [r7, #12]
 8006538:	4817      	ldr	r0, [pc, #92]	; (8006598 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800653a:	f7fe fec7 	bl	80052cc <_PreparePacket>
 800653e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	617b      	str	r3, [r7, #20]
 8006548:	4b14      	ldr	r3, [pc, #80]	; (800659c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800654a:	781b      	ldrb	r3, [r3, #0]
 800654c:	613b      	str	r3, [r7, #16]
 800654e:	e00b      	b.n	8006568 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	b2da      	uxtb	r2, r3
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	1c59      	adds	r1, r3, #1
 8006558:	6179      	str	r1, [r7, #20]
 800655a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800655e:	b2d2      	uxtb	r2, r2
 8006560:	701a      	strb	r2, [r3, #0]
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	09db      	lsrs	r3, r3, #7
 8006566:	613b      	str	r3, [r7, #16]
 8006568:	693b      	ldr	r3, [r7, #16]
 800656a:	2b7f      	cmp	r3, #127	; 0x7f
 800656c:	d8f0      	bhi.n	8006550 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	1c5a      	adds	r2, r3, #1
 8006572:	617a      	str	r2, [r7, #20]
 8006574:	693a      	ldr	r2, [r7, #16]
 8006576:	b2d2      	uxtb	r2, r2
 8006578:	701a      	strb	r2, [r3, #0]
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800657e:	221b      	movs	r2, #27
 8006580:	6879      	ldr	r1, [r7, #4]
 8006582:	68b8      	ldr	r0, [r7, #8]
 8006584:	f7fe ff90 	bl	80054a8 <_SendPacket>
  RECORD_END();
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	f383 8811 	msr	BASEPRI, r3
}
 800658e:	bf00      	nop
 8006590:	3718      	adds	r7, #24
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}
 8006596:	bf00      	nop
 8006598:	20002434 	.word	0x20002434
 800659c:	20002430 	.word	0x20002430

080065a0 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b08a      	sub	sp, #40	; 0x28
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80065a8:	f3ef 8311 	mrs	r3, BASEPRI
 80065ac:	f04f 0120 	mov.w	r1, #32
 80065b0:	f381 8811 	msr	BASEPRI, r1
 80065b4:	617b      	str	r3, [r7, #20]
 80065b6:	4827      	ldr	r0, [pc, #156]	; (8006654 <SEGGER_SYSVIEW_Warn+0xb4>)
 80065b8:	f7fe fe88 	bl	80052cc <_PreparePacket>
 80065bc:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80065be:	2280      	movs	r2, #128	; 0x80
 80065c0:	6879      	ldr	r1, [r7, #4]
 80065c2:	6938      	ldr	r0, [r7, #16]
 80065c4:	f7fe fe52 	bl	800526c <_EncodeStr>
 80065c8:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	627b      	str	r3, [r7, #36]	; 0x24
 80065ce:	2301      	movs	r3, #1
 80065d0:	623b      	str	r3, [r7, #32]
 80065d2:	e00b      	b.n	80065ec <SEGGER_SYSVIEW_Warn+0x4c>
 80065d4:	6a3b      	ldr	r3, [r7, #32]
 80065d6:	b2da      	uxtb	r2, r3
 80065d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065da:	1c59      	adds	r1, r3, #1
 80065dc:	6279      	str	r1, [r7, #36]	; 0x24
 80065de:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80065e2:	b2d2      	uxtb	r2, r2
 80065e4:	701a      	strb	r2, [r3, #0]
 80065e6:	6a3b      	ldr	r3, [r7, #32]
 80065e8:	09db      	lsrs	r3, r3, #7
 80065ea:	623b      	str	r3, [r7, #32]
 80065ec:	6a3b      	ldr	r3, [r7, #32]
 80065ee:	2b7f      	cmp	r3, #127	; 0x7f
 80065f0:	d8f0      	bhi.n	80065d4 <SEGGER_SYSVIEW_Warn+0x34>
 80065f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f4:	1c5a      	adds	r2, r3, #1
 80065f6:	627a      	str	r2, [r7, #36]	; 0x24
 80065f8:	6a3a      	ldr	r2, [r7, #32]
 80065fa:	b2d2      	uxtb	r2, r2
 80065fc:	701a      	strb	r2, [r3, #0]
 80065fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006600:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	61fb      	str	r3, [r7, #28]
 8006606:	2300      	movs	r3, #0
 8006608:	61bb      	str	r3, [r7, #24]
 800660a:	e00b      	b.n	8006624 <SEGGER_SYSVIEW_Warn+0x84>
 800660c:	69bb      	ldr	r3, [r7, #24]
 800660e:	b2da      	uxtb	r2, r3
 8006610:	69fb      	ldr	r3, [r7, #28]
 8006612:	1c59      	adds	r1, r3, #1
 8006614:	61f9      	str	r1, [r7, #28]
 8006616:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800661a:	b2d2      	uxtb	r2, r2
 800661c:	701a      	strb	r2, [r3, #0]
 800661e:	69bb      	ldr	r3, [r7, #24]
 8006620:	09db      	lsrs	r3, r3, #7
 8006622:	61bb      	str	r3, [r7, #24]
 8006624:	69bb      	ldr	r3, [r7, #24]
 8006626:	2b7f      	cmp	r3, #127	; 0x7f
 8006628:	d8f0      	bhi.n	800660c <SEGGER_SYSVIEW_Warn+0x6c>
 800662a:	69fb      	ldr	r3, [r7, #28]
 800662c:	1c5a      	adds	r2, r3, #1
 800662e:	61fa      	str	r2, [r7, #28]
 8006630:	69ba      	ldr	r2, [r7, #24]
 8006632:	b2d2      	uxtb	r2, r2
 8006634:	701a      	strb	r2, [r3, #0]
 8006636:	69fb      	ldr	r3, [r7, #28]
 8006638:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800663a:	221a      	movs	r2, #26
 800663c:	68f9      	ldr	r1, [r7, #12]
 800663e:	6938      	ldr	r0, [r7, #16]
 8006640:	f7fe ff32 	bl	80054a8 <_SendPacket>
  RECORD_END();
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	f383 8811 	msr	BASEPRI, r3
}
 800664a:	bf00      	nop
 800664c:	3728      	adds	r7, #40	; 0x28
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}
 8006652:	bf00      	nop
 8006654:	20002434 	.word	0x20002434

08006658 <__libc_init_array>:
 8006658:	b570      	push	{r4, r5, r6, lr}
 800665a:	4d0d      	ldr	r5, [pc, #52]	; (8006690 <__libc_init_array+0x38>)
 800665c:	4c0d      	ldr	r4, [pc, #52]	; (8006694 <__libc_init_array+0x3c>)
 800665e:	1b64      	subs	r4, r4, r5
 8006660:	10a4      	asrs	r4, r4, #2
 8006662:	2600      	movs	r6, #0
 8006664:	42a6      	cmp	r6, r4
 8006666:	d109      	bne.n	800667c <__libc_init_array+0x24>
 8006668:	4d0b      	ldr	r5, [pc, #44]	; (8006698 <__libc_init_array+0x40>)
 800666a:	4c0c      	ldr	r4, [pc, #48]	; (800669c <__libc_init_array+0x44>)
 800666c:	f000 f902 	bl	8006874 <_init>
 8006670:	1b64      	subs	r4, r4, r5
 8006672:	10a4      	asrs	r4, r4, #2
 8006674:	2600      	movs	r6, #0
 8006676:	42a6      	cmp	r6, r4
 8006678:	d105      	bne.n	8006686 <__libc_init_array+0x2e>
 800667a:	bd70      	pop	{r4, r5, r6, pc}
 800667c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006680:	4798      	blx	r3
 8006682:	3601      	adds	r6, #1
 8006684:	e7ee      	b.n	8006664 <__libc_init_array+0xc>
 8006686:	f855 3b04 	ldr.w	r3, [r5], #4
 800668a:	4798      	blx	r3
 800668c:	3601      	adds	r6, #1
 800668e:	e7f2      	b.n	8006676 <__libc_init_array+0x1e>
 8006690:	08006a20 	.word	0x08006a20
 8006694:	08006a20 	.word	0x08006a20
 8006698:	08006a20 	.word	0x08006a20
 800669c:	08006a24 	.word	0x08006a24

080066a0 <__retarget_lock_acquire_recursive>:
 80066a0:	4770      	bx	lr

080066a2 <__retarget_lock_release_recursive>:
 80066a2:	4770      	bx	lr

080066a4 <memcmp>:
 80066a4:	b510      	push	{r4, lr}
 80066a6:	3901      	subs	r1, #1
 80066a8:	4402      	add	r2, r0
 80066aa:	4290      	cmp	r0, r2
 80066ac:	d101      	bne.n	80066b2 <memcmp+0xe>
 80066ae:	2000      	movs	r0, #0
 80066b0:	e005      	b.n	80066be <memcmp+0x1a>
 80066b2:	7803      	ldrb	r3, [r0, #0]
 80066b4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80066b8:	42a3      	cmp	r3, r4
 80066ba:	d001      	beq.n	80066c0 <memcmp+0x1c>
 80066bc:	1b18      	subs	r0, r3, r4
 80066be:	bd10      	pop	{r4, pc}
 80066c0:	3001      	adds	r0, #1
 80066c2:	e7f2      	b.n	80066aa <memcmp+0x6>

080066c4 <memcpy>:
 80066c4:	440a      	add	r2, r1
 80066c6:	4291      	cmp	r1, r2
 80066c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80066cc:	d100      	bne.n	80066d0 <memcpy+0xc>
 80066ce:	4770      	bx	lr
 80066d0:	b510      	push	{r4, lr}
 80066d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80066d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80066da:	4291      	cmp	r1, r2
 80066dc:	d1f9      	bne.n	80066d2 <memcpy+0xe>
 80066de:	bd10      	pop	{r4, pc}

080066e0 <memset>:
 80066e0:	4402      	add	r2, r0
 80066e2:	4603      	mov	r3, r0
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d100      	bne.n	80066ea <memset+0xa>
 80066e8:	4770      	bx	lr
 80066ea:	f803 1b01 	strb.w	r1, [r3], #1
 80066ee:	e7f9      	b.n	80066e4 <memset+0x4>

080066f0 <cleanup_glue>:
 80066f0:	b538      	push	{r3, r4, r5, lr}
 80066f2:	460c      	mov	r4, r1
 80066f4:	6809      	ldr	r1, [r1, #0]
 80066f6:	4605      	mov	r5, r0
 80066f8:	b109      	cbz	r1, 80066fe <cleanup_glue+0xe>
 80066fa:	f7ff fff9 	bl	80066f0 <cleanup_glue>
 80066fe:	4621      	mov	r1, r4
 8006700:	4628      	mov	r0, r5
 8006702:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006706:	f000 b869 	b.w	80067dc <_free_r>
	...

0800670c <_reclaim_reent>:
 800670c:	4b2c      	ldr	r3, [pc, #176]	; (80067c0 <_reclaim_reent+0xb4>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4283      	cmp	r3, r0
 8006712:	b570      	push	{r4, r5, r6, lr}
 8006714:	4604      	mov	r4, r0
 8006716:	d051      	beq.n	80067bc <_reclaim_reent+0xb0>
 8006718:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800671a:	b143      	cbz	r3, 800672e <_reclaim_reent+0x22>
 800671c:	68db      	ldr	r3, [r3, #12]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d14a      	bne.n	80067b8 <_reclaim_reent+0xac>
 8006722:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006724:	6819      	ldr	r1, [r3, #0]
 8006726:	b111      	cbz	r1, 800672e <_reclaim_reent+0x22>
 8006728:	4620      	mov	r0, r4
 800672a:	f000 f857 	bl	80067dc <_free_r>
 800672e:	6961      	ldr	r1, [r4, #20]
 8006730:	b111      	cbz	r1, 8006738 <_reclaim_reent+0x2c>
 8006732:	4620      	mov	r0, r4
 8006734:	f000 f852 	bl	80067dc <_free_r>
 8006738:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800673a:	b111      	cbz	r1, 8006742 <_reclaim_reent+0x36>
 800673c:	4620      	mov	r0, r4
 800673e:	f000 f84d 	bl	80067dc <_free_r>
 8006742:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006744:	b111      	cbz	r1, 800674c <_reclaim_reent+0x40>
 8006746:	4620      	mov	r0, r4
 8006748:	f000 f848 	bl	80067dc <_free_r>
 800674c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800674e:	b111      	cbz	r1, 8006756 <_reclaim_reent+0x4a>
 8006750:	4620      	mov	r0, r4
 8006752:	f000 f843 	bl	80067dc <_free_r>
 8006756:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006758:	b111      	cbz	r1, 8006760 <_reclaim_reent+0x54>
 800675a:	4620      	mov	r0, r4
 800675c:	f000 f83e 	bl	80067dc <_free_r>
 8006760:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006762:	b111      	cbz	r1, 800676a <_reclaim_reent+0x5e>
 8006764:	4620      	mov	r0, r4
 8006766:	f000 f839 	bl	80067dc <_free_r>
 800676a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800676c:	b111      	cbz	r1, 8006774 <_reclaim_reent+0x68>
 800676e:	4620      	mov	r0, r4
 8006770:	f000 f834 	bl	80067dc <_free_r>
 8006774:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006776:	b111      	cbz	r1, 800677e <_reclaim_reent+0x72>
 8006778:	4620      	mov	r0, r4
 800677a:	f000 f82f 	bl	80067dc <_free_r>
 800677e:	69a3      	ldr	r3, [r4, #24]
 8006780:	b1e3      	cbz	r3, 80067bc <_reclaim_reent+0xb0>
 8006782:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006784:	4620      	mov	r0, r4
 8006786:	4798      	blx	r3
 8006788:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800678a:	b1b9      	cbz	r1, 80067bc <_reclaim_reent+0xb0>
 800678c:	4620      	mov	r0, r4
 800678e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006792:	f7ff bfad 	b.w	80066f0 <cleanup_glue>
 8006796:	5949      	ldr	r1, [r1, r5]
 8006798:	b941      	cbnz	r1, 80067ac <_reclaim_reent+0xa0>
 800679a:	3504      	adds	r5, #4
 800679c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800679e:	2d80      	cmp	r5, #128	; 0x80
 80067a0:	68d9      	ldr	r1, [r3, #12]
 80067a2:	d1f8      	bne.n	8006796 <_reclaim_reent+0x8a>
 80067a4:	4620      	mov	r0, r4
 80067a6:	f000 f819 	bl	80067dc <_free_r>
 80067aa:	e7ba      	b.n	8006722 <_reclaim_reent+0x16>
 80067ac:	680e      	ldr	r6, [r1, #0]
 80067ae:	4620      	mov	r0, r4
 80067b0:	f000 f814 	bl	80067dc <_free_r>
 80067b4:	4631      	mov	r1, r6
 80067b6:	e7ef      	b.n	8006798 <_reclaim_reent+0x8c>
 80067b8:	2500      	movs	r5, #0
 80067ba:	e7ef      	b.n	800679c <_reclaim_reent+0x90>
 80067bc:	bd70      	pop	{r4, r5, r6, pc}
 80067be:	bf00      	nop
 80067c0:	20000010 	.word	0x20000010

080067c4 <__malloc_lock>:
 80067c4:	4801      	ldr	r0, [pc, #4]	; (80067cc <__malloc_lock+0x8>)
 80067c6:	f7ff bf6b 	b.w	80066a0 <__retarget_lock_acquire_recursive>
 80067ca:	bf00      	nop
 80067cc:	20002517 	.word	0x20002517

080067d0 <__malloc_unlock>:
 80067d0:	4801      	ldr	r0, [pc, #4]	; (80067d8 <__malloc_unlock+0x8>)
 80067d2:	f7ff bf66 	b.w	80066a2 <__retarget_lock_release_recursive>
 80067d6:	bf00      	nop
 80067d8:	20002517 	.word	0x20002517

080067dc <_free_r>:
 80067dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80067de:	2900      	cmp	r1, #0
 80067e0:	d044      	beq.n	800686c <_free_r+0x90>
 80067e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067e6:	9001      	str	r0, [sp, #4]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	f1a1 0404 	sub.w	r4, r1, #4
 80067ee:	bfb8      	it	lt
 80067f0:	18e4      	addlt	r4, r4, r3
 80067f2:	f7ff ffe7 	bl	80067c4 <__malloc_lock>
 80067f6:	4a1e      	ldr	r2, [pc, #120]	; (8006870 <_free_r+0x94>)
 80067f8:	9801      	ldr	r0, [sp, #4]
 80067fa:	6813      	ldr	r3, [r2, #0]
 80067fc:	b933      	cbnz	r3, 800680c <_free_r+0x30>
 80067fe:	6063      	str	r3, [r4, #4]
 8006800:	6014      	str	r4, [r2, #0]
 8006802:	b003      	add	sp, #12
 8006804:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006808:	f7ff bfe2 	b.w	80067d0 <__malloc_unlock>
 800680c:	42a3      	cmp	r3, r4
 800680e:	d908      	bls.n	8006822 <_free_r+0x46>
 8006810:	6825      	ldr	r5, [r4, #0]
 8006812:	1961      	adds	r1, r4, r5
 8006814:	428b      	cmp	r3, r1
 8006816:	bf01      	itttt	eq
 8006818:	6819      	ldreq	r1, [r3, #0]
 800681a:	685b      	ldreq	r3, [r3, #4]
 800681c:	1949      	addeq	r1, r1, r5
 800681e:	6021      	streq	r1, [r4, #0]
 8006820:	e7ed      	b.n	80067fe <_free_r+0x22>
 8006822:	461a      	mov	r2, r3
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	b10b      	cbz	r3, 800682c <_free_r+0x50>
 8006828:	42a3      	cmp	r3, r4
 800682a:	d9fa      	bls.n	8006822 <_free_r+0x46>
 800682c:	6811      	ldr	r1, [r2, #0]
 800682e:	1855      	adds	r5, r2, r1
 8006830:	42a5      	cmp	r5, r4
 8006832:	d10b      	bne.n	800684c <_free_r+0x70>
 8006834:	6824      	ldr	r4, [r4, #0]
 8006836:	4421      	add	r1, r4
 8006838:	1854      	adds	r4, r2, r1
 800683a:	42a3      	cmp	r3, r4
 800683c:	6011      	str	r1, [r2, #0]
 800683e:	d1e0      	bne.n	8006802 <_free_r+0x26>
 8006840:	681c      	ldr	r4, [r3, #0]
 8006842:	685b      	ldr	r3, [r3, #4]
 8006844:	6053      	str	r3, [r2, #4]
 8006846:	4421      	add	r1, r4
 8006848:	6011      	str	r1, [r2, #0]
 800684a:	e7da      	b.n	8006802 <_free_r+0x26>
 800684c:	d902      	bls.n	8006854 <_free_r+0x78>
 800684e:	230c      	movs	r3, #12
 8006850:	6003      	str	r3, [r0, #0]
 8006852:	e7d6      	b.n	8006802 <_free_r+0x26>
 8006854:	6825      	ldr	r5, [r4, #0]
 8006856:	1961      	adds	r1, r4, r5
 8006858:	428b      	cmp	r3, r1
 800685a:	bf04      	itt	eq
 800685c:	6819      	ldreq	r1, [r3, #0]
 800685e:	685b      	ldreq	r3, [r3, #4]
 8006860:	6063      	str	r3, [r4, #4]
 8006862:	bf04      	itt	eq
 8006864:	1949      	addeq	r1, r1, r5
 8006866:	6021      	streq	r1, [r4, #0]
 8006868:	6054      	str	r4, [r2, #4]
 800686a:	e7ca      	b.n	8006802 <_free_r+0x26>
 800686c:	b003      	add	sp, #12
 800686e:	bd30      	pop	{r4, r5, pc}
 8006870:	20002518 	.word	0x20002518

08006874 <_init>:
 8006874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006876:	bf00      	nop
 8006878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800687a:	bc08      	pop	{r3}
 800687c:	469e      	mov	lr, r3
 800687e:	4770      	bx	lr

08006880 <_fini>:
 8006880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006882:	bf00      	nop
 8006884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006886:	bc08      	pop	{r3}
 8006888:	469e      	mov	lr, r3
 800688a:	4770      	bx	lr
