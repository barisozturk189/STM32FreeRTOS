
Example1Helper_Segger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007900  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d0  08007a90  08007a90  00017a90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c60  08007c60  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08007c60  08007c60  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007c60  08007c60  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c60  08007c60  00017c60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007c64  08007c64  00017c64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007c68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00002578  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200025ec  200025ec  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001faea  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003961  00000000  00000000  0003fb8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001818  00000000  00000000  000434f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000016a0  00000000  00000000  00044d08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000045d1  00000000  00000000  000463a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c729  00000000  00000000  0004a979  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c7667  00000000  00000000  000670a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012e709  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000691c  00000000  00000000  0012e75c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007a78 	.word	0x08007a78

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08007a78 	.word	0x08007a78

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20001c14 	.word	0x20001c14

08000264 <strlen>:
 8000264:	4603      	mov	r3, r0
 8000266:	f813 2b01 	ldrb.w	r2, [r3], #1
 800026a:	2a00      	cmp	r2, #0
 800026c:	d1fb      	bne.n	8000266 <strlen+0x2>
 800026e:	1a18      	subs	r0, r3, r0
 8000270:	3801      	subs	r0, #1
 8000272:	4770      	bx	lr

08000274 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b084      	sub	sp, #16
 8000278:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

	DWT->CTRL|=(1<<0);
 800027a:	4b16      	ldr	r3, [pc, #88]	; (80002d4 <main+0x60>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	4a15      	ldr	r2, [pc, #84]	; (80002d4 <main+0x60>)
 8000280:	f043 0301 	orr.w	r3, r3, #1
 8000284:	6013      	str	r3, [r2, #0]
	  SEGGER_SYSVIEW_Conf();
 8000286:	f005 fe5f 	bl	8005f48 <SEGGER_SYSVIEW_Conf>
	  SEGGER_SYSVIEW_Start();
 800028a:	f006 fdeb 	bl	8006e64 <SEGGER_SYSVIEW_Start>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800028e:	f000 fa8d 	bl	80007ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000292:	f000 f82d 	bl	80002f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000296:	f000 f8ab 	bl	80003f0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800029a:	f000 f879 	bl	8000390 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  //sprintf(msg,"deneme1\n");
  //HAL_UART_Transmit(&huart1, (uint8_t*)msg,strlen(msg), 100);
  const char* task1param="Gorev1 was started\r\n";
 800029e:	4b0e      	ldr	r3, [pc, #56]	; (80002d8 <main+0x64>)
 80002a0:	607b      	str	r3, [r7, #4]
  const char* task2param="Gorev2 was started\r\n";
 80002a2:	4b0e      	ldr	r3, [pc, #56]	; (80002dc <main+0x68>)
 80002a4:	603b      	str	r3, [r7, #0]
 // char vtaskfunparam[30];
//  sprintf(vtaskfunparam,"ulIdlecount = %d  \r\n", (char)ulIdleCycleCount);
  xTaskCreate(Task1, "task1 ", configMINIMAL_STACK_SIZE, (void*)task1param, 3, NULL);
 80002a6:	2300      	movs	r3, #0
 80002a8:	9301      	str	r3, [sp, #4]
 80002aa:	2303      	movs	r3, #3
 80002ac:	9300      	str	r3, [sp, #0]
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	2280      	movs	r2, #128	; 0x80
 80002b2:	490b      	ldr	r1, [pc, #44]	; (80002e0 <main+0x6c>)
 80002b4:	480b      	ldr	r0, [pc, #44]	; (80002e4 <main+0x70>)
 80002b6:	f003 ffa1 	bl	80041fc <xTaskCreate>
  xTaskCreate(Task2, "task2 ", configMINIMAL_STACK_SIZE, (void*)task2param, 3, NULL);
 80002ba:	2300      	movs	r3, #0
 80002bc:	9301      	str	r3, [sp, #4]
 80002be:	2303      	movs	r3, #3
 80002c0:	9300      	str	r3, [sp, #0]
 80002c2:	683b      	ldr	r3, [r7, #0]
 80002c4:	2280      	movs	r2, #128	; 0x80
 80002c6:	4908      	ldr	r1, [pc, #32]	; (80002e8 <main+0x74>)
 80002c8:	4808      	ldr	r0, [pc, #32]	; (80002ec <main+0x78>)
 80002ca:	f003 ff97 	bl	80041fc <xTaskCreate>
 // xTaskCreate(vTaskFunction, "vtaskfunc ", configMINIMAL_STACK_SIZE, (void*)vtaskfunparam, 1, NULL);
  vTaskStartScheduler();
 80002ce:	f004 f93f 	bl	8004550 <vTaskStartScheduler>
  /* Start scheduler */
 // osKernelStart();
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002d2:	e7fe      	b.n	80002d2 <main+0x5e>
 80002d4:	e0001000 	.word	0xe0001000
 80002d8:	08007a90 	.word	0x08007a90
 80002dc:	08007aa8 	.word	0x08007aa8
 80002e0:	08007ac0 	.word	0x08007ac0
 80002e4:	080004a5 	.word	0x080004a5
 80002e8:	08007ac8 	.word	0x08007ac8
 80002ec:	080004d9 	.word	0x080004d9

080002f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b09e      	sub	sp, #120	; 0x78
 80002f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002f6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80002fa:	2228      	movs	r2, #40	; 0x28
 80002fc:	2100      	movs	r1, #0
 80002fe:	4618      	mov	r0, r3
 8000300:	f007 faf0 	bl	80078e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000304:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000308:	2200      	movs	r2, #0
 800030a:	601a      	str	r2, [r3, #0]
 800030c:	605a      	str	r2, [r3, #4]
 800030e:	609a      	str	r2, [r3, #8]
 8000310:	60da      	str	r2, [r3, #12]
 8000312:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000314:	463b      	mov	r3, r7
 8000316:	223c      	movs	r2, #60	; 0x3c
 8000318:	2100      	movs	r1, #0
 800031a:	4618      	mov	r0, r3
 800031c:	f007 fae2 	bl	80078e4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000320:	2302      	movs	r3, #2
 8000322:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000324:	2301      	movs	r3, #1
 8000326:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000328:	2310      	movs	r3, #16
 800032a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800032c:	2300      	movs	r3, #0
 800032e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000330:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000334:	4618      	mov	r0, r3
 8000336:	f000 fce3 	bl	8000d00 <HAL_RCC_OscConfig>
 800033a:	4603      	mov	r3, r0
 800033c:	2b00      	cmp	r3, #0
 800033e:	d001      	beq.n	8000344 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000340:	f000 f8f6 	bl	8000530 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000344:	230f      	movs	r3, #15
 8000346:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000348:	2300      	movs	r3, #0
 800034a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800034c:	2300      	movs	r3, #0
 800034e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000350:	2300      	movs	r3, #0
 8000352:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000354:	2300      	movs	r3, #0
 8000356:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000358:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800035c:	2100      	movs	r1, #0
 800035e:	4618      	mov	r0, r3
 8000360:	f001 fd0c 	bl	8001d7c <HAL_RCC_ClockConfig>
 8000364:	4603      	mov	r3, r0
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800036a:	f000 f8e1 	bl	8000530 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800036e:	2301      	movs	r3, #1
 8000370:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000372:	2300      	movs	r3, #0
 8000374:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000376:	463b      	mov	r3, r7
 8000378:	4618      	mov	r0, r3
 800037a:	f001 ff67 	bl	800224c <HAL_RCCEx_PeriphCLKConfig>
 800037e:	4603      	mov	r3, r0
 8000380:	2b00      	cmp	r3, #0
 8000382:	d001      	beq.n	8000388 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000384:	f000 f8d4 	bl	8000530 <Error_Handler>
  }
}
 8000388:	bf00      	nop
 800038a:	3778      	adds	r7, #120	; 0x78
 800038c:	46bd      	mov	sp, r7
 800038e:	bd80      	pop	{r7, pc}

08000390 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000394:	4b14      	ldr	r3, [pc, #80]	; (80003e8 <MX_USART1_UART_Init+0x58>)
 8000396:	4a15      	ldr	r2, [pc, #84]	; (80003ec <MX_USART1_UART_Init+0x5c>)
 8000398:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 800039a:	4b13      	ldr	r3, [pc, #76]	; (80003e8 <MX_USART1_UART_Init+0x58>)
 800039c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80003a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003a2:	4b11      	ldr	r3, [pc, #68]	; (80003e8 <MX_USART1_UART_Init+0x58>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003a8:	4b0f      	ldr	r3, [pc, #60]	; (80003e8 <MX_USART1_UART_Init+0x58>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003ae:	4b0e      	ldr	r3, [pc, #56]	; (80003e8 <MX_USART1_UART_Init+0x58>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003b4:	4b0c      	ldr	r3, [pc, #48]	; (80003e8 <MX_USART1_UART_Init+0x58>)
 80003b6:	220c      	movs	r2, #12
 80003b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003ba:	4b0b      	ldr	r3, [pc, #44]	; (80003e8 <MX_USART1_UART_Init+0x58>)
 80003bc:	2200      	movs	r2, #0
 80003be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003c0:	4b09      	ldr	r3, [pc, #36]	; (80003e8 <MX_USART1_UART_Init+0x58>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003c6:	4b08      	ldr	r3, [pc, #32]	; (80003e8 <MX_USART1_UART_Init+0x58>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003cc:	4b06      	ldr	r3, [pc, #24]	; (80003e8 <MX_USART1_UART_Init+0x58>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003d2:	4805      	ldr	r0, [pc, #20]	; (80003e8 <MX_USART1_UART_Init+0x58>)
 80003d4:	f002 fbac 	bl	8002b30 <HAL_UART_Init>
 80003d8:	4603      	mov	r3, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d001      	beq.n	80003e2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80003de:	f000 f8a7 	bl	8000530 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80003e2:	bf00      	nop
 80003e4:	bd80      	pop	{r7, pc}
 80003e6:	bf00      	nop
 80003e8:	20000090 	.word	0x20000090
 80003ec:	40013800 	.word	0x40013800

080003f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b088      	sub	sp, #32
 80003f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003f6:	f107 030c 	add.w	r3, r7, #12
 80003fa:	2200      	movs	r2, #0
 80003fc:	601a      	str	r2, [r3, #0]
 80003fe:	605a      	str	r2, [r3, #4]
 8000400:	609a      	str	r2, [r3, #8]
 8000402:	60da      	str	r2, [r3, #12]
 8000404:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000406:	4b1e      	ldr	r3, [pc, #120]	; (8000480 <MX_GPIO_Init+0x90>)
 8000408:	695b      	ldr	r3, [r3, #20]
 800040a:	4a1d      	ldr	r2, [pc, #116]	; (8000480 <MX_GPIO_Init+0x90>)
 800040c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000410:	6153      	str	r3, [r2, #20]
 8000412:	4b1b      	ldr	r3, [pc, #108]	; (8000480 <MX_GPIO_Init+0x90>)
 8000414:	695b      	ldr	r3, [r3, #20]
 8000416:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800041a:	60bb      	str	r3, [r7, #8]
 800041c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800041e:	4b18      	ldr	r3, [pc, #96]	; (8000480 <MX_GPIO_Init+0x90>)
 8000420:	695b      	ldr	r3, [r3, #20]
 8000422:	4a17      	ldr	r2, [pc, #92]	; (8000480 <MX_GPIO_Init+0x90>)
 8000424:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000428:	6153      	str	r3, [r2, #20]
 800042a:	4b15      	ldr	r3, [pc, #84]	; (8000480 <MX_GPIO_Init+0x90>)
 800042c:	695b      	ldr	r3, [r3, #20]
 800042e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000432:	607b      	str	r3, [r7, #4]
 8000434:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000436:	2200      	movs	r2, #0
 8000438:	2104      	movs	r1, #4
 800043a:	4812      	ldr	r0, [pc, #72]	; (8000484 <MX_GPIO_Init+0x94>)
 800043c:	f000 fc48 	bl	8000cd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000440:	2304      	movs	r3, #4
 8000442:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000444:	2301      	movs	r3, #1
 8000446:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000448:	2300      	movs	r3, #0
 800044a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800044c:	2300      	movs	r3, #0
 800044e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000450:	f107 030c 	add.w	r3, r7, #12
 8000454:	4619      	mov	r1, r3
 8000456:	480b      	ldr	r0, [pc, #44]	; (8000484 <MX_GPIO_Init+0x94>)
 8000458:	f000 fac0 	bl	80009dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800045c:	2301      	movs	r3, #1
 800045e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000460:	2300      	movs	r3, #0
 8000462:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000464:	2300      	movs	r3, #0
 8000466:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000468:	f107 030c 	add.w	r3, r7, #12
 800046c:	4619      	mov	r1, r3
 800046e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000472:	f000 fab3 	bl	80009dc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000476:	bf00      	nop
 8000478:	3720      	adds	r7, #32
 800047a:	46bd      	mov	sp, r7
 800047c:	bd80      	pop	{r7, pc}
 800047e:	bf00      	nop
 8000480:	40021000 	.word	0x40021000
 8000484:	48000800 	.word	0x48000800

08000488 <vApplicationIdleHook>:

/* USER CODE BEGIN 4 */

void vApplicationIdleHook(void){
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0

	ulIdleCycleCount++;
 800048c:	4b04      	ldr	r3, [pc, #16]	; (80004a0 <vApplicationIdleHook+0x18>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	3301      	adds	r3, #1
 8000492:	4a03      	ldr	r2, [pc, #12]	; (80004a0 <vApplicationIdleHook+0x18>)
 8000494:	6013      	str	r3, [r2, #0]

}
 8000496:	bf00      	nop
 8000498:	46bd      	mov	sp, r7
 800049a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049e:	4770      	bx	lr
 80004a0:	20000118 	.word	0x20000118

080004a4 <Task1>:
//
//}



void Task1(void* params){
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b084      	sub	sp, #16
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]

	char *msg= (char*)params;
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	60fb      	str	r3, [r7, #12]
   const TickType_t delayms= pdMS_TO_TICKS(250);
 80004b0:	23fa      	movs	r3, #250	; 0xfa
 80004b2:	60bb      	str	r3, [r7, #8]

	for(;;){

		HAL_UART_Transmit(&huart1, (uint8_t*) msg,strlen(msg),0xFFFF);
 80004b4:	68f8      	ldr	r0, [r7, #12]
 80004b6:	f7ff fed5 	bl	8000264 <strlen>
 80004ba:	4603      	mov	r3, r0
 80004bc:	b29a      	uxth	r2, r3
 80004be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004c2:	68f9      	ldr	r1, [r7, #12]
 80004c4:	4803      	ldr	r0, [pc, #12]	; (80004d4 <Task1+0x30>)
 80004c6:	f002 fb81 	bl	8002bcc <HAL_UART_Transmit>


		//for(int i=0;i<4000000;i++);
		vTaskDelay(delayms);
 80004ca:	68b8      	ldr	r0, [r7, #8]
 80004cc:	f004 f808 	bl	80044e0 <vTaskDelay>
		HAL_UART_Transmit(&huart1, (uint8_t*) msg,strlen(msg),0xFFFF);
 80004d0:	e7f0      	b.n	80004b4 <Task1+0x10>
 80004d2:	bf00      	nop
 80004d4:	20000090 	.word	0x20000090

080004d8 <Task2>:
	}

}
void Task2(void* params){
 80004d8:	b580      	push	{r7, lr}
 80004da:	b084      	sub	sp, #16
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]

	char *msg= (char*)params;
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	60fb      	str	r3, [r7, #12]
	const TickType_t delayms= pdMS_TO_TICKS(300);
 80004e4:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80004e8:	60bb      	str	r3, [r7, #8]
	//TickType_t count;
	//count=xTaskGetTickCount();
	for(;;){

		HAL_UART_Transmit(&huart1, (uint8_t*) msg,strlen(msg),0xFFFF);
 80004ea:	68f8      	ldr	r0, [r7, #12]
 80004ec:	f7ff feba 	bl	8000264 <strlen>
 80004f0:	4603      	mov	r3, r0
 80004f2:	b29a      	uxth	r2, r3
 80004f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004f8:	68f9      	ldr	r1, [r7, #12]
 80004fa:	4803      	ldr	r0, [pc, #12]	; (8000508 <Task2+0x30>)
 80004fc:	f002 fb66 	bl	8002bcc <HAL_UART_Transmit>

		//for(int i=0;i<8000000;i++);
		//vTaskDelayUntil(&count, delayms);
		vTaskDelay(delayms);
 8000500:	68b8      	ldr	r0, [r7, #8]
 8000502:	f003 ffed 	bl	80044e0 <vTaskDelay>
		HAL_UART_Transmit(&huart1, (uint8_t*) msg,strlen(msg),0xFFFF);
 8000506:	e7f0      	b.n	80004ea <Task2+0x12>
 8000508:	20000090 	.word	0x20000090

0800050c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM15) {
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4a04      	ldr	r2, [pc, #16]	; (800052c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800051a:	4293      	cmp	r3, r2
 800051c:	d101      	bne.n	8000522 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800051e:	f000 f95b 	bl	80007d8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000522:	bf00      	nop
 8000524:	3708      	adds	r7, #8
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	40014000 	.word	0x40014000

08000530 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000534:	b672      	cpsid	i
}
 8000536:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000538:	e7fe      	b.n	8000538 <Error_Handler+0x8>
	...

0800053c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000542:	4b11      	ldr	r3, [pc, #68]	; (8000588 <HAL_MspInit+0x4c>)
 8000544:	699b      	ldr	r3, [r3, #24]
 8000546:	4a10      	ldr	r2, [pc, #64]	; (8000588 <HAL_MspInit+0x4c>)
 8000548:	f043 0301 	orr.w	r3, r3, #1
 800054c:	6193      	str	r3, [r2, #24]
 800054e:	4b0e      	ldr	r3, [pc, #56]	; (8000588 <HAL_MspInit+0x4c>)
 8000550:	699b      	ldr	r3, [r3, #24]
 8000552:	f003 0301 	and.w	r3, r3, #1
 8000556:	607b      	str	r3, [r7, #4]
 8000558:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800055a:	4b0b      	ldr	r3, [pc, #44]	; (8000588 <HAL_MspInit+0x4c>)
 800055c:	69db      	ldr	r3, [r3, #28]
 800055e:	4a0a      	ldr	r2, [pc, #40]	; (8000588 <HAL_MspInit+0x4c>)
 8000560:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000564:	61d3      	str	r3, [r2, #28]
 8000566:	4b08      	ldr	r3, [pc, #32]	; (8000588 <HAL_MspInit+0x4c>)
 8000568:	69db      	ldr	r3, [r3, #28]
 800056a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800056e:	603b      	str	r3, [r7, #0]
 8000570:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000572:	2200      	movs	r2, #0
 8000574:	210f      	movs	r1, #15
 8000576:	f06f 0001 	mvn.w	r0, #1
 800057a:	f000 fa05 	bl	8000988 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800057e:	bf00      	nop
 8000580:	3708      	adds	r7, #8
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	40021000 	.word	0x40021000

0800058c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b08a      	sub	sp, #40	; 0x28
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000594:	f107 0314 	add.w	r3, r7, #20
 8000598:	2200      	movs	r2, #0
 800059a:	601a      	str	r2, [r3, #0]
 800059c:	605a      	str	r2, [r3, #4]
 800059e:	609a      	str	r2, [r3, #8]
 80005a0:	60da      	str	r2, [r3, #12]
 80005a2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a17      	ldr	r2, [pc, #92]	; (8000608 <HAL_UART_MspInit+0x7c>)
 80005aa:	4293      	cmp	r3, r2
 80005ac:	d127      	bne.n	80005fe <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80005ae:	4b17      	ldr	r3, [pc, #92]	; (800060c <HAL_UART_MspInit+0x80>)
 80005b0:	699b      	ldr	r3, [r3, #24]
 80005b2:	4a16      	ldr	r2, [pc, #88]	; (800060c <HAL_UART_MspInit+0x80>)
 80005b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005b8:	6193      	str	r3, [r2, #24]
 80005ba:	4b14      	ldr	r3, [pc, #80]	; (800060c <HAL_UART_MspInit+0x80>)
 80005bc:	699b      	ldr	r3, [r3, #24]
 80005be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005c2:	613b      	str	r3, [r7, #16]
 80005c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80005c6:	4b11      	ldr	r3, [pc, #68]	; (800060c <HAL_UART_MspInit+0x80>)
 80005c8:	695b      	ldr	r3, [r3, #20]
 80005ca:	4a10      	ldr	r2, [pc, #64]	; (800060c <HAL_UART_MspInit+0x80>)
 80005cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80005d0:	6153      	str	r3, [r2, #20]
 80005d2:	4b0e      	ldr	r3, [pc, #56]	; (800060c <HAL_UART_MspInit+0x80>)
 80005d4:	695b      	ldr	r3, [r3, #20]
 80005d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80005da:	60fb      	str	r3, [r7, #12]
 80005dc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80005de:	2330      	movs	r3, #48	; 0x30
 80005e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005e2:	2302      	movs	r3, #2
 80005e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e6:	2300      	movs	r3, #0
 80005e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005ea:	2303      	movs	r3, #3
 80005ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80005ee:	2307      	movs	r3, #7
 80005f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005f2:	f107 0314 	add.w	r3, r7, #20
 80005f6:	4619      	mov	r1, r3
 80005f8:	4805      	ldr	r0, [pc, #20]	; (8000610 <HAL_UART_MspInit+0x84>)
 80005fa:	f000 f9ef 	bl	80009dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80005fe:	bf00      	nop
 8000600:	3728      	adds	r7, #40	; 0x28
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	40013800 	.word	0x40013800
 800060c:	40021000 	.word	0x40021000
 8000610:	48000800 	.word	0x48000800

08000614 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b08c      	sub	sp, #48	; 0x30
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800061c:	2300      	movs	r3, #0
 800061e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000620:	2300      	movs	r3, #0
 8000622:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM15 clock */
  __HAL_RCC_TIM15_CLK_ENABLE();
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <HAL_InitTick+0xcc>)
 8000626:	699b      	ldr	r3, [r3, #24]
 8000628:	4a2d      	ldr	r2, [pc, #180]	; (80006e0 <HAL_InitTick+0xcc>)
 800062a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800062e:	6193      	str	r3, [r2, #24]
 8000630:	4b2b      	ldr	r3, [pc, #172]	; (80006e0 <HAL_InitTick+0xcc>)
 8000632:	699b      	ldr	r3, [r3, #24]
 8000634:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000638:	60bb      	str	r3, [r7, #8]
 800063a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800063c:	f107 020c 	add.w	r2, r7, #12
 8000640:	f107 0310 	add.w	r3, r7, #16
 8000644:	4611      	mov	r1, r2
 8000646:	4618      	mov	r0, r3
 8000648:	f001 fdce 	bl	80021e8 <HAL_RCC_GetClockConfig>

  /* Compute TIM15 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800064c:	f001 fdaa 	bl	80021a4 <HAL_RCC_GetPCLK2Freq>
 8000650:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM15 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000654:	4a23      	ldr	r2, [pc, #140]	; (80006e4 <HAL_InitTick+0xd0>)
 8000656:	fba2 2303 	umull	r2, r3, r2, r3
 800065a:	0c9b      	lsrs	r3, r3, #18
 800065c:	3b01      	subs	r3, #1
 800065e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM15 */
  htim15.Instance = TIM15;
 8000660:	4b21      	ldr	r3, [pc, #132]	; (80006e8 <HAL_InitTick+0xd4>)
 8000662:	4a22      	ldr	r2, [pc, #136]	; (80006ec <HAL_InitTick+0xd8>)
 8000664:	601a      	str	r2, [r3, #0]
  + Period = [(TIM15CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim15.Init.Period = (1000000U / 1000U) - 1U;
 8000666:	4b20      	ldr	r3, [pc, #128]	; (80006e8 <HAL_InitTick+0xd4>)
 8000668:	f240 32e7 	movw	r2, #999	; 0x3e7
 800066c:	60da      	str	r2, [r3, #12]
  htim15.Init.Prescaler = uwPrescalerValue;
 800066e:	4a1e      	ldr	r2, [pc, #120]	; (80006e8 <HAL_InitTick+0xd4>)
 8000670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000672:	6053      	str	r3, [r2, #4]
  htim15.Init.ClockDivision = 0;
 8000674:	4b1c      	ldr	r3, [pc, #112]	; (80006e8 <HAL_InitTick+0xd4>)
 8000676:	2200      	movs	r2, #0
 8000678:	611a      	str	r2, [r3, #16]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800067a:	4b1b      	ldr	r3, [pc, #108]	; (80006e8 <HAL_InitTick+0xd4>)
 800067c:	2200      	movs	r2, #0
 800067e:	609a      	str	r2, [r3, #8]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000680:	4b19      	ldr	r3, [pc, #100]	; (80006e8 <HAL_InitTick+0xd4>)
 8000682:	2200      	movs	r2, #0
 8000684:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim15);
 8000686:	4818      	ldr	r0, [pc, #96]	; (80006e8 <HAL_InitTick+0xd4>)
 8000688:	f001 ff90 	bl	80025ac <HAL_TIM_Base_Init>
 800068c:	4603      	mov	r3, r0
 800068e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000692:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000696:	2b00      	cmp	r3, #0
 8000698:	d11b      	bne.n	80006d2 <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim15);
 800069a:	4813      	ldr	r0, [pc, #76]	; (80006e8 <HAL_InitTick+0xd4>)
 800069c:	f001 ffe8 	bl	8002670 <HAL_TIM_Base_Start_IT>
 80006a0:	4603      	mov	r3, r0
 80006a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80006a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d111      	bne.n	80006d2 <HAL_InitTick+0xbe>
    {
    /* Enable the TIM15 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80006ae:	2018      	movs	r0, #24
 80006b0:	f000 f986 	bl	80009c0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	2b0f      	cmp	r3, #15
 80006b8:	d808      	bhi.n	80006cc <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, TickPriority, 0U);
 80006ba:	2200      	movs	r2, #0
 80006bc:	6879      	ldr	r1, [r7, #4]
 80006be:	2018      	movs	r0, #24
 80006c0:	f000 f962 	bl	8000988 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006c4:	4a0a      	ldr	r2, [pc, #40]	; (80006f0 <HAL_InitTick+0xdc>)
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	6013      	str	r3, [r2, #0]
 80006ca:	e002      	b.n	80006d2 <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 80006cc:	2301      	movs	r3, #1
 80006ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80006d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80006d6:	4618      	mov	r0, r3
 80006d8:	3730      	adds	r7, #48	; 0x30
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	40021000 	.word	0x40021000
 80006e4:	431bde83 	.word	0x431bde83
 80006e8:	2000011c 	.word	0x2000011c
 80006ec:	40014000 	.word	0x40014000
 80006f0:	20000004 	.word	0x20000004

080006f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006f8:	e7fe      	b.n	80006f8 <NMI_Handler+0x4>

080006fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006fa:	b480      	push	{r7}
 80006fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006fe:	e7fe      	b.n	80006fe <HardFault_Handler+0x4>

08000700 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000704:	e7fe      	b.n	8000704 <MemManage_Handler+0x4>

08000706 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000706:	b480      	push	{r7}
 8000708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800070a:	e7fe      	b.n	800070a <BusFault_Handler+0x4>

0800070c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000710:	e7fe      	b.n	8000710 <UsageFault_Handler+0x4>

08000712 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000712:	b480      	push	{r7}
 8000714:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000716:	bf00      	nop
 8000718:	46bd      	mov	sp, r7
 800071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071e:	4770      	bx	lr

08000720 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break and TIM15 interrupts.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8000724:	4802      	ldr	r0, [pc, #8]	; (8000730 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8000726:	f002 f80d 	bl	8002744 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	2000011c 	.word	0x2000011c

08000734 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000738:	4b06      	ldr	r3, [pc, #24]	; (8000754 <SystemInit+0x20>)
 800073a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800073e:	4a05      	ldr	r2, [pc, #20]	; (8000754 <SystemInit+0x20>)
 8000740:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000744:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000748:	bf00      	nop
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop
 8000754:	e000ed00 	.word	0xe000ed00

08000758 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000758:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000790 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800075c:	f7ff ffea 	bl	8000734 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000760:	480c      	ldr	r0, [pc, #48]	; (8000794 <LoopForever+0x6>)
  ldr r1, =_edata
 8000762:	490d      	ldr	r1, [pc, #52]	; (8000798 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000764:	4a0d      	ldr	r2, [pc, #52]	; (800079c <LoopForever+0xe>)
  movs r3, #0
 8000766:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000768:	e002      	b.n	8000770 <LoopCopyDataInit>

0800076a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800076a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800076c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800076e:	3304      	adds	r3, #4

08000770 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000770:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000772:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000774:	d3f9      	bcc.n	800076a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000776:	4a0a      	ldr	r2, [pc, #40]	; (80007a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000778:	4c0a      	ldr	r4, [pc, #40]	; (80007a4 <LoopForever+0x16>)
  movs r3, #0
 800077a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800077c:	e001      	b.n	8000782 <LoopFillZerobss>

0800077e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800077e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000780:	3204      	adds	r2, #4

08000782 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000782:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000784:	d3fb      	bcc.n	800077e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000786:	f007 f869 	bl	800785c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800078a:	f7ff fd73 	bl	8000274 <main>

0800078e <LoopForever>:

LoopForever:
    b LoopForever
 800078e:	e7fe      	b.n	800078e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000790:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000794:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000798:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800079c:	08007c68 	.word	0x08007c68
  ldr r2, =_sbss
 80007a0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80007a4:	200025ec 	.word	0x200025ec

080007a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80007a8:	e7fe      	b.n	80007a8 <ADC1_2_IRQHandler>
	...

080007ac <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007b0:	4b08      	ldr	r3, [pc, #32]	; (80007d4 <HAL_Init+0x28>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a07      	ldr	r2, [pc, #28]	; (80007d4 <HAL_Init+0x28>)
 80007b6:	f043 0310 	orr.w	r3, r3, #16
 80007ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007bc:	2003      	movs	r0, #3
 80007be:	f000 f8d8 	bl	8000972 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007c2:	200f      	movs	r0, #15
 80007c4:	f7ff ff26 	bl	8000614 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007c8:	f7ff feb8 	bl	800053c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007cc:	2300      	movs	r3, #0
}
 80007ce:	4618      	mov	r0, r3
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	40022000 	.word	0x40022000

080007d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007dc:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <HAL_IncTick+0x20>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	461a      	mov	r2, r3
 80007e2:	4b06      	ldr	r3, [pc, #24]	; (80007fc <HAL_IncTick+0x24>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	4413      	add	r3, r2
 80007e8:	4a04      	ldr	r2, [pc, #16]	; (80007fc <HAL_IncTick+0x24>)
 80007ea:	6013      	str	r3, [r2, #0]
}
 80007ec:	bf00      	nop
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	20000008 	.word	0x20000008
 80007fc:	20000168 	.word	0x20000168

08000800 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  return uwTick;  
 8000804:	4b03      	ldr	r3, [pc, #12]	; (8000814 <HAL_GetTick+0x14>)
 8000806:	681b      	ldr	r3, [r3, #0]
}
 8000808:	4618      	mov	r0, r3
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	20000168 	.word	0x20000168

08000818 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000818:	b480      	push	{r7}
 800081a:	b085      	sub	sp, #20
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	f003 0307 	and.w	r3, r3, #7
 8000826:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000828:	4b0c      	ldr	r3, [pc, #48]	; (800085c <__NVIC_SetPriorityGrouping+0x44>)
 800082a:	68db      	ldr	r3, [r3, #12]
 800082c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800082e:	68ba      	ldr	r2, [r7, #8]
 8000830:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000834:	4013      	ands	r3, r2
 8000836:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800083c:	68bb      	ldr	r3, [r7, #8]
 800083e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000840:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000844:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000848:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800084a:	4a04      	ldr	r2, [pc, #16]	; (800085c <__NVIC_SetPriorityGrouping+0x44>)
 800084c:	68bb      	ldr	r3, [r7, #8]
 800084e:	60d3      	str	r3, [r2, #12]
}
 8000850:	bf00      	nop
 8000852:	3714      	adds	r7, #20
 8000854:	46bd      	mov	sp, r7
 8000856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085a:	4770      	bx	lr
 800085c:	e000ed00 	.word	0xe000ed00

08000860 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000864:	4b04      	ldr	r3, [pc, #16]	; (8000878 <__NVIC_GetPriorityGrouping+0x18>)
 8000866:	68db      	ldr	r3, [r3, #12]
 8000868:	0a1b      	lsrs	r3, r3, #8
 800086a:	f003 0307 	and.w	r3, r3, #7
}
 800086e:	4618      	mov	r0, r3
 8000870:	46bd      	mov	sp, r7
 8000872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000876:	4770      	bx	lr
 8000878:	e000ed00 	.word	0xe000ed00

0800087c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800087c:	b480      	push	{r7}
 800087e:	b083      	sub	sp, #12
 8000880:	af00      	add	r7, sp, #0
 8000882:	4603      	mov	r3, r0
 8000884:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800088a:	2b00      	cmp	r3, #0
 800088c:	db0b      	blt.n	80008a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800088e:	79fb      	ldrb	r3, [r7, #7]
 8000890:	f003 021f 	and.w	r2, r3, #31
 8000894:	4907      	ldr	r1, [pc, #28]	; (80008b4 <__NVIC_EnableIRQ+0x38>)
 8000896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800089a:	095b      	lsrs	r3, r3, #5
 800089c:	2001      	movs	r0, #1
 800089e:	fa00 f202 	lsl.w	r2, r0, r2
 80008a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008a6:	bf00      	nop
 80008a8:	370c      	adds	r7, #12
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop
 80008b4:	e000e100 	.word	0xe000e100

080008b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0
 80008be:	4603      	mov	r3, r0
 80008c0:	6039      	str	r1, [r7, #0]
 80008c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	db0a      	blt.n	80008e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	b2da      	uxtb	r2, r3
 80008d0:	490c      	ldr	r1, [pc, #48]	; (8000904 <__NVIC_SetPriority+0x4c>)
 80008d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d6:	0112      	lsls	r2, r2, #4
 80008d8:	b2d2      	uxtb	r2, r2
 80008da:	440b      	add	r3, r1
 80008dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008e0:	e00a      	b.n	80008f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	b2da      	uxtb	r2, r3
 80008e6:	4908      	ldr	r1, [pc, #32]	; (8000908 <__NVIC_SetPriority+0x50>)
 80008e8:	79fb      	ldrb	r3, [r7, #7]
 80008ea:	f003 030f 	and.w	r3, r3, #15
 80008ee:	3b04      	subs	r3, #4
 80008f0:	0112      	lsls	r2, r2, #4
 80008f2:	b2d2      	uxtb	r2, r2
 80008f4:	440b      	add	r3, r1
 80008f6:	761a      	strb	r2, [r3, #24]
}
 80008f8:	bf00      	nop
 80008fa:	370c      	adds	r7, #12
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr
 8000904:	e000e100 	.word	0xe000e100
 8000908:	e000ed00 	.word	0xe000ed00

0800090c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800090c:	b480      	push	{r7}
 800090e:	b089      	sub	sp, #36	; 0x24
 8000910:	af00      	add	r7, sp, #0
 8000912:	60f8      	str	r0, [r7, #12]
 8000914:	60b9      	str	r1, [r7, #8]
 8000916:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	f003 0307 	and.w	r3, r3, #7
 800091e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000920:	69fb      	ldr	r3, [r7, #28]
 8000922:	f1c3 0307 	rsb	r3, r3, #7
 8000926:	2b04      	cmp	r3, #4
 8000928:	bf28      	it	cs
 800092a:	2304      	movcs	r3, #4
 800092c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800092e:	69fb      	ldr	r3, [r7, #28]
 8000930:	3304      	adds	r3, #4
 8000932:	2b06      	cmp	r3, #6
 8000934:	d902      	bls.n	800093c <NVIC_EncodePriority+0x30>
 8000936:	69fb      	ldr	r3, [r7, #28]
 8000938:	3b03      	subs	r3, #3
 800093a:	e000      	b.n	800093e <NVIC_EncodePriority+0x32>
 800093c:	2300      	movs	r3, #0
 800093e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000940:	f04f 32ff 	mov.w	r2, #4294967295
 8000944:	69bb      	ldr	r3, [r7, #24]
 8000946:	fa02 f303 	lsl.w	r3, r2, r3
 800094a:	43da      	mvns	r2, r3
 800094c:	68bb      	ldr	r3, [r7, #8]
 800094e:	401a      	ands	r2, r3
 8000950:	697b      	ldr	r3, [r7, #20]
 8000952:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000954:	f04f 31ff 	mov.w	r1, #4294967295
 8000958:	697b      	ldr	r3, [r7, #20]
 800095a:	fa01 f303 	lsl.w	r3, r1, r3
 800095e:	43d9      	mvns	r1, r3
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000964:	4313      	orrs	r3, r2
         );
}
 8000966:	4618      	mov	r0, r3
 8000968:	3724      	adds	r7, #36	; 0x24
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr

08000972 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000972:	b580      	push	{r7, lr}
 8000974:	b082      	sub	sp, #8
 8000976:	af00      	add	r7, sp, #0
 8000978:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800097a:	6878      	ldr	r0, [r7, #4]
 800097c:	f7ff ff4c 	bl	8000818 <__NVIC_SetPriorityGrouping>
}
 8000980:	bf00      	nop
 8000982:	3708      	adds	r7, #8
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}

08000988 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b086      	sub	sp, #24
 800098c:	af00      	add	r7, sp, #0
 800098e:	4603      	mov	r3, r0
 8000990:	60b9      	str	r1, [r7, #8]
 8000992:	607a      	str	r2, [r7, #4]
 8000994:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000996:	2300      	movs	r3, #0
 8000998:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800099a:	f7ff ff61 	bl	8000860 <__NVIC_GetPriorityGrouping>
 800099e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009a0:	687a      	ldr	r2, [r7, #4]
 80009a2:	68b9      	ldr	r1, [r7, #8]
 80009a4:	6978      	ldr	r0, [r7, #20]
 80009a6:	f7ff ffb1 	bl	800090c <NVIC_EncodePriority>
 80009aa:	4602      	mov	r2, r0
 80009ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009b0:	4611      	mov	r1, r2
 80009b2:	4618      	mov	r0, r3
 80009b4:	f7ff ff80 	bl	80008b8 <__NVIC_SetPriority>
}
 80009b8:	bf00      	nop
 80009ba:	3718      	adds	r7, #24
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}

080009c0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	4603      	mov	r3, r0
 80009c8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ce:	4618      	mov	r0, r3
 80009d0:	f7ff ff54 	bl	800087c <__NVIC_EnableIRQ>
}
 80009d4:	bf00      	nop
 80009d6:	3708      	adds	r7, #8
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}

080009dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009dc:	b480      	push	{r7}
 80009de:	b087      	sub	sp, #28
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
 80009e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009e6:	2300      	movs	r3, #0
 80009e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009ea:	e154      	b.n	8000c96 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	681a      	ldr	r2, [r3, #0]
 80009f0:	2101      	movs	r1, #1
 80009f2:	697b      	ldr	r3, [r7, #20]
 80009f4:	fa01 f303 	lsl.w	r3, r1, r3
 80009f8:	4013      	ands	r3, r2
 80009fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	f000 8146 	beq.w	8000c90 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	685b      	ldr	r3, [r3, #4]
 8000a08:	f003 0303 	and.w	r3, r3, #3
 8000a0c:	2b01      	cmp	r3, #1
 8000a0e:	d005      	beq.n	8000a1c <HAL_GPIO_Init+0x40>
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	685b      	ldr	r3, [r3, #4]
 8000a14:	f003 0303 	and.w	r3, r3, #3
 8000a18:	2b02      	cmp	r3, #2
 8000a1a:	d130      	bne.n	8000a7e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	689b      	ldr	r3, [r3, #8]
 8000a20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000a22:	697b      	ldr	r3, [r7, #20]
 8000a24:	005b      	lsls	r3, r3, #1
 8000a26:	2203      	movs	r2, #3
 8000a28:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2c:	43db      	mvns	r3, r3
 8000a2e:	693a      	ldr	r2, [r7, #16]
 8000a30:	4013      	ands	r3, r2
 8000a32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	68da      	ldr	r2, [r3, #12]
 8000a38:	697b      	ldr	r3, [r7, #20]
 8000a3a:	005b      	lsls	r3, r3, #1
 8000a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a40:	693a      	ldr	r2, [r7, #16]
 8000a42:	4313      	orrs	r3, r2
 8000a44:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	693a      	ldr	r2, [r7, #16]
 8000a4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	685b      	ldr	r3, [r3, #4]
 8000a50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a52:	2201      	movs	r2, #1
 8000a54:	697b      	ldr	r3, [r7, #20]
 8000a56:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5a:	43db      	mvns	r3, r3
 8000a5c:	693a      	ldr	r2, [r7, #16]
 8000a5e:	4013      	ands	r3, r2
 8000a60:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	685b      	ldr	r3, [r3, #4]
 8000a66:	091b      	lsrs	r3, r3, #4
 8000a68:	f003 0201 	and.w	r2, r3, #1
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a72:	693a      	ldr	r2, [r7, #16]
 8000a74:	4313      	orrs	r3, r2
 8000a76:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	693a      	ldr	r2, [r7, #16]
 8000a7c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	685b      	ldr	r3, [r3, #4]
 8000a82:	f003 0303 	and.w	r3, r3, #3
 8000a86:	2b03      	cmp	r3, #3
 8000a88:	d017      	beq.n	8000aba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	68db      	ldr	r3, [r3, #12]
 8000a8e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	005b      	lsls	r3, r3, #1
 8000a94:	2203      	movs	r2, #3
 8000a96:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9a:	43db      	mvns	r3, r3
 8000a9c:	693a      	ldr	r2, [r7, #16]
 8000a9e:	4013      	ands	r3, r2
 8000aa0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	689a      	ldr	r2, [r3, #8]
 8000aa6:	697b      	ldr	r3, [r7, #20]
 8000aa8:	005b      	lsls	r3, r3, #1
 8000aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000aae:	693a      	ldr	r2, [r7, #16]
 8000ab0:	4313      	orrs	r3, r2
 8000ab2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	693a      	ldr	r2, [r7, #16]
 8000ab8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	685b      	ldr	r3, [r3, #4]
 8000abe:	f003 0303 	and.w	r3, r3, #3
 8000ac2:	2b02      	cmp	r3, #2
 8000ac4:	d123      	bne.n	8000b0e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ac6:	697b      	ldr	r3, [r7, #20]
 8000ac8:	08da      	lsrs	r2, r3, #3
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	3208      	adds	r2, #8
 8000ace:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ad2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	f003 0307 	and.w	r3, r3, #7
 8000ada:	009b      	lsls	r3, r3, #2
 8000adc:	220f      	movs	r2, #15
 8000ade:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae2:	43db      	mvns	r3, r3
 8000ae4:	693a      	ldr	r2, [r7, #16]
 8000ae6:	4013      	ands	r3, r2
 8000ae8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	691a      	ldr	r2, [r3, #16]
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	f003 0307 	and.w	r3, r3, #7
 8000af4:	009b      	lsls	r3, r3, #2
 8000af6:	fa02 f303 	lsl.w	r3, r2, r3
 8000afa:	693a      	ldr	r2, [r7, #16]
 8000afc:	4313      	orrs	r3, r2
 8000afe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	08da      	lsrs	r2, r3, #3
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	3208      	adds	r2, #8
 8000b08:	6939      	ldr	r1, [r7, #16]
 8000b0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	005b      	lsls	r3, r3, #1
 8000b18:	2203      	movs	r2, #3
 8000b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1e:	43db      	mvns	r3, r3
 8000b20:	693a      	ldr	r2, [r7, #16]
 8000b22:	4013      	ands	r3, r2
 8000b24:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	685b      	ldr	r3, [r3, #4]
 8000b2a:	f003 0203 	and.w	r2, r3, #3
 8000b2e:	697b      	ldr	r3, [r7, #20]
 8000b30:	005b      	lsls	r3, r3, #1
 8000b32:	fa02 f303 	lsl.w	r3, r2, r3
 8000b36:	693a      	ldr	r2, [r7, #16]
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	693a      	ldr	r2, [r7, #16]
 8000b40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	f000 80a0 	beq.w	8000c90 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b50:	4b58      	ldr	r3, [pc, #352]	; (8000cb4 <HAL_GPIO_Init+0x2d8>)
 8000b52:	699b      	ldr	r3, [r3, #24]
 8000b54:	4a57      	ldr	r2, [pc, #348]	; (8000cb4 <HAL_GPIO_Init+0x2d8>)
 8000b56:	f043 0301 	orr.w	r3, r3, #1
 8000b5a:	6193      	str	r3, [r2, #24]
 8000b5c:	4b55      	ldr	r3, [pc, #340]	; (8000cb4 <HAL_GPIO_Init+0x2d8>)
 8000b5e:	699b      	ldr	r3, [r3, #24]
 8000b60:	f003 0301 	and.w	r3, r3, #1
 8000b64:	60bb      	str	r3, [r7, #8]
 8000b66:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b68:	4a53      	ldr	r2, [pc, #332]	; (8000cb8 <HAL_GPIO_Init+0x2dc>)
 8000b6a:	697b      	ldr	r3, [r7, #20]
 8000b6c:	089b      	lsrs	r3, r3, #2
 8000b6e:	3302      	adds	r3, #2
 8000b70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b74:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b76:	697b      	ldr	r3, [r7, #20]
 8000b78:	f003 0303 	and.w	r3, r3, #3
 8000b7c:	009b      	lsls	r3, r3, #2
 8000b7e:	220f      	movs	r2, #15
 8000b80:	fa02 f303 	lsl.w	r3, r2, r3
 8000b84:	43db      	mvns	r3, r3
 8000b86:	693a      	ldr	r2, [r7, #16]
 8000b88:	4013      	ands	r3, r2
 8000b8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000b92:	d019      	beq.n	8000bc8 <HAL_GPIO_Init+0x1ec>
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	4a49      	ldr	r2, [pc, #292]	; (8000cbc <HAL_GPIO_Init+0x2e0>)
 8000b98:	4293      	cmp	r3, r2
 8000b9a:	d013      	beq.n	8000bc4 <HAL_GPIO_Init+0x1e8>
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	4a48      	ldr	r2, [pc, #288]	; (8000cc0 <HAL_GPIO_Init+0x2e4>)
 8000ba0:	4293      	cmp	r3, r2
 8000ba2:	d00d      	beq.n	8000bc0 <HAL_GPIO_Init+0x1e4>
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	4a47      	ldr	r2, [pc, #284]	; (8000cc4 <HAL_GPIO_Init+0x2e8>)
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d007      	beq.n	8000bbc <HAL_GPIO_Init+0x1e0>
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	4a46      	ldr	r2, [pc, #280]	; (8000cc8 <HAL_GPIO_Init+0x2ec>)
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	d101      	bne.n	8000bb8 <HAL_GPIO_Init+0x1dc>
 8000bb4:	2304      	movs	r3, #4
 8000bb6:	e008      	b.n	8000bca <HAL_GPIO_Init+0x1ee>
 8000bb8:	2305      	movs	r3, #5
 8000bba:	e006      	b.n	8000bca <HAL_GPIO_Init+0x1ee>
 8000bbc:	2303      	movs	r3, #3
 8000bbe:	e004      	b.n	8000bca <HAL_GPIO_Init+0x1ee>
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	e002      	b.n	8000bca <HAL_GPIO_Init+0x1ee>
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	e000      	b.n	8000bca <HAL_GPIO_Init+0x1ee>
 8000bc8:	2300      	movs	r3, #0
 8000bca:	697a      	ldr	r2, [r7, #20]
 8000bcc:	f002 0203 	and.w	r2, r2, #3
 8000bd0:	0092      	lsls	r2, r2, #2
 8000bd2:	4093      	lsls	r3, r2
 8000bd4:	693a      	ldr	r2, [r7, #16]
 8000bd6:	4313      	orrs	r3, r2
 8000bd8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000bda:	4937      	ldr	r1, [pc, #220]	; (8000cb8 <HAL_GPIO_Init+0x2dc>)
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	089b      	lsrs	r3, r3, #2
 8000be0:	3302      	adds	r3, #2
 8000be2:	693a      	ldr	r2, [r7, #16]
 8000be4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000be8:	4b38      	ldr	r3, [pc, #224]	; (8000ccc <HAL_GPIO_Init+0x2f0>)
 8000bea:	689b      	ldr	r3, [r3, #8]
 8000bec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	43db      	mvns	r3, r3
 8000bf2:	693a      	ldr	r2, [r7, #16]
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d003      	beq.n	8000c0c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000c04:	693a      	ldr	r2, [r7, #16]
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c0c:	4a2f      	ldr	r2, [pc, #188]	; (8000ccc <HAL_GPIO_Init+0x2f0>)
 8000c0e:	693b      	ldr	r3, [r7, #16]
 8000c10:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000c12:	4b2e      	ldr	r3, [pc, #184]	; (8000ccc <HAL_GPIO_Init+0x2f0>)
 8000c14:	68db      	ldr	r3, [r3, #12]
 8000c16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	43db      	mvns	r3, r3
 8000c1c:	693a      	ldr	r2, [r7, #16]
 8000c1e:	4013      	ands	r3, r2
 8000c20:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d003      	beq.n	8000c36 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000c2e:	693a      	ldr	r2, [r7, #16]
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	4313      	orrs	r3, r2
 8000c34:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000c36:	4a25      	ldr	r2, [pc, #148]	; (8000ccc <HAL_GPIO_Init+0x2f0>)
 8000c38:	693b      	ldr	r3, [r7, #16]
 8000c3a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000c3c:	4b23      	ldr	r3, [pc, #140]	; (8000ccc <HAL_GPIO_Init+0x2f0>)
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	43db      	mvns	r3, r3
 8000c46:	693a      	ldr	r2, [r7, #16]
 8000c48:	4013      	ands	r3, r2
 8000c4a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d003      	beq.n	8000c60 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000c58:	693a      	ldr	r2, [r7, #16]
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000c60:	4a1a      	ldr	r2, [pc, #104]	; (8000ccc <HAL_GPIO_Init+0x2f0>)
 8000c62:	693b      	ldr	r3, [r7, #16]
 8000c64:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c66:	4b19      	ldr	r3, [pc, #100]	; (8000ccc <HAL_GPIO_Init+0x2f0>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	43db      	mvns	r3, r3
 8000c70:	693a      	ldr	r2, [r7, #16]
 8000c72:	4013      	ands	r3, r2
 8000c74:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d003      	beq.n	8000c8a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000c82:	693a      	ldr	r2, [r7, #16]
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	4313      	orrs	r3, r2
 8000c88:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000c8a:	4a10      	ldr	r2, [pc, #64]	; (8000ccc <HAL_GPIO_Init+0x2f0>)
 8000c8c:	693b      	ldr	r3, [r7, #16]
 8000c8e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	3301      	adds	r3, #1
 8000c94:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	681a      	ldr	r2, [r3, #0]
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	fa22 f303 	lsr.w	r3, r2, r3
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	f47f aea3 	bne.w	80009ec <HAL_GPIO_Init+0x10>
  }
}
 8000ca6:	bf00      	nop
 8000ca8:	bf00      	nop
 8000caa:	371c      	adds	r7, #28
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr
 8000cb4:	40021000 	.word	0x40021000
 8000cb8:	40010000 	.word	0x40010000
 8000cbc:	48000400 	.word	0x48000400
 8000cc0:	48000800 	.word	0x48000800
 8000cc4:	48000c00 	.word	0x48000c00
 8000cc8:	48001000 	.word	0x48001000
 8000ccc:	40010400 	.word	0x40010400

08000cd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
 8000cd8:	460b      	mov	r3, r1
 8000cda:	807b      	strh	r3, [r7, #2]
 8000cdc:	4613      	mov	r3, r2
 8000cde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ce0:	787b      	ldrb	r3, [r7, #1]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d003      	beq.n	8000cee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ce6:	887a      	ldrh	r2, [r7, #2]
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000cec:	e002      	b.n	8000cf4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000cee:	887a      	ldrh	r2, [r7, #2]
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000cf4:	bf00      	nop
 8000cf6:	370c      	adds	r7, #12
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr

08000d00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d0c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d10:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d16:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d102      	bne.n	8000d26 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000d20:	2301      	movs	r3, #1
 8000d22:	f001 b823 	b.w	8001d6c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d2a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f003 0301 	and.w	r3, r3, #1
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	f000 817d 	beq.w	8001036 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000d3c:	4bbc      	ldr	r3, [pc, #752]	; (8001030 <HAL_RCC_OscConfig+0x330>)
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	f003 030c 	and.w	r3, r3, #12
 8000d44:	2b04      	cmp	r3, #4
 8000d46:	d00c      	beq.n	8000d62 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d48:	4bb9      	ldr	r3, [pc, #740]	; (8001030 <HAL_RCC_OscConfig+0x330>)
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	f003 030c 	and.w	r3, r3, #12
 8000d50:	2b08      	cmp	r3, #8
 8000d52:	d15c      	bne.n	8000e0e <HAL_RCC_OscConfig+0x10e>
 8000d54:	4bb6      	ldr	r3, [pc, #728]	; (8001030 <HAL_RCC_OscConfig+0x330>)
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d60:	d155      	bne.n	8000e0e <HAL_RCC_OscConfig+0x10e>
 8000d62:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d66:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d6a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000d6e:	fa93 f3a3 	rbit	r3, r3
 8000d72:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000d76:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d7a:	fab3 f383 	clz	r3, r3
 8000d7e:	b2db      	uxtb	r3, r3
 8000d80:	095b      	lsrs	r3, r3, #5
 8000d82:	b2db      	uxtb	r3, r3
 8000d84:	f043 0301 	orr.w	r3, r3, #1
 8000d88:	b2db      	uxtb	r3, r3
 8000d8a:	2b01      	cmp	r3, #1
 8000d8c:	d102      	bne.n	8000d94 <HAL_RCC_OscConfig+0x94>
 8000d8e:	4ba8      	ldr	r3, [pc, #672]	; (8001030 <HAL_RCC_OscConfig+0x330>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	e015      	b.n	8000dc0 <HAL_RCC_OscConfig+0xc0>
 8000d94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d98:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d9c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000da0:	fa93 f3a3 	rbit	r3, r3
 8000da4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000da8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dac:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000db0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000db4:	fa93 f3a3 	rbit	r3, r3
 8000db8:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000dbc:	4b9c      	ldr	r3, [pc, #624]	; (8001030 <HAL_RCC_OscConfig+0x330>)
 8000dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dc0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000dc4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000dc8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000dcc:	fa92 f2a2 	rbit	r2, r2
 8000dd0:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000dd4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000dd8:	fab2 f282 	clz	r2, r2
 8000ddc:	b2d2      	uxtb	r2, r2
 8000dde:	f042 0220 	orr.w	r2, r2, #32
 8000de2:	b2d2      	uxtb	r2, r2
 8000de4:	f002 021f 	and.w	r2, r2, #31
 8000de8:	2101      	movs	r1, #1
 8000dea:	fa01 f202 	lsl.w	r2, r1, r2
 8000dee:	4013      	ands	r3, r2
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	f000 811f 	beq.w	8001034 <HAL_RCC_OscConfig+0x334>
 8000df6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000dfa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	f040 8116 	bne.w	8001034 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	f000 bfaf 	b.w	8001d6c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e12:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e1e:	d106      	bne.n	8000e2e <HAL_RCC_OscConfig+0x12e>
 8000e20:	4b83      	ldr	r3, [pc, #524]	; (8001030 <HAL_RCC_OscConfig+0x330>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a82      	ldr	r2, [pc, #520]	; (8001030 <HAL_RCC_OscConfig+0x330>)
 8000e26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e2a:	6013      	str	r3, [r2, #0]
 8000e2c:	e036      	b.n	8000e9c <HAL_RCC_OscConfig+0x19c>
 8000e2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e32:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d10c      	bne.n	8000e58 <HAL_RCC_OscConfig+0x158>
 8000e3e:	4b7c      	ldr	r3, [pc, #496]	; (8001030 <HAL_RCC_OscConfig+0x330>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4a7b      	ldr	r2, [pc, #492]	; (8001030 <HAL_RCC_OscConfig+0x330>)
 8000e44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e48:	6013      	str	r3, [r2, #0]
 8000e4a:	4b79      	ldr	r3, [pc, #484]	; (8001030 <HAL_RCC_OscConfig+0x330>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4a78      	ldr	r2, [pc, #480]	; (8001030 <HAL_RCC_OscConfig+0x330>)
 8000e50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e54:	6013      	str	r3, [r2, #0]
 8000e56:	e021      	b.n	8000e9c <HAL_RCC_OscConfig+0x19c>
 8000e58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e5c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e68:	d10c      	bne.n	8000e84 <HAL_RCC_OscConfig+0x184>
 8000e6a:	4b71      	ldr	r3, [pc, #452]	; (8001030 <HAL_RCC_OscConfig+0x330>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4a70      	ldr	r2, [pc, #448]	; (8001030 <HAL_RCC_OscConfig+0x330>)
 8000e70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e74:	6013      	str	r3, [r2, #0]
 8000e76:	4b6e      	ldr	r3, [pc, #440]	; (8001030 <HAL_RCC_OscConfig+0x330>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4a6d      	ldr	r2, [pc, #436]	; (8001030 <HAL_RCC_OscConfig+0x330>)
 8000e7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e80:	6013      	str	r3, [r2, #0]
 8000e82:	e00b      	b.n	8000e9c <HAL_RCC_OscConfig+0x19c>
 8000e84:	4b6a      	ldr	r3, [pc, #424]	; (8001030 <HAL_RCC_OscConfig+0x330>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a69      	ldr	r2, [pc, #420]	; (8001030 <HAL_RCC_OscConfig+0x330>)
 8000e8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e8e:	6013      	str	r3, [r2, #0]
 8000e90:	4b67      	ldr	r3, [pc, #412]	; (8001030 <HAL_RCC_OscConfig+0x330>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a66      	ldr	r2, [pc, #408]	; (8001030 <HAL_RCC_OscConfig+0x330>)
 8000e96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e9a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000e9c:	4b64      	ldr	r3, [pc, #400]	; (8001030 <HAL_RCC_OscConfig+0x330>)
 8000e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ea0:	f023 020f 	bic.w	r2, r3, #15
 8000ea4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ea8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	689b      	ldr	r3, [r3, #8]
 8000eb0:	495f      	ldr	r1, [pc, #380]	; (8001030 <HAL_RCC_OscConfig+0x330>)
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000eb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000eba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d059      	beq.n	8000f7a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ec6:	f7ff fc9b 	bl	8000800 <HAL_GetTick>
 8000eca:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ece:	e00a      	b.n	8000ee6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ed0:	f7ff fc96 	bl	8000800 <HAL_GetTick>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000eda:	1ad3      	subs	r3, r2, r3
 8000edc:	2b64      	cmp	r3, #100	; 0x64
 8000ede:	d902      	bls.n	8000ee6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8000ee0:	2303      	movs	r3, #3
 8000ee2:	f000 bf43 	b.w	8001d6c <HAL_RCC_OscConfig+0x106c>
 8000ee6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000eea:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eee:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000ef2:	fa93 f3a3 	rbit	r3, r3
 8000ef6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000efa:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000efe:	fab3 f383 	clz	r3, r3
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	095b      	lsrs	r3, r3, #5
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	f043 0301 	orr.w	r3, r3, #1
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	2b01      	cmp	r3, #1
 8000f10:	d102      	bne.n	8000f18 <HAL_RCC_OscConfig+0x218>
 8000f12:	4b47      	ldr	r3, [pc, #284]	; (8001030 <HAL_RCC_OscConfig+0x330>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	e015      	b.n	8000f44 <HAL_RCC_OscConfig+0x244>
 8000f18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f1c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f20:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000f24:	fa93 f3a3 	rbit	r3, r3
 8000f28:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000f2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f30:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000f34:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000f38:	fa93 f3a3 	rbit	r3, r3
 8000f3c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000f40:	4b3b      	ldr	r3, [pc, #236]	; (8001030 <HAL_RCC_OscConfig+0x330>)
 8000f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f44:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f48:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8000f4c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000f50:	fa92 f2a2 	rbit	r2, r2
 8000f54:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8000f58:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8000f5c:	fab2 f282 	clz	r2, r2
 8000f60:	b2d2      	uxtb	r2, r2
 8000f62:	f042 0220 	orr.w	r2, r2, #32
 8000f66:	b2d2      	uxtb	r2, r2
 8000f68:	f002 021f 	and.w	r2, r2, #31
 8000f6c:	2101      	movs	r1, #1
 8000f6e:	fa01 f202 	lsl.w	r2, r1, r2
 8000f72:	4013      	ands	r3, r2
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d0ab      	beq.n	8000ed0 <HAL_RCC_OscConfig+0x1d0>
 8000f78:	e05d      	b.n	8001036 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f7a:	f7ff fc41 	bl	8000800 <HAL_GetTick>
 8000f7e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f82:	e00a      	b.n	8000f9a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f84:	f7ff fc3c 	bl	8000800 <HAL_GetTick>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000f8e:	1ad3      	subs	r3, r2, r3
 8000f90:	2b64      	cmp	r3, #100	; 0x64
 8000f92:	d902      	bls.n	8000f9a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8000f94:	2303      	movs	r3, #3
 8000f96:	f000 bee9 	b.w	8001d6c <HAL_RCC_OscConfig+0x106c>
 8000f9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f9e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fa2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000fa6:	fa93 f3a3 	rbit	r3, r3
 8000faa:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8000fae:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fb2:	fab3 f383 	clz	r3, r3
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	095b      	lsrs	r3, r3, #5
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	f043 0301 	orr.w	r3, r3, #1
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d102      	bne.n	8000fcc <HAL_RCC_OscConfig+0x2cc>
 8000fc6:	4b1a      	ldr	r3, [pc, #104]	; (8001030 <HAL_RCC_OscConfig+0x330>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	e015      	b.n	8000ff8 <HAL_RCC_OscConfig+0x2f8>
 8000fcc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fd0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fd4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8000fd8:	fa93 f3a3 	rbit	r3, r3
 8000fdc:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000fe0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fe4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000fe8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8000fec:	fa93 f3a3 	rbit	r3, r3
 8000ff0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8000ff4:	4b0e      	ldr	r3, [pc, #56]	; (8001030 <HAL_RCC_OscConfig+0x330>)
 8000ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000ffc:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001000:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001004:	fa92 f2a2 	rbit	r2, r2
 8001008:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800100c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001010:	fab2 f282 	clz	r2, r2
 8001014:	b2d2      	uxtb	r2, r2
 8001016:	f042 0220 	orr.w	r2, r2, #32
 800101a:	b2d2      	uxtb	r2, r2
 800101c:	f002 021f 	and.w	r2, r2, #31
 8001020:	2101      	movs	r1, #1
 8001022:	fa01 f202 	lsl.w	r2, r1, r2
 8001026:	4013      	ands	r3, r2
 8001028:	2b00      	cmp	r3, #0
 800102a:	d1ab      	bne.n	8000f84 <HAL_RCC_OscConfig+0x284>
 800102c:	e003      	b.n	8001036 <HAL_RCC_OscConfig+0x336>
 800102e:	bf00      	nop
 8001030:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001034:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001036:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800103a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f003 0302 	and.w	r3, r3, #2
 8001046:	2b00      	cmp	r3, #0
 8001048:	f000 817d 	beq.w	8001346 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800104c:	4ba6      	ldr	r3, [pc, #664]	; (80012e8 <HAL_RCC_OscConfig+0x5e8>)
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f003 030c 	and.w	r3, r3, #12
 8001054:	2b00      	cmp	r3, #0
 8001056:	d00b      	beq.n	8001070 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001058:	4ba3      	ldr	r3, [pc, #652]	; (80012e8 <HAL_RCC_OscConfig+0x5e8>)
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f003 030c 	and.w	r3, r3, #12
 8001060:	2b08      	cmp	r3, #8
 8001062:	d172      	bne.n	800114a <HAL_RCC_OscConfig+0x44a>
 8001064:	4ba0      	ldr	r3, [pc, #640]	; (80012e8 <HAL_RCC_OscConfig+0x5e8>)
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800106c:	2b00      	cmp	r3, #0
 800106e:	d16c      	bne.n	800114a <HAL_RCC_OscConfig+0x44a>
 8001070:	2302      	movs	r3, #2
 8001072:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001076:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800107a:	fa93 f3a3 	rbit	r3, r3
 800107e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001082:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001086:	fab3 f383 	clz	r3, r3
 800108a:	b2db      	uxtb	r3, r3
 800108c:	095b      	lsrs	r3, r3, #5
 800108e:	b2db      	uxtb	r3, r3
 8001090:	f043 0301 	orr.w	r3, r3, #1
 8001094:	b2db      	uxtb	r3, r3
 8001096:	2b01      	cmp	r3, #1
 8001098:	d102      	bne.n	80010a0 <HAL_RCC_OscConfig+0x3a0>
 800109a:	4b93      	ldr	r3, [pc, #588]	; (80012e8 <HAL_RCC_OscConfig+0x5e8>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	e013      	b.n	80010c8 <HAL_RCC_OscConfig+0x3c8>
 80010a0:	2302      	movs	r3, #2
 80010a2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010a6:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80010aa:	fa93 f3a3 	rbit	r3, r3
 80010ae:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80010b2:	2302      	movs	r3, #2
 80010b4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80010b8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80010bc:	fa93 f3a3 	rbit	r3, r3
 80010c0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80010c4:	4b88      	ldr	r3, [pc, #544]	; (80012e8 <HAL_RCC_OscConfig+0x5e8>)
 80010c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010c8:	2202      	movs	r2, #2
 80010ca:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80010ce:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80010d2:	fa92 f2a2 	rbit	r2, r2
 80010d6:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80010da:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80010de:	fab2 f282 	clz	r2, r2
 80010e2:	b2d2      	uxtb	r2, r2
 80010e4:	f042 0220 	orr.w	r2, r2, #32
 80010e8:	b2d2      	uxtb	r2, r2
 80010ea:	f002 021f 	and.w	r2, r2, #31
 80010ee:	2101      	movs	r1, #1
 80010f0:	fa01 f202 	lsl.w	r2, r1, r2
 80010f4:	4013      	ands	r3, r2
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d00a      	beq.n	8001110 <HAL_RCC_OscConfig+0x410>
 80010fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	691b      	ldr	r3, [r3, #16]
 8001106:	2b01      	cmp	r3, #1
 8001108:	d002      	beq.n	8001110 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	f000 be2e 	b.w	8001d6c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001110:	4b75      	ldr	r3, [pc, #468]	; (80012e8 <HAL_RCC_OscConfig+0x5e8>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001118:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800111c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	695b      	ldr	r3, [r3, #20]
 8001124:	21f8      	movs	r1, #248	; 0xf8
 8001126:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800112a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800112e:	fa91 f1a1 	rbit	r1, r1
 8001132:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001136:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800113a:	fab1 f181 	clz	r1, r1
 800113e:	b2c9      	uxtb	r1, r1
 8001140:	408b      	lsls	r3, r1
 8001142:	4969      	ldr	r1, [pc, #420]	; (80012e8 <HAL_RCC_OscConfig+0x5e8>)
 8001144:	4313      	orrs	r3, r2
 8001146:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001148:	e0fd      	b.n	8001346 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800114a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800114e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	691b      	ldr	r3, [r3, #16]
 8001156:	2b00      	cmp	r3, #0
 8001158:	f000 8088 	beq.w	800126c <HAL_RCC_OscConfig+0x56c>
 800115c:	2301      	movs	r3, #1
 800115e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001162:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001166:	fa93 f3a3 	rbit	r3, r3
 800116a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800116e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001172:	fab3 f383 	clz	r3, r3
 8001176:	b2db      	uxtb	r3, r3
 8001178:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800117c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	461a      	mov	r2, r3
 8001184:	2301      	movs	r3, #1
 8001186:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001188:	f7ff fb3a 	bl	8000800 <HAL_GetTick>
 800118c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001190:	e00a      	b.n	80011a8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001192:	f7ff fb35 	bl	8000800 <HAL_GetTick>
 8001196:	4602      	mov	r2, r0
 8001198:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	2b02      	cmp	r3, #2
 80011a0:	d902      	bls.n	80011a8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80011a2:	2303      	movs	r3, #3
 80011a4:	f000 bde2 	b.w	8001d6c <HAL_RCC_OscConfig+0x106c>
 80011a8:	2302      	movs	r3, #2
 80011aa:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011ae:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80011b2:	fa93 f3a3 	rbit	r3, r3
 80011b6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80011ba:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011be:	fab3 f383 	clz	r3, r3
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	095b      	lsrs	r3, r3, #5
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	f043 0301 	orr.w	r3, r3, #1
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d102      	bne.n	80011d8 <HAL_RCC_OscConfig+0x4d8>
 80011d2:	4b45      	ldr	r3, [pc, #276]	; (80012e8 <HAL_RCC_OscConfig+0x5e8>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	e013      	b.n	8001200 <HAL_RCC_OscConfig+0x500>
 80011d8:	2302      	movs	r3, #2
 80011da:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011de:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80011e2:	fa93 f3a3 	rbit	r3, r3
 80011e6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80011ea:	2302      	movs	r3, #2
 80011ec:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80011f0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80011f4:	fa93 f3a3 	rbit	r3, r3
 80011f8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80011fc:	4b3a      	ldr	r3, [pc, #232]	; (80012e8 <HAL_RCC_OscConfig+0x5e8>)
 80011fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001200:	2202      	movs	r2, #2
 8001202:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001206:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800120a:	fa92 f2a2 	rbit	r2, r2
 800120e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001212:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001216:	fab2 f282 	clz	r2, r2
 800121a:	b2d2      	uxtb	r2, r2
 800121c:	f042 0220 	orr.w	r2, r2, #32
 8001220:	b2d2      	uxtb	r2, r2
 8001222:	f002 021f 	and.w	r2, r2, #31
 8001226:	2101      	movs	r1, #1
 8001228:	fa01 f202 	lsl.w	r2, r1, r2
 800122c:	4013      	ands	r3, r2
 800122e:	2b00      	cmp	r3, #0
 8001230:	d0af      	beq.n	8001192 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001232:	4b2d      	ldr	r3, [pc, #180]	; (80012e8 <HAL_RCC_OscConfig+0x5e8>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800123a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800123e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	695b      	ldr	r3, [r3, #20]
 8001246:	21f8      	movs	r1, #248	; 0xf8
 8001248:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800124c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001250:	fa91 f1a1 	rbit	r1, r1
 8001254:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001258:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800125c:	fab1 f181 	clz	r1, r1
 8001260:	b2c9      	uxtb	r1, r1
 8001262:	408b      	lsls	r3, r1
 8001264:	4920      	ldr	r1, [pc, #128]	; (80012e8 <HAL_RCC_OscConfig+0x5e8>)
 8001266:	4313      	orrs	r3, r2
 8001268:	600b      	str	r3, [r1, #0]
 800126a:	e06c      	b.n	8001346 <HAL_RCC_OscConfig+0x646>
 800126c:	2301      	movs	r3, #1
 800126e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001272:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001276:	fa93 f3a3 	rbit	r3, r3
 800127a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800127e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001282:	fab3 f383 	clz	r3, r3
 8001286:	b2db      	uxtb	r3, r3
 8001288:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800128c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	461a      	mov	r2, r3
 8001294:	2300      	movs	r3, #0
 8001296:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001298:	f7ff fab2 	bl	8000800 <HAL_GetTick>
 800129c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012a0:	e00a      	b.n	80012b8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012a2:	f7ff faad 	bl	8000800 <HAL_GetTick>
 80012a6:	4602      	mov	r2, r0
 80012a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	2b02      	cmp	r3, #2
 80012b0:	d902      	bls.n	80012b8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80012b2:	2303      	movs	r3, #3
 80012b4:	f000 bd5a 	b.w	8001d6c <HAL_RCC_OscConfig+0x106c>
 80012b8:	2302      	movs	r3, #2
 80012ba:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012be:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80012c2:	fa93 f3a3 	rbit	r3, r3
 80012c6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80012ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012ce:	fab3 f383 	clz	r3, r3
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	095b      	lsrs	r3, r3, #5
 80012d6:	b2db      	uxtb	r3, r3
 80012d8:	f043 0301 	orr.w	r3, r3, #1
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d104      	bne.n	80012ec <HAL_RCC_OscConfig+0x5ec>
 80012e2:	4b01      	ldr	r3, [pc, #4]	; (80012e8 <HAL_RCC_OscConfig+0x5e8>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	e015      	b.n	8001314 <HAL_RCC_OscConfig+0x614>
 80012e8:	40021000 	.word	0x40021000
 80012ec:	2302      	movs	r3, #2
 80012ee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80012f6:	fa93 f3a3 	rbit	r3, r3
 80012fa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80012fe:	2302      	movs	r3, #2
 8001300:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001304:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001308:	fa93 f3a3 	rbit	r3, r3
 800130c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001310:	4bc8      	ldr	r3, [pc, #800]	; (8001634 <HAL_RCC_OscConfig+0x934>)
 8001312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001314:	2202      	movs	r2, #2
 8001316:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800131a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800131e:	fa92 f2a2 	rbit	r2, r2
 8001322:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001326:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800132a:	fab2 f282 	clz	r2, r2
 800132e:	b2d2      	uxtb	r2, r2
 8001330:	f042 0220 	orr.w	r2, r2, #32
 8001334:	b2d2      	uxtb	r2, r2
 8001336:	f002 021f 	and.w	r2, r2, #31
 800133a:	2101      	movs	r1, #1
 800133c:	fa01 f202 	lsl.w	r2, r1, r2
 8001340:	4013      	ands	r3, r2
 8001342:	2b00      	cmp	r3, #0
 8001344:	d1ad      	bne.n	80012a2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001346:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800134a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 0308 	and.w	r3, r3, #8
 8001356:	2b00      	cmp	r3, #0
 8001358:	f000 8110 	beq.w	800157c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800135c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001360:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	699b      	ldr	r3, [r3, #24]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d079      	beq.n	8001460 <HAL_RCC_OscConfig+0x760>
 800136c:	2301      	movs	r3, #1
 800136e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001372:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001376:	fa93 f3a3 	rbit	r3, r3
 800137a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800137e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001382:	fab3 f383 	clz	r3, r3
 8001386:	b2db      	uxtb	r3, r3
 8001388:	461a      	mov	r2, r3
 800138a:	4bab      	ldr	r3, [pc, #684]	; (8001638 <HAL_RCC_OscConfig+0x938>)
 800138c:	4413      	add	r3, r2
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	461a      	mov	r2, r3
 8001392:	2301      	movs	r3, #1
 8001394:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001396:	f7ff fa33 	bl	8000800 <HAL_GetTick>
 800139a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800139e:	e00a      	b.n	80013b6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013a0:	f7ff fa2e 	bl	8000800 <HAL_GetTick>
 80013a4:	4602      	mov	r2, r0
 80013a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80013aa:	1ad3      	subs	r3, r2, r3
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	d902      	bls.n	80013b6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80013b0:	2303      	movs	r3, #3
 80013b2:	f000 bcdb 	b.w	8001d6c <HAL_RCC_OscConfig+0x106c>
 80013b6:	2302      	movs	r3, #2
 80013b8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013bc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80013c0:	fa93 f3a3 	rbit	r3, r3
 80013c4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80013c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013cc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80013d0:	2202      	movs	r2, #2
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013d8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	fa93 f2a3 	rbit	r2, r3
 80013e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80013f4:	2202      	movs	r2, #2
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	fa93 f2a3 	rbit	r2, r3
 8001406:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800140a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800140e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001410:	4b88      	ldr	r3, [pc, #544]	; (8001634 <HAL_RCC_OscConfig+0x934>)
 8001412:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001414:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001418:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800141c:	2102      	movs	r1, #2
 800141e:	6019      	str	r1, [r3, #0]
 8001420:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001424:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	fa93 f1a3 	rbit	r1, r3
 800142e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001432:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001436:	6019      	str	r1, [r3, #0]
  return result;
 8001438:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800143c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	fab3 f383 	clz	r3, r3
 8001446:	b2db      	uxtb	r3, r3
 8001448:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800144c:	b2db      	uxtb	r3, r3
 800144e:	f003 031f 	and.w	r3, r3, #31
 8001452:	2101      	movs	r1, #1
 8001454:	fa01 f303 	lsl.w	r3, r1, r3
 8001458:	4013      	ands	r3, r2
 800145a:	2b00      	cmp	r3, #0
 800145c:	d0a0      	beq.n	80013a0 <HAL_RCC_OscConfig+0x6a0>
 800145e:	e08d      	b.n	800157c <HAL_RCC_OscConfig+0x87c>
 8001460:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001464:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001468:	2201      	movs	r2, #1
 800146a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800146c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001470:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	fa93 f2a3 	rbit	r2, r3
 800147a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800147e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001482:	601a      	str	r2, [r3, #0]
  return result;
 8001484:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001488:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800148c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800148e:	fab3 f383 	clz	r3, r3
 8001492:	b2db      	uxtb	r3, r3
 8001494:	461a      	mov	r2, r3
 8001496:	4b68      	ldr	r3, [pc, #416]	; (8001638 <HAL_RCC_OscConfig+0x938>)
 8001498:	4413      	add	r3, r2
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	461a      	mov	r2, r3
 800149e:	2300      	movs	r3, #0
 80014a0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014a2:	f7ff f9ad 	bl	8000800 <HAL_GetTick>
 80014a6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014aa:	e00a      	b.n	80014c2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014ac:	f7ff f9a8 	bl	8000800 <HAL_GetTick>
 80014b0:	4602      	mov	r2, r0
 80014b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014b6:	1ad3      	subs	r3, r2, r3
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	d902      	bls.n	80014c2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80014bc:	2303      	movs	r3, #3
 80014be:	f000 bc55 	b.w	8001d6c <HAL_RCC_OscConfig+0x106c>
 80014c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014c6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80014ca:	2202      	movs	r2, #2
 80014cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014d2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	fa93 f2a3 	rbit	r2, r3
 80014dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014e0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80014e4:	601a      	str	r2, [r3, #0]
 80014e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014ea:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80014ee:	2202      	movs	r2, #2
 80014f0:	601a      	str	r2, [r3, #0]
 80014f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014f6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	fa93 f2a3 	rbit	r2, r3
 8001500:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001504:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001508:	601a      	str	r2, [r3, #0]
 800150a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800150e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001512:	2202      	movs	r2, #2
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800151a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	fa93 f2a3 	rbit	r2, r3
 8001524:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001528:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800152c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800152e:	4b41      	ldr	r3, [pc, #260]	; (8001634 <HAL_RCC_OscConfig+0x934>)
 8001530:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001532:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001536:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800153a:	2102      	movs	r1, #2
 800153c:	6019      	str	r1, [r3, #0]
 800153e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001542:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	fa93 f1a3 	rbit	r1, r3
 800154c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001550:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001554:	6019      	str	r1, [r3, #0]
  return result;
 8001556:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800155a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	fab3 f383 	clz	r3, r3
 8001564:	b2db      	uxtb	r3, r3
 8001566:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800156a:	b2db      	uxtb	r3, r3
 800156c:	f003 031f 	and.w	r3, r3, #31
 8001570:	2101      	movs	r1, #1
 8001572:	fa01 f303 	lsl.w	r3, r1, r3
 8001576:	4013      	ands	r3, r2
 8001578:	2b00      	cmp	r3, #0
 800157a:	d197      	bne.n	80014ac <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800157c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001580:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f003 0304 	and.w	r3, r3, #4
 800158c:	2b00      	cmp	r3, #0
 800158e:	f000 81a1 	beq.w	80018d4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001592:	2300      	movs	r3, #0
 8001594:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001598:	4b26      	ldr	r3, [pc, #152]	; (8001634 <HAL_RCC_OscConfig+0x934>)
 800159a:	69db      	ldr	r3, [r3, #28]
 800159c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d116      	bne.n	80015d2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015a4:	4b23      	ldr	r3, [pc, #140]	; (8001634 <HAL_RCC_OscConfig+0x934>)
 80015a6:	69db      	ldr	r3, [r3, #28]
 80015a8:	4a22      	ldr	r2, [pc, #136]	; (8001634 <HAL_RCC_OscConfig+0x934>)
 80015aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015ae:	61d3      	str	r3, [r2, #28]
 80015b0:	4b20      	ldr	r3, [pc, #128]	; (8001634 <HAL_RCC_OscConfig+0x934>)
 80015b2:	69db      	ldr	r3, [r3, #28]
 80015b4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80015b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015bc:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80015c0:	601a      	str	r2, [r3, #0]
 80015c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015c6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80015ca:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80015cc:	2301      	movs	r3, #1
 80015ce:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015d2:	4b1a      	ldr	r3, [pc, #104]	; (800163c <HAL_RCC_OscConfig+0x93c>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d11a      	bne.n	8001614 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015de:	4b17      	ldr	r3, [pc, #92]	; (800163c <HAL_RCC_OscConfig+0x93c>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a16      	ldr	r2, [pc, #88]	; (800163c <HAL_RCC_OscConfig+0x93c>)
 80015e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015e8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015ea:	f7ff f909 	bl	8000800 <HAL_GetTick>
 80015ee:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015f2:	e009      	b.n	8001608 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015f4:	f7ff f904 	bl	8000800 <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80015fe:	1ad3      	subs	r3, r2, r3
 8001600:	2b64      	cmp	r3, #100	; 0x64
 8001602:	d901      	bls.n	8001608 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001604:	2303      	movs	r3, #3
 8001606:	e3b1      	b.n	8001d6c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001608:	4b0c      	ldr	r3, [pc, #48]	; (800163c <HAL_RCC_OscConfig+0x93c>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001610:	2b00      	cmp	r3, #0
 8001612:	d0ef      	beq.n	80015f4 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001614:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001618:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	2b01      	cmp	r3, #1
 8001622:	d10d      	bne.n	8001640 <HAL_RCC_OscConfig+0x940>
 8001624:	4b03      	ldr	r3, [pc, #12]	; (8001634 <HAL_RCC_OscConfig+0x934>)
 8001626:	6a1b      	ldr	r3, [r3, #32]
 8001628:	4a02      	ldr	r2, [pc, #8]	; (8001634 <HAL_RCC_OscConfig+0x934>)
 800162a:	f043 0301 	orr.w	r3, r3, #1
 800162e:	6213      	str	r3, [r2, #32]
 8001630:	e03c      	b.n	80016ac <HAL_RCC_OscConfig+0x9ac>
 8001632:	bf00      	nop
 8001634:	40021000 	.word	0x40021000
 8001638:	10908120 	.word	0x10908120
 800163c:	40007000 	.word	0x40007000
 8001640:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001644:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d10c      	bne.n	800166a <HAL_RCC_OscConfig+0x96a>
 8001650:	4bc1      	ldr	r3, [pc, #772]	; (8001958 <HAL_RCC_OscConfig+0xc58>)
 8001652:	6a1b      	ldr	r3, [r3, #32]
 8001654:	4ac0      	ldr	r2, [pc, #768]	; (8001958 <HAL_RCC_OscConfig+0xc58>)
 8001656:	f023 0301 	bic.w	r3, r3, #1
 800165a:	6213      	str	r3, [r2, #32]
 800165c:	4bbe      	ldr	r3, [pc, #760]	; (8001958 <HAL_RCC_OscConfig+0xc58>)
 800165e:	6a1b      	ldr	r3, [r3, #32]
 8001660:	4abd      	ldr	r2, [pc, #756]	; (8001958 <HAL_RCC_OscConfig+0xc58>)
 8001662:	f023 0304 	bic.w	r3, r3, #4
 8001666:	6213      	str	r3, [r2, #32]
 8001668:	e020      	b.n	80016ac <HAL_RCC_OscConfig+0x9ac>
 800166a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800166e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	68db      	ldr	r3, [r3, #12]
 8001676:	2b05      	cmp	r3, #5
 8001678:	d10c      	bne.n	8001694 <HAL_RCC_OscConfig+0x994>
 800167a:	4bb7      	ldr	r3, [pc, #732]	; (8001958 <HAL_RCC_OscConfig+0xc58>)
 800167c:	6a1b      	ldr	r3, [r3, #32]
 800167e:	4ab6      	ldr	r2, [pc, #728]	; (8001958 <HAL_RCC_OscConfig+0xc58>)
 8001680:	f043 0304 	orr.w	r3, r3, #4
 8001684:	6213      	str	r3, [r2, #32]
 8001686:	4bb4      	ldr	r3, [pc, #720]	; (8001958 <HAL_RCC_OscConfig+0xc58>)
 8001688:	6a1b      	ldr	r3, [r3, #32]
 800168a:	4ab3      	ldr	r2, [pc, #716]	; (8001958 <HAL_RCC_OscConfig+0xc58>)
 800168c:	f043 0301 	orr.w	r3, r3, #1
 8001690:	6213      	str	r3, [r2, #32]
 8001692:	e00b      	b.n	80016ac <HAL_RCC_OscConfig+0x9ac>
 8001694:	4bb0      	ldr	r3, [pc, #704]	; (8001958 <HAL_RCC_OscConfig+0xc58>)
 8001696:	6a1b      	ldr	r3, [r3, #32]
 8001698:	4aaf      	ldr	r2, [pc, #700]	; (8001958 <HAL_RCC_OscConfig+0xc58>)
 800169a:	f023 0301 	bic.w	r3, r3, #1
 800169e:	6213      	str	r3, [r2, #32]
 80016a0:	4bad      	ldr	r3, [pc, #692]	; (8001958 <HAL_RCC_OscConfig+0xc58>)
 80016a2:	6a1b      	ldr	r3, [r3, #32]
 80016a4:	4aac      	ldr	r2, [pc, #688]	; (8001958 <HAL_RCC_OscConfig+0xc58>)
 80016a6:	f023 0304 	bic.w	r3, r3, #4
 80016aa:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016b0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	f000 8081 	beq.w	80017c0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016be:	f7ff f89f 	bl	8000800 <HAL_GetTick>
 80016c2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016c6:	e00b      	b.n	80016e0 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016c8:	f7ff f89a 	bl	8000800 <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80016d2:	1ad3      	subs	r3, r2, r3
 80016d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80016d8:	4293      	cmp	r3, r2
 80016da:	d901      	bls.n	80016e0 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80016dc:	2303      	movs	r3, #3
 80016de:	e345      	b.n	8001d6c <HAL_RCC_OscConfig+0x106c>
 80016e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016e4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80016e8:	2202      	movs	r2, #2
 80016ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016f0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	fa93 f2a3 	rbit	r2, r3
 80016fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016fe:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001708:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800170c:	2202      	movs	r2, #2
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001714:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	fa93 f2a3 	rbit	r2, r3
 800171e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001722:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001726:	601a      	str	r2, [r3, #0]
  return result;
 8001728:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800172c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001730:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001732:	fab3 f383 	clz	r3, r3
 8001736:	b2db      	uxtb	r3, r3
 8001738:	095b      	lsrs	r3, r3, #5
 800173a:	b2db      	uxtb	r3, r3
 800173c:	f043 0302 	orr.w	r3, r3, #2
 8001740:	b2db      	uxtb	r3, r3
 8001742:	2b02      	cmp	r3, #2
 8001744:	d102      	bne.n	800174c <HAL_RCC_OscConfig+0xa4c>
 8001746:	4b84      	ldr	r3, [pc, #528]	; (8001958 <HAL_RCC_OscConfig+0xc58>)
 8001748:	6a1b      	ldr	r3, [r3, #32]
 800174a:	e013      	b.n	8001774 <HAL_RCC_OscConfig+0xa74>
 800174c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001750:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001754:	2202      	movs	r2, #2
 8001756:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001758:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800175c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	fa93 f2a3 	rbit	r2, r3
 8001766:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800176a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	4b79      	ldr	r3, [pc, #484]	; (8001958 <HAL_RCC_OscConfig+0xc58>)
 8001772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001774:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001778:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800177c:	2102      	movs	r1, #2
 800177e:	6011      	str	r1, [r2, #0]
 8001780:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001784:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001788:	6812      	ldr	r2, [r2, #0]
 800178a:	fa92 f1a2 	rbit	r1, r2
 800178e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001792:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001796:	6011      	str	r1, [r2, #0]
  return result;
 8001798:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800179c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80017a0:	6812      	ldr	r2, [r2, #0]
 80017a2:	fab2 f282 	clz	r2, r2
 80017a6:	b2d2      	uxtb	r2, r2
 80017a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80017ac:	b2d2      	uxtb	r2, r2
 80017ae:	f002 021f 	and.w	r2, r2, #31
 80017b2:	2101      	movs	r1, #1
 80017b4:	fa01 f202 	lsl.w	r2, r1, r2
 80017b8:	4013      	ands	r3, r2
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d084      	beq.n	80016c8 <HAL_RCC_OscConfig+0x9c8>
 80017be:	e07f      	b.n	80018c0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017c0:	f7ff f81e 	bl	8000800 <HAL_GetTick>
 80017c4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017c8:	e00b      	b.n	80017e2 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017ca:	f7ff f819 	bl	8000800 <HAL_GetTick>
 80017ce:	4602      	mov	r2, r0
 80017d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80017da:	4293      	cmp	r3, r2
 80017dc:	d901      	bls.n	80017e2 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80017de:	2303      	movs	r3, #3
 80017e0:	e2c4      	b.n	8001d6c <HAL_RCC_OscConfig+0x106c>
 80017e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017e6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80017ea:	2202      	movs	r2, #2
 80017ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017f2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	fa93 f2a3 	rbit	r2, r3
 80017fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001800:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001804:	601a      	str	r2, [r3, #0]
 8001806:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800180a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800180e:	2202      	movs	r2, #2
 8001810:	601a      	str	r2, [r3, #0]
 8001812:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001816:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	fa93 f2a3 	rbit	r2, r3
 8001820:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001824:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001828:	601a      	str	r2, [r3, #0]
  return result;
 800182a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800182e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001832:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001834:	fab3 f383 	clz	r3, r3
 8001838:	b2db      	uxtb	r3, r3
 800183a:	095b      	lsrs	r3, r3, #5
 800183c:	b2db      	uxtb	r3, r3
 800183e:	f043 0302 	orr.w	r3, r3, #2
 8001842:	b2db      	uxtb	r3, r3
 8001844:	2b02      	cmp	r3, #2
 8001846:	d102      	bne.n	800184e <HAL_RCC_OscConfig+0xb4e>
 8001848:	4b43      	ldr	r3, [pc, #268]	; (8001958 <HAL_RCC_OscConfig+0xc58>)
 800184a:	6a1b      	ldr	r3, [r3, #32]
 800184c:	e013      	b.n	8001876 <HAL_RCC_OscConfig+0xb76>
 800184e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001852:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001856:	2202      	movs	r2, #2
 8001858:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800185a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800185e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	fa93 f2a3 	rbit	r2, r3
 8001868:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800186c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001870:	601a      	str	r2, [r3, #0]
 8001872:	4b39      	ldr	r3, [pc, #228]	; (8001958 <HAL_RCC_OscConfig+0xc58>)
 8001874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001876:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800187a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800187e:	2102      	movs	r1, #2
 8001880:	6011      	str	r1, [r2, #0]
 8001882:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001886:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800188a:	6812      	ldr	r2, [r2, #0]
 800188c:	fa92 f1a2 	rbit	r1, r2
 8001890:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001894:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001898:	6011      	str	r1, [r2, #0]
  return result;
 800189a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800189e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80018a2:	6812      	ldr	r2, [r2, #0]
 80018a4:	fab2 f282 	clz	r2, r2
 80018a8:	b2d2      	uxtb	r2, r2
 80018aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80018ae:	b2d2      	uxtb	r2, r2
 80018b0:	f002 021f 	and.w	r2, r2, #31
 80018b4:	2101      	movs	r1, #1
 80018b6:	fa01 f202 	lsl.w	r2, r1, r2
 80018ba:	4013      	ands	r3, r2
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d184      	bne.n	80017ca <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80018c0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d105      	bne.n	80018d4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018c8:	4b23      	ldr	r3, [pc, #140]	; (8001958 <HAL_RCC_OscConfig+0xc58>)
 80018ca:	69db      	ldr	r3, [r3, #28]
 80018cc:	4a22      	ldr	r2, [pc, #136]	; (8001958 <HAL_RCC_OscConfig+0xc58>)
 80018ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018d2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018d8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	69db      	ldr	r3, [r3, #28]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	f000 8242 	beq.w	8001d6a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018e6:	4b1c      	ldr	r3, [pc, #112]	; (8001958 <HAL_RCC_OscConfig+0xc58>)
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f003 030c 	and.w	r3, r3, #12
 80018ee:	2b08      	cmp	r3, #8
 80018f0:	f000 8213 	beq.w	8001d1a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018f8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	69db      	ldr	r3, [r3, #28]
 8001900:	2b02      	cmp	r3, #2
 8001902:	f040 8162 	bne.w	8001bca <HAL_RCC_OscConfig+0xeca>
 8001906:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800190a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800190e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001912:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001914:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001918:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	fa93 f2a3 	rbit	r2, r3
 8001922:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001926:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800192a:	601a      	str	r2, [r3, #0]
  return result;
 800192c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001930:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001934:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001936:	fab3 f383 	clz	r3, r3
 800193a:	b2db      	uxtb	r3, r3
 800193c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001940:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	461a      	mov	r2, r3
 8001948:	2300      	movs	r3, #0
 800194a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800194c:	f7fe ff58 	bl	8000800 <HAL_GetTick>
 8001950:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001954:	e00c      	b.n	8001970 <HAL_RCC_OscConfig+0xc70>
 8001956:	bf00      	nop
 8001958:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800195c:	f7fe ff50 	bl	8000800 <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	2b02      	cmp	r3, #2
 800196a:	d901      	bls.n	8001970 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800196c:	2303      	movs	r3, #3
 800196e:	e1fd      	b.n	8001d6c <HAL_RCC_OscConfig+0x106c>
 8001970:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001974:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001978:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800197c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800197e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001982:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	fa93 f2a3 	rbit	r2, r3
 800198c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001990:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001994:	601a      	str	r2, [r3, #0]
  return result;
 8001996:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800199a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800199e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019a0:	fab3 f383 	clz	r3, r3
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	095b      	lsrs	r3, r3, #5
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	f043 0301 	orr.w	r3, r3, #1
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d102      	bne.n	80019ba <HAL_RCC_OscConfig+0xcba>
 80019b4:	4bb0      	ldr	r3, [pc, #704]	; (8001c78 <HAL_RCC_OscConfig+0xf78>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	e027      	b.n	8001a0a <HAL_RCC_OscConfig+0xd0a>
 80019ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019be:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80019c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019cc:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	fa93 f2a3 	rbit	r2, r3
 80019d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019da:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80019de:	601a      	str	r2, [r3, #0]
 80019e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019e4:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80019e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019ec:	601a      	str	r2, [r3, #0]
 80019ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019f2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	fa93 f2a3 	rbit	r2, r3
 80019fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a00:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001a04:	601a      	str	r2, [r3, #0]
 8001a06:	4b9c      	ldr	r3, [pc, #624]	; (8001c78 <HAL_RCC_OscConfig+0xf78>)
 8001a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a0a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a0e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001a12:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001a16:	6011      	str	r1, [r2, #0]
 8001a18:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a1c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001a20:	6812      	ldr	r2, [r2, #0]
 8001a22:	fa92 f1a2 	rbit	r1, r2
 8001a26:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a2a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001a2e:	6011      	str	r1, [r2, #0]
  return result;
 8001a30:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a34:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001a38:	6812      	ldr	r2, [r2, #0]
 8001a3a:	fab2 f282 	clz	r2, r2
 8001a3e:	b2d2      	uxtb	r2, r2
 8001a40:	f042 0220 	orr.w	r2, r2, #32
 8001a44:	b2d2      	uxtb	r2, r2
 8001a46:	f002 021f 	and.w	r2, r2, #31
 8001a4a:	2101      	movs	r1, #1
 8001a4c:	fa01 f202 	lsl.w	r2, r1, r2
 8001a50:	4013      	ands	r3, r2
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d182      	bne.n	800195c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a56:	4b88      	ldr	r3, [pc, #544]	; (8001c78 <HAL_RCC_OscConfig+0xf78>)
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001a5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a62:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001a6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a6e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	6a1b      	ldr	r3, [r3, #32]
 8001a76:	430b      	orrs	r3, r1
 8001a78:	497f      	ldr	r1, [pc, #508]	; (8001c78 <HAL_RCC_OscConfig+0xf78>)
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	604b      	str	r3, [r1, #4]
 8001a7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a82:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001a86:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a90:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	fa93 f2a3 	rbit	r2, r3
 8001a9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a9e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001aa2:	601a      	str	r2, [r3, #0]
  return result;
 8001aa4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aa8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001aac:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001aae:	fab3 f383 	clz	r3, r3
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ab8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	461a      	mov	r2, r3
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac4:	f7fe fe9c 	bl	8000800 <HAL_GetTick>
 8001ac8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001acc:	e009      	b.n	8001ae2 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ace:	f7fe fe97 	bl	8000800 <HAL_GetTick>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d901      	bls.n	8001ae2 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e144      	b.n	8001d6c <HAL_RCC_OscConfig+0x106c>
 8001ae2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ae6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001aea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001aee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001af4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	fa93 f2a3 	rbit	r2, r3
 8001afe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b02:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001b06:	601a      	str	r2, [r3, #0]
  return result;
 8001b08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b0c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001b10:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b12:	fab3 f383 	clz	r3, r3
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	095b      	lsrs	r3, r3, #5
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	f043 0301 	orr.w	r3, r3, #1
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d102      	bne.n	8001b2c <HAL_RCC_OscConfig+0xe2c>
 8001b26:	4b54      	ldr	r3, [pc, #336]	; (8001c78 <HAL_RCC_OscConfig+0xf78>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	e027      	b.n	8001b7c <HAL_RCC_OscConfig+0xe7c>
 8001b2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b30:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001b34:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b3e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	fa93 f2a3 	rbit	r2, r3
 8001b48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b4c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001b50:	601a      	str	r2, [r3, #0]
 8001b52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b56:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001b5a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b5e:	601a      	str	r2, [r3, #0]
 8001b60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b64:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	fa93 f2a3 	rbit	r2, r3
 8001b6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b72:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001b76:	601a      	str	r2, [r3, #0]
 8001b78:	4b3f      	ldr	r3, [pc, #252]	; (8001c78 <HAL_RCC_OscConfig+0xf78>)
 8001b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b7c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b80:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001b84:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001b88:	6011      	str	r1, [r2, #0]
 8001b8a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b8e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001b92:	6812      	ldr	r2, [r2, #0]
 8001b94:	fa92 f1a2 	rbit	r1, r2
 8001b98:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b9c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001ba0:	6011      	str	r1, [r2, #0]
  return result;
 8001ba2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ba6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001baa:	6812      	ldr	r2, [r2, #0]
 8001bac:	fab2 f282 	clz	r2, r2
 8001bb0:	b2d2      	uxtb	r2, r2
 8001bb2:	f042 0220 	orr.w	r2, r2, #32
 8001bb6:	b2d2      	uxtb	r2, r2
 8001bb8:	f002 021f 	and.w	r2, r2, #31
 8001bbc:	2101      	movs	r1, #1
 8001bbe:	fa01 f202 	lsl.w	r2, r1, r2
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d082      	beq.n	8001ace <HAL_RCC_OscConfig+0xdce>
 8001bc8:	e0cf      	b.n	8001d6a <HAL_RCC_OscConfig+0x106a>
 8001bca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bce:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001bd2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001bd6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bdc:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	fa93 f2a3 	rbit	r2, r3
 8001be6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bea:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001bee:	601a      	str	r2, [r3, #0]
  return result;
 8001bf0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bf4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001bf8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bfa:	fab3 f383 	clz	r3, r3
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c04:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c10:	f7fe fdf6 	bl	8000800 <HAL_GetTick>
 8001c14:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c18:	e009      	b.n	8001c2e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c1a:	f7fe fdf1 	bl	8000800 <HAL_GetTick>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e09e      	b.n	8001d6c <HAL_RCC_OscConfig+0x106c>
 8001c2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c32:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001c36:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c3a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c40:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	fa93 f2a3 	rbit	r2, r3
 8001c4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c4e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001c52:	601a      	str	r2, [r3, #0]
  return result;
 8001c54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c58:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001c5c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c5e:	fab3 f383 	clz	r3, r3
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	095b      	lsrs	r3, r3, #5
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	f043 0301 	orr.w	r3, r3, #1
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d104      	bne.n	8001c7c <HAL_RCC_OscConfig+0xf7c>
 8001c72:	4b01      	ldr	r3, [pc, #4]	; (8001c78 <HAL_RCC_OscConfig+0xf78>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	e029      	b.n	8001ccc <HAL_RCC_OscConfig+0xfcc>
 8001c78:	40021000 	.word	0x40021000
 8001c7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c80:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001c84:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c8e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	fa93 f2a3 	rbit	r2, r3
 8001c98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c9c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001ca0:	601a      	str	r2, [r3, #0]
 8001ca2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ca6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001caa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cb4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	fa93 f2a3 	rbit	r2, r3
 8001cbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cc2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001cc6:	601a      	str	r2, [r3, #0]
 8001cc8:	4b2b      	ldr	r3, [pc, #172]	; (8001d78 <HAL_RCC_OscConfig+0x1078>)
 8001cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ccc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001cd0:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001cd4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001cd8:	6011      	str	r1, [r2, #0]
 8001cda:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001cde:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001ce2:	6812      	ldr	r2, [r2, #0]
 8001ce4:	fa92 f1a2 	rbit	r1, r2
 8001ce8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001cec:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001cf0:	6011      	str	r1, [r2, #0]
  return result;
 8001cf2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001cf6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001cfa:	6812      	ldr	r2, [r2, #0]
 8001cfc:	fab2 f282 	clz	r2, r2
 8001d00:	b2d2      	uxtb	r2, r2
 8001d02:	f042 0220 	orr.w	r2, r2, #32
 8001d06:	b2d2      	uxtb	r2, r2
 8001d08:	f002 021f 	and.w	r2, r2, #31
 8001d0c:	2101      	movs	r1, #1
 8001d0e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d12:	4013      	ands	r3, r2
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d180      	bne.n	8001c1a <HAL_RCC_OscConfig+0xf1a>
 8001d18:	e027      	b.n	8001d6a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d1e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	69db      	ldr	r3, [r3, #28]
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d101      	bne.n	8001d2e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e01e      	b.n	8001d6c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d2e:	4b12      	ldr	r3, [pc, #72]	; (8001d78 <HAL_RCC_OscConfig+0x1078>)
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001d36:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001d3a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d42:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	6a1b      	ldr	r3, [r3, #32]
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d10b      	bne.n	8001d66 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001d4e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001d52:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d5a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d001      	beq.n	8001d6a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e000      	b.n	8001d6c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001d6a:	2300      	movs	r3, #0
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	40021000 	.word	0x40021000

08001d7c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b09e      	sub	sp, #120	; 0x78
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001d86:	2300      	movs	r3, #0
 8001d88:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d101      	bne.n	8001d94 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e162      	b.n	800205a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d94:	4b90      	ldr	r3, [pc, #576]	; (8001fd8 <HAL_RCC_ClockConfig+0x25c>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0307 	and.w	r3, r3, #7
 8001d9c:	683a      	ldr	r2, [r7, #0]
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d910      	bls.n	8001dc4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001da2:	4b8d      	ldr	r3, [pc, #564]	; (8001fd8 <HAL_RCC_ClockConfig+0x25c>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f023 0207 	bic.w	r2, r3, #7
 8001daa:	498b      	ldr	r1, [pc, #556]	; (8001fd8 <HAL_RCC_ClockConfig+0x25c>)
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001db2:	4b89      	ldr	r3, [pc, #548]	; (8001fd8 <HAL_RCC_ClockConfig+0x25c>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0307 	and.w	r3, r3, #7
 8001dba:	683a      	ldr	r2, [r7, #0]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d001      	beq.n	8001dc4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e14a      	b.n	800205a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0302 	and.w	r3, r3, #2
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d008      	beq.n	8001de2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dd0:	4b82      	ldr	r3, [pc, #520]	; (8001fdc <HAL_RCC_ClockConfig+0x260>)
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	497f      	ldr	r1, [pc, #508]	; (8001fdc <HAL_RCC_ClockConfig+0x260>)
 8001dde:	4313      	orrs	r3, r2
 8001de0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0301 	and.w	r3, r3, #1
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	f000 80dc 	beq.w	8001fa8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d13c      	bne.n	8001e72 <HAL_RCC_ClockConfig+0xf6>
 8001df8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dfc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dfe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e00:	fa93 f3a3 	rbit	r3, r3
 8001e04:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001e06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e08:	fab3 f383 	clz	r3, r3
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	095b      	lsrs	r3, r3, #5
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	f043 0301 	orr.w	r3, r3, #1
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d102      	bne.n	8001e22 <HAL_RCC_ClockConfig+0xa6>
 8001e1c:	4b6f      	ldr	r3, [pc, #444]	; (8001fdc <HAL_RCC_ClockConfig+0x260>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	e00f      	b.n	8001e42 <HAL_RCC_ClockConfig+0xc6>
 8001e22:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e26:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e2a:	fa93 f3a3 	rbit	r3, r3
 8001e2e:	667b      	str	r3, [r7, #100]	; 0x64
 8001e30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e34:	663b      	str	r3, [r7, #96]	; 0x60
 8001e36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e38:	fa93 f3a3 	rbit	r3, r3
 8001e3c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001e3e:	4b67      	ldr	r3, [pc, #412]	; (8001fdc <HAL_RCC_ClockConfig+0x260>)
 8001e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e42:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e46:	65ba      	str	r2, [r7, #88]	; 0x58
 8001e48:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001e4a:	fa92 f2a2 	rbit	r2, r2
 8001e4e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001e50:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001e52:	fab2 f282 	clz	r2, r2
 8001e56:	b2d2      	uxtb	r2, r2
 8001e58:	f042 0220 	orr.w	r2, r2, #32
 8001e5c:	b2d2      	uxtb	r2, r2
 8001e5e:	f002 021f 	and.w	r2, r2, #31
 8001e62:	2101      	movs	r1, #1
 8001e64:	fa01 f202 	lsl.w	r2, r1, r2
 8001e68:	4013      	ands	r3, r2
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d17b      	bne.n	8001f66 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e0f3      	b.n	800205a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d13c      	bne.n	8001ef4 <HAL_RCC_ClockConfig+0x178>
 8001e7a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e7e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e82:	fa93 f3a3 	rbit	r3, r3
 8001e86:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001e88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e8a:	fab3 f383 	clz	r3, r3
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	095b      	lsrs	r3, r3, #5
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	f043 0301 	orr.w	r3, r3, #1
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d102      	bne.n	8001ea4 <HAL_RCC_ClockConfig+0x128>
 8001e9e:	4b4f      	ldr	r3, [pc, #316]	; (8001fdc <HAL_RCC_ClockConfig+0x260>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	e00f      	b.n	8001ec4 <HAL_RCC_ClockConfig+0x148>
 8001ea4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ea8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001eac:	fa93 f3a3 	rbit	r3, r3
 8001eb0:	647b      	str	r3, [r7, #68]	; 0x44
 8001eb2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001eb6:	643b      	str	r3, [r7, #64]	; 0x40
 8001eb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001eba:	fa93 f3a3 	rbit	r3, r3
 8001ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ec0:	4b46      	ldr	r3, [pc, #280]	; (8001fdc <HAL_RCC_ClockConfig+0x260>)
 8001ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ec8:	63ba      	str	r2, [r7, #56]	; 0x38
 8001eca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001ecc:	fa92 f2a2 	rbit	r2, r2
 8001ed0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001ed2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001ed4:	fab2 f282 	clz	r2, r2
 8001ed8:	b2d2      	uxtb	r2, r2
 8001eda:	f042 0220 	orr.w	r2, r2, #32
 8001ede:	b2d2      	uxtb	r2, r2
 8001ee0:	f002 021f 	and.w	r2, r2, #31
 8001ee4:	2101      	movs	r1, #1
 8001ee6:	fa01 f202 	lsl.w	r2, r1, r2
 8001eea:	4013      	ands	r3, r2
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d13a      	bne.n	8001f66 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e0b2      	b.n	800205a <HAL_RCC_ClockConfig+0x2de>
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001efa:	fa93 f3a3 	rbit	r3, r3
 8001efe:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f02:	fab3 f383 	clz	r3, r3
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	095b      	lsrs	r3, r3, #5
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	f043 0301 	orr.w	r3, r3, #1
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d102      	bne.n	8001f1c <HAL_RCC_ClockConfig+0x1a0>
 8001f16:	4b31      	ldr	r3, [pc, #196]	; (8001fdc <HAL_RCC_ClockConfig+0x260>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	e00d      	b.n	8001f38 <HAL_RCC_ClockConfig+0x1bc>
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f22:	fa93 f3a3 	rbit	r3, r3
 8001f26:	627b      	str	r3, [r7, #36]	; 0x24
 8001f28:	2302      	movs	r3, #2
 8001f2a:	623b      	str	r3, [r7, #32]
 8001f2c:	6a3b      	ldr	r3, [r7, #32]
 8001f2e:	fa93 f3a3 	rbit	r3, r3
 8001f32:	61fb      	str	r3, [r7, #28]
 8001f34:	4b29      	ldr	r3, [pc, #164]	; (8001fdc <HAL_RCC_ClockConfig+0x260>)
 8001f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f38:	2202      	movs	r2, #2
 8001f3a:	61ba      	str	r2, [r7, #24]
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	fa92 f2a2 	rbit	r2, r2
 8001f42:	617a      	str	r2, [r7, #20]
  return result;
 8001f44:	697a      	ldr	r2, [r7, #20]
 8001f46:	fab2 f282 	clz	r2, r2
 8001f4a:	b2d2      	uxtb	r2, r2
 8001f4c:	f042 0220 	orr.w	r2, r2, #32
 8001f50:	b2d2      	uxtb	r2, r2
 8001f52:	f002 021f 	and.w	r2, r2, #31
 8001f56:	2101      	movs	r1, #1
 8001f58:	fa01 f202 	lsl.w	r2, r1, r2
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d101      	bne.n	8001f66 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e079      	b.n	800205a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f66:	4b1d      	ldr	r3, [pc, #116]	; (8001fdc <HAL_RCC_ClockConfig+0x260>)
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f023 0203 	bic.w	r2, r3, #3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	491a      	ldr	r1, [pc, #104]	; (8001fdc <HAL_RCC_ClockConfig+0x260>)
 8001f74:	4313      	orrs	r3, r2
 8001f76:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f78:	f7fe fc42 	bl	8000800 <HAL_GetTick>
 8001f7c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f7e:	e00a      	b.n	8001f96 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f80:	f7fe fc3e 	bl	8000800 <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d901      	bls.n	8001f96 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e061      	b.n	800205a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f96:	4b11      	ldr	r3, [pc, #68]	; (8001fdc <HAL_RCC_ClockConfig+0x260>)
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f003 020c 	and.w	r2, r3, #12
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d1eb      	bne.n	8001f80 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fa8:	4b0b      	ldr	r3, [pc, #44]	; (8001fd8 <HAL_RCC_ClockConfig+0x25c>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0307 	and.w	r3, r3, #7
 8001fb0:	683a      	ldr	r2, [r7, #0]
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d214      	bcs.n	8001fe0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fb6:	4b08      	ldr	r3, [pc, #32]	; (8001fd8 <HAL_RCC_ClockConfig+0x25c>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f023 0207 	bic.w	r2, r3, #7
 8001fbe:	4906      	ldr	r1, [pc, #24]	; (8001fd8 <HAL_RCC_ClockConfig+0x25c>)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fc6:	4b04      	ldr	r3, [pc, #16]	; (8001fd8 <HAL_RCC_ClockConfig+0x25c>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0307 	and.w	r3, r3, #7
 8001fce:	683a      	ldr	r2, [r7, #0]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d005      	beq.n	8001fe0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e040      	b.n	800205a <HAL_RCC_ClockConfig+0x2de>
 8001fd8:	40022000 	.word	0x40022000
 8001fdc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0304 	and.w	r3, r3, #4
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d008      	beq.n	8001ffe <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fec:	4b1d      	ldr	r3, [pc, #116]	; (8002064 <HAL_RCC_ClockConfig+0x2e8>)
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	491a      	ldr	r1, [pc, #104]	; (8002064 <HAL_RCC_ClockConfig+0x2e8>)
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0308 	and.w	r3, r3, #8
 8002006:	2b00      	cmp	r3, #0
 8002008:	d009      	beq.n	800201e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800200a:	4b16      	ldr	r3, [pc, #88]	; (8002064 <HAL_RCC_ClockConfig+0x2e8>)
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	691b      	ldr	r3, [r3, #16]
 8002016:	00db      	lsls	r3, r3, #3
 8002018:	4912      	ldr	r1, [pc, #72]	; (8002064 <HAL_RCC_ClockConfig+0x2e8>)
 800201a:	4313      	orrs	r3, r2
 800201c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800201e:	f000 f829 	bl	8002074 <HAL_RCC_GetSysClockFreq>
 8002022:	4601      	mov	r1, r0
 8002024:	4b0f      	ldr	r3, [pc, #60]	; (8002064 <HAL_RCC_ClockConfig+0x2e8>)
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800202c:	22f0      	movs	r2, #240	; 0xf0
 800202e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002030:	693a      	ldr	r2, [r7, #16]
 8002032:	fa92 f2a2 	rbit	r2, r2
 8002036:	60fa      	str	r2, [r7, #12]
  return result;
 8002038:	68fa      	ldr	r2, [r7, #12]
 800203a:	fab2 f282 	clz	r2, r2
 800203e:	b2d2      	uxtb	r2, r2
 8002040:	40d3      	lsrs	r3, r2
 8002042:	4a09      	ldr	r2, [pc, #36]	; (8002068 <HAL_RCC_ClockConfig+0x2ec>)
 8002044:	5cd3      	ldrb	r3, [r2, r3]
 8002046:	fa21 f303 	lsr.w	r3, r1, r3
 800204a:	4a08      	ldr	r2, [pc, #32]	; (800206c <HAL_RCC_ClockConfig+0x2f0>)
 800204c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800204e:	4b08      	ldr	r3, [pc, #32]	; (8002070 <HAL_RCC_ClockConfig+0x2f4>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4618      	mov	r0, r3
 8002054:	f7fe fade 	bl	8000614 <HAL_InitTick>
  
  return HAL_OK;
 8002058:	2300      	movs	r3, #0
}
 800205a:	4618      	mov	r0, r3
 800205c:	3778      	adds	r7, #120	; 0x78
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	40021000 	.word	0x40021000
 8002068:	08007ba0 	.word	0x08007ba0
 800206c:	20000000 	.word	0x20000000
 8002070:	20000004 	.word	0x20000004

08002074 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002074:	b480      	push	{r7}
 8002076:	b08b      	sub	sp, #44	; 0x2c
 8002078:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800207a:	2300      	movs	r3, #0
 800207c:	61fb      	str	r3, [r7, #28]
 800207e:	2300      	movs	r3, #0
 8002080:	61bb      	str	r3, [r7, #24]
 8002082:	2300      	movs	r3, #0
 8002084:	627b      	str	r3, [r7, #36]	; 0x24
 8002086:	2300      	movs	r3, #0
 8002088:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800208a:	2300      	movs	r3, #0
 800208c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800208e:	4b29      	ldr	r3, [pc, #164]	; (8002134 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	f003 030c 	and.w	r3, r3, #12
 800209a:	2b04      	cmp	r3, #4
 800209c:	d002      	beq.n	80020a4 <HAL_RCC_GetSysClockFreq+0x30>
 800209e:	2b08      	cmp	r3, #8
 80020a0:	d003      	beq.n	80020aa <HAL_RCC_GetSysClockFreq+0x36>
 80020a2:	e03c      	b.n	800211e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020a4:	4b24      	ldr	r3, [pc, #144]	; (8002138 <HAL_RCC_GetSysClockFreq+0xc4>)
 80020a6:	623b      	str	r3, [r7, #32]
      break;
 80020a8:	e03c      	b.n	8002124 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80020b0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80020b4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b6:	68ba      	ldr	r2, [r7, #8]
 80020b8:	fa92 f2a2 	rbit	r2, r2
 80020bc:	607a      	str	r2, [r7, #4]
  return result;
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	fab2 f282 	clz	r2, r2
 80020c4:	b2d2      	uxtb	r2, r2
 80020c6:	40d3      	lsrs	r3, r2
 80020c8:	4a1c      	ldr	r2, [pc, #112]	; (800213c <HAL_RCC_GetSysClockFreq+0xc8>)
 80020ca:	5cd3      	ldrb	r3, [r2, r3]
 80020cc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80020ce:	4b19      	ldr	r3, [pc, #100]	; (8002134 <HAL_RCC_GetSysClockFreq+0xc0>)
 80020d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d2:	f003 030f 	and.w	r3, r3, #15
 80020d6:	220f      	movs	r2, #15
 80020d8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020da:	693a      	ldr	r2, [r7, #16]
 80020dc:	fa92 f2a2 	rbit	r2, r2
 80020e0:	60fa      	str	r2, [r7, #12]
  return result;
 80020e2:	68fa      	ldr	r2, [r7, #12]
 80020e4:	fab2 f282 	clz	r2, r2
 80020e8:	b2d2      	uxtb	r2, r2
 80020ea:	40d3      	lsrs	r3, r2
 80020ec:	4a14      	ldr	r2, [pc, #80]	; (8002140 <HAL_RCC_GetSysClockFreq+0xcc>)
 80020ee:	5cd3      	ldrb	r3, [r2, r3]
 80020f0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d008      	beq.n	800210e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80020fc:	4a0e      	ldr	r2, [pc, #56]	; (8002138 <HAL_RCC_GetSysClockFreq+0xc4>)
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	fbb2 f2f3 	udiv	r2, r2, r3
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	fb02 f303 	mul.w	r3, r2, r3
 800210a:	627b      	str	r3, [r7, #36]	; 0x24
 800210c:	e004      	b.n	8002118 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	4a0c      	ldr	r2, [pc, #48]	; (8002144 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002112:	fb02 f303 	mul.w	r3, r2, r3
 8002116:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211a:	623b      	str	r3, [r7, #32]
      break;
 800211c:	e002      	b.n	8002124 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800211e:	4b06      	ldr	r3, [pc, #24]	; (8002138 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002120:	623b      	str	r3, [r7, #32]
      break;
 8002122:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002124:	6a3b      	ldr	r3, [r7, #32]
}
 8002126:	4618      	mov	r0, r3
 8002128:	372c      	adds	r7, #44	; 0x2c
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	40021000 	.word	0x40021000
 8002138:	007a1200 	.word	0x007a1200
 800213c:	08007bb8 	.word	0x08007bb8
 8002140:	08007bc8 	.word	0x08007bc8
 8002144:	003d0900 	.word	0x003d0900

08002148 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800214c:	4b03      	ldr	r3, [pc, #12]	; (800215c <HAL_RCC_GetHCLKFreq+0x14>)
 800214e:	681b      	ldr	r3, [r3, #0]
}
 8002150:	4618      	mov	r0, r3
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	20000000 	.word	0x20000000

08002160 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002166:	f7ff ffef 	bl	8002148 <HAL_RCC_GetHCLKFreq>
 800216a:	4601      	mov	r1, r0
 800216c:	4b0b      	ldr	r3, [pc, #44]	; (800219c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002174:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002178:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	fa92 f2a2 	rbit	r2, r2
 8002180:	603a      	str	r2, [r7, #0]
  return result;
 8002182:	683a      	ldr	r2, [r7, #0]
 8002184:	fab2 f282 	clz	r2, r2
 8002188:	b2d2      	uxtb	r2, r2
 800218a:	40d3      	lsrs	r3, r2
 800218c:	4a04      	ldr	r2, [pc, #16]	; (80021a0 <HAL_RCC_GetPCLK1Freq+0x40>)
 800218e:	5cd3      	ldrb	r3, [r2, r3]
 8002190:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002194:	4618      	mov	r0, r3
 8002196:	3708      	adds	r7, #8
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	40021000 	.word	0x40021000
 80021a0:	08007bb0 	.word	0x08007bb0

080021a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80021aa:	f7ff ffcd 	bl	8002148 <HAL_RCC_GetHCLKFreq>
 80021ae:	4601      	mov	r1, r0
 80021b0:	4b0b      	ldr	r3, [pc, #44]	; (80021e0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80021b8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80021bc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	fa92 f2a2 	rbit	r2, r2
 80021c4:	603a      	str	r2, [r7, #0]
  return result;
 80021c6:	683a      	ldr	r2, [r7, #0]
 80021c8:	fab2 f282 	clz	r2, r2
 80021cc:	b2d2      	uxtb	r2, r2
 80021ce:	40d3      	lsrs	r3, r2
 80021d0:	4a04      	ldr	r2, [pc, #16]	; (80021e4 <HAL_RCC_GetPCLK2Freq+0x40>)
 80021d2:	5cd3      	ldrb	r3, [r2, r3]
 80021d4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80021d8:	4618      	mov	r0, r3
 80021da:	3708      	adds	r7, #8
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	40021000 	.word	0x40021000
 80021e4:	08007bb0 	.word	0x08007bb0

080021e8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	220f      	movs	r2, #15
 80021f6:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80021f8:	4b12      	ldr	r3, [pc, #72]	; (8002244 <HAL_RCC_GetClockConfig+0x5c>)
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f003 0203 	and.w	r2, r3, #3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002204:	4b0f      	ldr	r3, [pc, #60]	; (8002244 <HAL_RCC_GetClockConfig+0x5c>)
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8002210:	4b0c      	ldr	r3, [pc, #48]	; (8002244 <HAL_RCC_GetClockConfig+0x5c>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800221c:	4b09      	ldr	r3, [pc, #36]	; (8002244 <HAL_RCC_GetClockConfig+0x5c>)
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	08db      	lsrs	r3, r3, #3
 8002222:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 800222a:	4b07      	ldr	r3, [pc, #28]	; (8002248 <HAL_RCC_GetClockConfig+0x60>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0207 	and.w	r2, r3, #7
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	601a      	str	r2, [r3, #0]
}
 8002236:	bf00      	nop
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	40021000 	.word	0x40021000
 8002248:	40022000 	.word	0x40022000

0800224c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b092      	sub	sp, #72	; 0x48
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002254:	2300      	movs	r3, #0
 8002256:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002258:	2300      	movs	r3, #0
 800225a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800225c:	2300      	movs	r3, #0
 800225e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800226a:	2b00      	cmp	r3, #0
 800226c:	f000 80d4 	beq.w	8002418 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002270:	4b4e      	ldr	r3, [pc, #312]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002272:	69db      	ldr	r3, [r3, #28]
 8002274:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d10e      	bne.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800227c:	4b4b      	ldr	r3, [pc, #300]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800227e:	69db      	ldr	r3, [r3, #28]
 8002280:	4a4a      	ldr	r2, [pc, #296]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002282:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002286:	61d3      	str	r3, [r2, #28]
 8002288:	4b48      	ldr	r3, [pc, #288]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800228a:	69db      	ldr	r3, [r3, #28]
 800228c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002290:	60bb      	str	r3, [r7, #8]
 8002292:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002294:	2301      	movs	r3, #1
 8002296:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800229a:	4b45      	ldr	r3, [pc, #276]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d118      	bne.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022a6:	4b42      	ldr	r3, [pc, #264]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a41      	ldr	r2, [pc, #260]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022b0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022b2:	f7fe faa5 	bl	8000800 <HAL_GetTick>
 80022b6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022b8:	e008      	b.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022ba:	f7fe faa1 	bl	8000800 <HAL_GetTick>
 80022be:	4602      	mov	r2, r0
 80022c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	2b64      	cmp	r3, #100	; 0x64
 80022c6:	d901      	bls.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80022c8:	2303      	movs	r3, #3
 80022ca:	e169      	b.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022cc:	4b38      	ldr	r3, [pc, #224]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d0f0      	beq.n	80022ba <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80022d8:	4b34      	ldr	r3, [pc, #208]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022da:	6a1b      	ldr	r3, [r3, #32]
 80022dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022e0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80022e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	f000 8084 	beq.w	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d07c      	beq.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80022f8:	4b2c      	ldr	r3, [pc, #176]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022fa:	6a1b      	ldr	r3, [r3, #32]
 80022fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002300:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002302:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002306:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800230a:	fa93 f3a3 	rbit	r3, r3
 800230e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002312:	fab3 f383 	clz	r3, r3
 8002316:	b2db      	uxtb	r3, r3
 8002318:	461a      	mov	r2, r3
 800231a:	4b26      	ldr	r3, [pc, #152]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800231c:	4413      	add	r3, r2
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	461a      	mov	r2, r3
 8002322:	2301      	movs	r3, #1
 8002324:	6013      	str	r3, [r2, #0]
 8002326:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800232a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800232c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800232e:	fa93 f3a3 	rbit	r3, r3
 8002332:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002336:	fab3 f383 	clz	r3, r3
 800233a:	b2db      	uxtb	r3, r3
 800233c:	461a      	mov	r2, r3
 800233e:	4b1d      	ldr	r3, [pc, #116]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002340:	4413      	add	r3, r2
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	461a      	mov	r2, r3
 8002346:	2300      	movs	r3, #0
 8002348:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800234a:	4a18      	ldr	r2, [pc, #96]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800234c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800234e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002350:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002352:	f003 0301 	and.w	r3, r3, #1
 8002356:	2b00      	cmp	r3, #0
 8002358:	d04b      	beq.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800235a:	f7fe fa51 	bl	8000800 <HAL_GetTick>
 800235e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002360:	e00a      	b.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002362:	f7fe fa4d 	bl	8000800 <HAL_GetTick>
 8002366:	4602      	mov	r2, r0
 8002368:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002370:	4293      	cmp	r3, r2
 8002372:	d901      	bls.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002374:	2303      	movs	r3, #3
 8002376:	e113      	b.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8002378:	2302      	movs	r3, #2
 800237a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800237e:	fa93 f3a3 	rbit	r3, r3
 8002382:	627b      	str	r3, [r7, #36]	; 0x24
 8002384:	2302      	movs	r3, #2
 8002386:	623b      	str	r3, [r7, #32]
 8002388:	6a3b      	ldr	r3, [r7, #32]
 800238a:	fa93 f3a3 	rbit	r3, r3
 800238e:	61fb      	str	r3, [r7, #28]
  return result;
 8002390:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002392:	fab3 f383 	clz	r3, r3
 8002396:	b2db      	uxtb	r3, r3
 8002398:	095b      	lsrs	r3, r3, #5
 800239a:	b2db      	uxtb	r3, r3
 800239c:	f043 0302 	orr.w	r3, r3, #2
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d108      	bne.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80023a6:	4b01      	ldr	r3, [pc, #4]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023a8:	6a1b      	ldr	r3, [r3, #32]
 80023aa:	e00d      	b.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80023ac:	40021000 	.word	0x40021000
 80023b0:	40007000 	.word	0x40007000
 80023b4:	10908100 	.word	0x10908100
 80023b8:	2302      	movs	r3, #2
 80023ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023bc:	69bb      	ldr	r3, [r7, #24]
 80023be:	fa93 f3a3 	rbit	r3, r3
 80023c2:	617b      	str	r3, [r7, #20]
 80023c4:	4b78      	ldr	r3, [pc, #480]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80023c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c8:	2202      	movs	r2, #2
 80023ca:	613a      	str	r2, [r7, #16]
 80023cc:	693a      	ldr	r2, [r7, #16]
 80023ce:	fa92 f2a2 	rbit	r2, r2
 80023d2:	60fa      	str	r2, [r7, #12]
  return result;
 80023d4:	68fa      	ldr	r2, [r7, #12]
 80023d6:	fab2 f282 	clz	r2, r2
 80023da:	b2d2      	uxtb	r2, r2
 80023dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023e0:	b2d2      	uxtb	r2, r2
 80023e2:	f002 021f 	and.w	r2, r2, #31
 80023e6:	2101      	movs	r1, #1
 80023e8:	fa01 f202 	lsl.w	r2, r1, r2
 80023ec:	4013      	ands	r3, r2
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d0b7      	beq.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80023f2:	4b6d      	ldr	r3, [pc, #436]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80023f4:	6a1b      	ldr	r3, [r3, #32]
 80023f6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	496a      	ldr	r1, [pc, #424]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002400:	4313      	orrs	r3, r2
 8002402:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002404:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002408:	2b01      	cmp	r3, #1
 800240a:	d105      	bne.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800240c:	4b66      	ldr	r3, [pc, #408]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800240e:	69db      	ldr	r3, [r3, #28]
 8002410:	4a65      	ldr	r2, [pc, #404]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002412:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002416:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0301 	and.w	r3, r3, #1
 8002420:	2b00      	cmp	r3, #0
 8002422:	d008      	beq.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002424:	4b60      	ldr	r3, [pc, #384]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002428:	f023 0203 	bic.w	r2, r3, #3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	495d      	ldr	r1, [pc, #372]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002432:	4313      	orrs	r3, r2
 8002434:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0302 	and.w	r3, r3, #2
 800243e:	2b00      	cmp	r3, #0
 8002440:	d008      	beq.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002442:	4b59      	ldr	r3, [pc, #356]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002446:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	4956      	ldr	r1, [pc, #344]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002450:	4313      	orrs	r3, r2
 8002452:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 0304 	and.w	r3, r3, #4
 800245c:	2b00      	cmp	r3, #0
 800245e:	d008      	beq.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002460:	4b51      	ldr	r3, [pc, #324]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002464:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	691b      	ldr	r3, [r3, #16]
 800246c:	494e      	ldr	r1, [pc, #312]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800246e:	4313      	orrs	r3, r2
 8002470:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0320 	and.w	r3, r3, #32
 800247a:	2b00      	cmp	r3, #0
 800247c:	d008      	beq.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800247e:	4b4a      	ldr	r3, [pc, #296]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002482:	f023 0210 	bic.w	r2, r3, #16
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	69db      	ldr	r3, [r3, #28]
 800248a:	4947      	ldr	r1, [pc, #284]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800248c:	4313      	orrs	r3, r2
 800248e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d008      	beq.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800249c:	4b42      	ldr	r3, [pc, #264]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024a8:	493f      	ldr	r1, [pc, #252]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024aa:	4313      	orrs	r3, r2
 80024ac:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d008      	beq.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80024ba:	4b3b      	ldr	r3, [pc, #236]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024be:	f023 0220 	bic.w	r2, r3, #32
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6a1b      	ldr	r3, [r3, #32]
 80024c6:	4938      	ldr	r1, [pc, #224]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024c8:	4313      	orrs	r3, r2
 80024ca:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0308 	and.w	r3, r3, #8
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d008      	beq.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80024d8:	4b33      	ldr	r3, [pc, #204]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	695b      	ldr	r3, [r3, #20]
 80024e4:	4930      	ldr	r1, [pc, #192]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0310 	and.w	r3, r3, #16
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d008      	beq.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80024f6:	4b2c      	ldr	r3, [pc, #176]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	699b      	ldr	r3, [r3, #24]
 8002502:	4929      	ldr	r1, [pc, #164]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002504:	4313      	orrs	r3, r2
 8002506:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002510:	2b00      	cmp	r3, #0
 8002512:	d008      	beq.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002514:	4b24      	ldr	r3, [pc, #144]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002520:	4921      	ldr	r1, [pc, #132]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002522:	4313      	orrs	r3, r2
 8002524:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800252e:	2b00      	cmp	r3, #0
 8002530:	d008      	beq.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002532:	4b1d      	ldr	r3, [pc, #116]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002536:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253e:	491a      	ldr	r1, [pc, #104]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002540:	4313      	orrs	r3, r2
 8002542:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800254c:	2b00      	cmp	r3, #0
 800254e:	d008      	beq.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002550:	4b15      	ldr	r3, [pc, #84]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002554:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800255c:	4912      	ldr	r1, [pc, #72]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800255e:	4313      	orrs	r3, r2
 8002560:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d008      	beq.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800256e:	4b0e      	ldr	r3, [pc, #56]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002572:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257a:	490b      	ldr	r1, [pc, #44]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800257c:	4313      	orrs	r3, r2
 800257e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d008      	beq.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800258c:	4b06      	ldr	r3, [pc, #24]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800258e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002590:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002598:	4903      	ldr	r1, [pc, #12]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800259a:	4313      	orrs	r3, r2
 800259c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800259e:	2300      	movs	r3, #0
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3748      	adds	r7, #72	; 0x48
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	40021000 	.word	0x40021000

080025ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d101      	bne.n	80025be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e049      	b.n	8002652 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d106      	bne.n	80025d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f000 f841 	bl	800265a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2202      	movs	r2, #2
 80025dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	3304      	adds	r3, #4
 80025e8:	4619      	mov	r1, r3
 80025ea:	4610      	mov	r0, r2
 80025ec:	f000 f9f2 	bl	80029d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2201      	movs	r2, #1
 80025f4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2201      	movs	r2, #1
 80025fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2201      	movs	r2, #1
 8002604:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2201      	movs	r2, #1
 800260c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2201      	movs	r2, #1
 8002614:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2201      	movs	r2, #1
 800261c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2201      	movs	r2, #1
 800262c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2201      	movs	r2, #1
 8002634:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2201      	movs	r2, #1
 800263c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2201      	movs	r2, #1
 8002644:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2201      	movs	r2, #1
 800264c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002650:	2300      	movs	r3, #0
}
 8002652:	4618      	mov	r0, r3
 8002654:	3708      	adds	r7, #8
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}

0800265a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800265a:	b480      	push	{r7}
 800265c:	b083      	sub	sp, #12
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002662:	bf00      	nop
 8002664:	370c      	adds	r7, #12
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
	...

08002670 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002670:	b480      	push	{r7}
 8002672:	b085      	sub	sp, #20
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800267e:	b2db      	uxtb	r3, r3
 8002680:	2b01      	cmp	r3, #1
 8002682:	d001      	beq.n	8002688 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e04a      	b.n	800271e <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2202      	movs	r2, #2
 800268c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	68da      	ldr	r2, [r3, #12]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f042 0201 	orr.w	r2, r2, #1
 800269e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a21      	ldr	r2, [pc, #132]	; (800272c <HAL_TIM_Base_Start_IT+0xbc>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d018      	beq.n	80026dc <HAL_TIM_Base_Start_IT+0x6c>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026b2:	d013      	beq.n	80026dc <HAL_TIM_Base_Start_IT+0x6c>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a1d      	ldr	r2, [pc, #116]	; (8002730 <HAL_TIM_Base_Start_IT+0xc0>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d00e      	beq.n	80026dc <HAL_TIM_Base_Start_IT+0x6c>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a1c      	ldr	r2, [pc, #112]	; (8002734 <HAL_TIM_Base_Start_IT+0xc4>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d009      	beq.n	80026dc <HAL_TIM_Base_Start_IT+0x6c>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a1a      	ldr	r2, [pc, #104]	; (8002738 <HAL_TIM_Base_Start_IT+0xc8>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d004      	beq.n	80026dc <HAL_TIM_Base_Start_IT+0x6c>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a19      	ldr	r2, [pc, #100]	; (800273c <HAL_TIM_Base_Start_IT+0xcc>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d115      	bne.n	8002708 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	689a      	ldr	r2, [r3, #8]
 80026e2:	4b17      	ldr	r3, [pc, #92]	; (8002740 <HAL_TIM_Base_Start_IT+0xd0>)
 80026e4:	4013      	ands	r3, r2
 80026e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2b06      	cmp	r3, #6
 80026ec:	d015      	beq.n	800271a <HAL_TIM_Base_Start_IT+0xaa>
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026f4:	d011      	beq.n	800271a <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f042 0201 	orr.w	r2, r2, #1
 8002704:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002706:	e008      	b.n	800271a <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f042 0201 	orr.w	r2, r2, #1
 8002716:	601a      	str	r2, [r3, #0]
 8002718:	e000      	b.n	800271c <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800271a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800271c:	2300      	movs	r3, #0
}
 800271e:	4618      	mov	r0, r3
 8002720:	3714      	adds	r7, #20
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	40012c00 	.word	0x40012c00
 8002730:	40000400 	.word	0x40000400
 8002734:	40000800 	.word	0x40000800
 8002738:	40013400 	.word	0x40013400
 800273c:	40014000 	.word	0x40014000
 8002740:	00010007 	.word	0x00010007

08002744 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	691b      	ldr	r3, [r3, #16]
 8002752:	f003 0302 	and.w	r3, r3, #2
 8002756:	2b02      	cmp	r3, #2
 8002758:	d122      	bne.n	80027a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	f003 0302 	and.w	r3, r3, #2
 8002764:	2b02      	cmp	r3, #2
 8002766:	d11b      	bne.n	80027a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f06f 0202 	mvn.w	r2, #2
 8002770:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2201      	movs	r2, #1
 8002776:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	699b      	ldr	r3, [r3, #24]
 800277e:	f003 0303 	and.w	r3, r3, #3
 8002782:	2b00      	cmp	r3, #0
 8002784:	d003      	beq.n	800278e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f000 f905 	bl	8002996 <HAL_TIM_IC_CaptureCallback>
 800278c:	e005      	b.n	800279a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f000 f8f7 	bl	8002982 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	f000 f908 	bl	80029aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2200      	movs	r2, #0
 800279e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	691b      	ldr	r3, [r3, #16]
 80027a6:	f003 0304 	and.w	r3, r3, #4
 80027aa:	2b04      	cmp	r3, #4
 80027ac:	d122      	bne.n	80027f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	f003 0304 	and.w	r3, r3, #4
 80027b8:	2b04      	cmp	r3, #4
 80027ba:	d11b      	bne.n	80027f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f06f 0204 	mvn.w	r2, #4
 80027c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2202      	movs	r2, #2
 80027ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	699b      	ldr	r3, [r3, #24]
 80027d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d003      	beq.n	80027e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f000 f8db 	bl	8002996 <HAL_TIM_IC_CaptureCallback>
 80027e0:	e005      	b.n	80027ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f000 f8cd 	bl	8002982 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f000 f8de 	bl	80029aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	f003 0308 	and.w	r3, r3, #8
 80027fe:	2b08      	cmp	r3, #8
 8002800:	d122      	bne.n	8002848 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	f003 0308 	and.w	r3, r3, #8
 800280c:	2b08      	cmp	r3, #8
 800280e:	d11b      	bne.n	8002848 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f06f 0208 	mvn.w	r2, #8
 8002818:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2204      	movs	r2, #4
 800281e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	69db      	ldr	r3, [r3, #28]
 8002826:	f003 0303 	and.w	r3, r3, #3
 800282a:	2b00      	cmp	r3, #0
 800282c:	d003      	beq.n	8002836 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f000 f8b1 	bl	8002996 <HAL_TIM_IC_CaptureCallback>
 8002834:	e005      	b.n	8002842 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f000 f8a3 	bl	8002982 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	f000 f8b4 	bl	80029aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	691b      	ldr	r3, [r3, #16]
 800284e:	f003 0310 	and.w	r3, r3, #16
 8002852:	2b10      	cmp	r3, #16
 8002854:	d122      	bne.n	800289c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	f003 0310 	and.w	r3, r3, #16
 8002860:	2b10      	cmp	r3, #16
 8002862:	d11b      	bne.n	800289c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f06f 0210 	mvn.w	r2, #16
 800286c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2208      	movs	r2, #8
 8002872:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	69db      	ldr	r3, [r3, #28]
 800287a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800287e:	2b00      	cmp	r3, #0
 8002880:	d003      	beq.n	800288a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f000 f887 	bl	8002996 <HAL_TIM_IC_CaptureCallback>
 8002888:	e005      	b.n	8002896 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f000 f879 	bl	8002982 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	f000 f88a 	bl	80029aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	691b      	ldr	r3, [r3, #16]
 80028a2:	f003 0301 	and.w	r3, r3, #1
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d10e      	bne.n	80028c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	f003 0301 	and.w	r3, r3, #1
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d107      	bne.n	80028c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f06f 0201 	mvn.w	r2, #1
 80028c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f7fd fe22 	bl	800050c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	691b      	ldr	r3, [r3, #16]
 80028ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028d2:	2b80      	cmp	r3, #128	; 0x80
 80028d4:	d10e      	bne.n	80028f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028e0:	2b80      	cmp	r3, #128	; 0x80
 80028e2:	d107      	bne.n	80028f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80028ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f000 f90a 	bl	8002b08 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	691b      	ldr	r3, [r3, #16]
 80028fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002902:	d10e      	bne.n	8002922 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800290e:	2b80      	cmp	r3, #128	; 0x80
 8002910:	d107      	bne.n	8002922 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800291a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f000 f8fd 	bl	8002b1c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	691b      	ldr	r3, [r3, #16]
 8002928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800292c:	2b40      	cmp	r3, #64	; 0x40
 800292e:	d10e      	bne.n	800294e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	68db      	ldr	r3, [r3, #12]
 8002936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800293a:	2b40      	cmp	r3, #64	; 0x40
 800293c:	d107      	bne.n	800294e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002946:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f000 f838 	bl	80029be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	691b      	ldr	r3, [r3, #16]
 8002954:	f003 0320 	and.w	r3, r3, #32
 8002958:	2b20      	cmp	r3, #32
 800295a:	d10e      	bne.n	800297a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	f003 0320 	and.w	r3, r3, #32
 8002966:	2b20      	cmp	r3, #32
 8002968:	d107      	bne.n	800297a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f06f 0220 	mvn.w	r2, #32
 8002972:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f000 f8bd 	bl	8002af4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800297a:	bf00      	nop
 800297c:	3708      	adds	r7, #8
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}

08002982 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002982:	b480      	push	{r7}
 8002984:	b083      	sub	sp, #12
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800298a:	bf00      	nop
 800298c:	370c      	adds	r7, #12
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr

08002996 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002996:	b480      	push	{r7}
 8002998:	b083      	sub	sp, #12
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800299e:	bf00      	nop
 80029a0:	370c      	adds	r7, #12
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr

080029aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80029aa:	b480      	push	{r7}
 80029ac:	b083      	sub	sp, #12
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80029b2:	bf00      	nop
 80029b4:	370c      	adds	r7, #12
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr

080029be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80029be:	b480      	push	{r7}
 80029c0:	b083      	sub	sp, #12
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80029c6:	bf00      	nop
 80029c8:	370c      	adds	r7, #12
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr
	...

080029d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b085      	sub	sp, #20
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	4a3c      	ldr	r2, [pc, #240]	; (8002ad8 <TIM_Base_SetConfig+0x104>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d00f      	beq.n	8002a0c <TIM_Base_SetConfig+0x38>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029f2:	d00b      	beq.n	8002a0c <TIM_Base_SetConfig+0x38>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	4a39      	ldr	r2, [pc, #228]	; (8002adc <TIM_Base_SetConfig+0x108>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d007      	beq.n	8002a0c <TIM_Base_SetConfig+0x38>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	4a38      	ldr	r2, [pc, #224]	; (8002ae0 <TIM_Base_SetConfig+0x10c>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d003      	beq.n	8002a0c <TIM_Base_SetConfig+0x38>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	4a37      	ldr	r2, [pc, #220]	; (8002ae4 <TIM_Base_SetConfig+0x110>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d108      	bne.n	8002a1e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	68fa      	ldr	r2, [r7, #12]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a2d      	ldr	r2, [pc, #180]	; (8002ad8 <TIM_Base_SetConfig+0x104>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d01b      	beq.n	8002a5e <TIM_Base_SetConfig+0x8a>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a2c:	d017      	beq.n	8002a5e <TIM_Base_SetConfig+0x8a>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a2a      	ldr	r2, [pc, #168]	; (8002adc <TIM_Base_SetConfig+0x108>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d013      	beq.n	8002a5e <TIM_Base_SetConfig+0x8a>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a29      	ldr	r2, [pc, #164]	; (8002ae0 <TIM_Base_SetConfig+0x10c>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d00f      	beq.n	8002a5e <TIM_Base_SetConfig+0x8a>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a28      	ldr	r2, [pc, #160]	; (8002ae4 <TIM_Base_SetConfig+0x110>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d00b      	beq.n	8002a5e <TIM_Base_SetConfig+0x8a>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a27      	ldr	r2, [pc, #156]	; (8002ae8 <TIM_Base_SetConfig+0x114>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d007      	beq.n	8002a5e <TIM_Base_SetConfig+0x8a>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a26      	ldr	r2, [pc, #152]	; (8002aec <TIM_Base_SetConfig+0x118>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d003      	beq.n	8002a5e <TIM_Base_SetConfig+0x8a>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a25      	ldr	r2, [pc, #148]	; (8002af0 <TIM_Base_SetConfig+0x11c>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d108      	bne.n	8002a70 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	68fa      	ldr	r2, [r7, #12]
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	695b      	ldr	r3, [r3, #20]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	68fa      	ldr	r2, [r7, #12]
 8002a82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	689a      	ldr	r2, [r3, #8]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	4a10      	ldr	r2, [pc, #64]	; (8002ad8 <TIM_Base_SetConfig+0x104>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d00f      	beq.n	8002abc <TIM_Base_SetConfig+0xe8>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	4a11      	ldr	r2, [pc, #68]	; (8002ae4 <TIM_Base_SetConfig+0x110>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d00b      	beq.n	8002abc <TIM_Base_SetConfig+0xe8>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	4a10      	ldr	r2, [pc, #64]	; (8002ae8 <TIM_Base_SetConfig+0x114>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d007      	beq.n	8002abc <TIM_Base_SetConfig+0xe8>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	4a0f      	ldr	r2, [pc, #60]	; (8002aec <TIM_Base_SetConfig+0x118>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d003      	beq.n	8002abc <TIM_Base_SetConfig+0xe8>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	4a0e      	ldr	r2, [pc, #56]	; (8002af0 <TIM_Base_SetConfig+0x11c>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d103      	bne.n	8002ac4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	691a      	ldr	r2, [r3, #16]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	615a      	str	r2, [r3, #20]
}
 8002aca:	bf00      	nop
 8002acc:	3714      	adds	r7, #20
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop
 8002ad8:	40012c00 	.word	0x40012c00
 8002adc:	40000400 	.word	0x40000400
 8002ae0:	40000800 	.word	0x40000800
 8002ae4:	40013400 	.word	0x40013400
 8002ae8:	40014000 	.word	0x40014000
 8002aec:	40014400 	.word	0x40014400
 8002af0:	40014800 	.word	0x40014800

08002af4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b083      	sub	sp, #12
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002afc:	bf00      	nop
 8002afe:	370c      	adds	r7, #12
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr

08002b08 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b10:	bf00      	nop
 8002b12:	370c      	adds	r7, #12
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr

08002b1c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002b24:	bf00      	nop
 8002b26:	370c      	adds	r7, #12
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr

08002b30 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d101      	bne.n	8002b42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e040      	b.n	8002bc4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d106      	bne.n	8002b58 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f7fd fd1a 	bl	800058c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2224      	movs	r2, #36	; 0x24
 8002b5c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f022 0201 	bic.w	r2, r2, #1
 8002b6c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f000 f8b6 	bl	8002ce0 <UART_SetConfig>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d101      	bne.n	8002b7e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e022      	b.n	8002bc4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d002      	beq.n	8002b8c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f000 fa7e 	bl	8003088 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	685a      	ldr	r2, [r3, #4]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b9a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	689a      	ldr	r2, [r3, #8]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002baa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f042 0201 	orr.w	r2, r2, #1
 8002bba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f000 fb05 	bl	80031cc <UART_CheckIdleState>
 8002bc2:	4603      	mov	r3, r0
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3708      	adds	r7, #8
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b08a      	sub	sp, #40	; 0x28
 8002bd0:	af02      	add	r7, sp, #8
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	60b9      	str	r1, [r7, #8]
 8002bd6:	603b      	str	r3, [r7, #0]
 8002bd8:	4613      	mov	r3, r2
 8002bda:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002be0:	2b20      	cmp	r3, #32
 8002be2:	d178      	bne.n	8002cd6 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d002      	beq.n	8002bf0 <HAL_UART_Transmit+0x24>
 8002bea:	88fb      	ldrh	r3, [r7, #6]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d101      	bne.n	8002bf4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e071      	b.n	8002cd8 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2221      	movs	r2, #33	; 0x21
 8002c00:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c02:	f7fd fdfd 	bl	8000800 <HAL_GetTick>
 8002c06:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	88fa      	ldrh	r2, [r7, #6]
 8002c0c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	88fa      	ldrh	r2, [r7, #6]
 8002c14:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c20:	d108      	bne.n	8002c34 <HAL_UART_Transmit+0x68>
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	691b      	ldr	r3, [r3, #16]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d104      	bne.n	8002c34 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	61bb      	str	r3, [r7, #24]
 8002c32:	e003      	b.n	8002c3c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002c3c:	e030      	b.n	8002ca0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	9300      	str	r3, [sp, #0]
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	2200      	movs	r2, #0
 8002c46:	2180      	movs	r1, #128	; 0x80
 8002c48:	68f8      	ldr	r0, [r7, #12]
 8002c4a:	f000 fb67 	bl	800331c <UART_WaitOnFlagUntilTimeout>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d004      	beq.n	8002c5e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2220      	movs	r2, #32
 8002c58:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e03c      	b.n	8002cd8 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d10b      	bne.n	8002c7c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	881a      	ldrh	r2, [r3, #0]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c70:	b292      	uxth	r2, r2
 8002c72:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002c74:	69bb      	ldr	r3, [r7, #24]
 8002c76:	3302      	adds	r3, #2
 8002c78:	61bb      	str	r3, [r7, #24]
 8002c7a:	e008      	b.n	8002c8e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	781a      	ldrb	r2, [r3, #0]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	b292      	uxth	r2, r2
 8002c86:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	3301      	adds	r3, #1
 8002c8c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	3b01      	subs	r3, #1
 8002c98:	b29a      	uxth	r2, r3
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d1c8      	bne.n	8002c3e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	9300      	str	r3, [sp, #0]
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	2140      	movs	r1, #64	; 0x40
 8002cb6:	68f8      	ldr	r0, [r7, #12]
 8002cb8:	f000 fb30 	bl	800331c <UART_WaitOnFlagUntilTimeout>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d004      	beq.n	8002ccc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2220      	movs	r2, #32
 8002cc6:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	e005      	b.n	8002cd8 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2220      	movs	r2, #32
 8002cd0:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	e000      	b.n	8002cd8 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8002cd6:	2302      	movs	r3, #2
  }
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3720      	adds	r7, #32
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b088      	sub	sp, #32
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	689a      	ldr	r2, [r3, #8]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	691b      	ldr	r3, [r3, #16]
 8002cf4:	431a      	orrs	r2, r3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	695b      	ldr	r3, [r3, #20]
 8002cfa:	431a      	orrs	r2, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	69db      	ldr	r3, [r3, #28]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002d0e:	f023 030c 	bic.w	r3, r3, #12
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	6812      	ldr	r2, [r2, #0]
 8002d16:	6979      	ldr	r1, [r7, #20]
 8002d18:	430b      	orrs	r3, r1
 8002d1a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	68da      	ldr	r2, [r3, #12]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	430a      	orrs	r2, r1
 8002d30:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	699b      	ldr	r3, [r3, #24]
 8002d36:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6a1b      	ldr	r3, [r3, #32]
 8002d3c:	697a      	ldr	r2, [r7, #20]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	697a      	ldr	r2, [r7, #20]
 8002d52:	430a      	orrs	r2, r1
 8002d54:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4aa7      	ldr	r2, [pc, #668]	; (8002ff8 <UART_SetConfig+0x318>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d120      	bne.n	8002da2 <UART_SetConfig+0xc2>
 8002d60:	4ba6      	ldr	r3, [pc, #664]	; (8002ffc <UART_SetConfig+0x31c>)
 8002d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d64:	f003 0303 	and.w	r3, r3, #3
 8002d68:	2b03      	cmp	r3, #3
 8002d6a:	d817      	bhi.n	8002d9c <UART_SetConfig+0xbc>
 8002d6c:	a201      	add	r2, pc, #4	; (adr r2, 8002d74 <UART_SetConfig+0x94>)
 8002d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d72:	bf00      	nop
 8002d74:	08002d85 	.word	0x08002d85
 8002d78:	08002d91 	.word	0x08002d91
 8002d7c:	08002d97 	.word	0x08002d97
 8002d80:	08002d8b 	.word	0x08002d8b
 8002d84:	2301      	movs	r3, #1
 8002d86:	77fb      	strb	r3, [r7, #31]
 8002d88:	e0b5      	b.n	8002ef6 <UART_SetConfig+0x216>
 8002d8a:	2302      	movs	r3, #2
 8002d8c:	77fb      	strb	r3, [r7, #31]
 8002d8e:	e0b2      	b.n	8002ef6 <UART_SetConfig+0x216>
 8002d90:	2304      	movs	r3, #4
 8002d92:	77fb      	strb	r3, [r7, #31]
 8002d94:	e0af      	b.n	8002ef6 <UART_SetConfig+0x216>
 8002d96:	2308      	movs	r3, #8
 8002d98:	77fb      	strb	r3, [r7, #31]
 8002d9a:	e0ac      	b.n	8002ef6 <UART_SetConfig+0x216>
 8002d9c:	2310      	movs	r3, #16
 8002d9e:	77fb      	strb	r3, [r7, #31]
 8002da0:	e0a9      	b.n	8002ef6 <UART_SetConfig+0x216>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a96      	ldr	r2, [pc, #600]	; (8003000 <UART_SetConfig+0x320>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d124      	bne.n	8002df6 <UART_SetConfig+0x116>
 8002dac:	4b93      	ldr	r3, [pc, #588]	; (8002ffc <UART_SetConfig+0x31c>)
 8002dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002db4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002db8:	d011      	beq.n	8002dde <UART_SetConfig+0xfe>
 8002dba:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002dbe:	d817      	bhi.n	8002df0 <UART_SetConfig+0x110>
 8002dc0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002dc4:	d011      	beq.n	8002dea <UART_SetConfig+0x10a>
 8002dc6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002dca:	d811      	bhi.n	8002df0 <UART_SetConfig+0x110>
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d003      	beq.n	8002dd8 <UART_SetConfig+0xf8>
 8002dd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dd4:	d006      	beq.n	8002de4 <UART_SetConfig+0x104>
 8002dd6:	e00b      	b.n	8002df0 <UART_SetConfig+0x110>
 8002dd8:	2300      	movs	r3, #0
 8002dda:	77fb      	strb	r3, [r7, #31]
 8002ddc:	e08b      	b.n	8002ef6 <UART_SetConfig+0x216>
 8002dde:	2302      	movs	r3, #2
 8002de0:	77fb      	strb	r3, [r7, #31]
 8002de2:	e088      	b.n	8002ef6 <UART_SetConfig+0x216>
 8002de4:	2304      	movs	r3, #4
 8002de6:	77fb      	strb	r3, [r7, #31]
 8002de8:	e085      	b.n	8002ef6 <UART_SetConfig+0x216>
 8002dea:	2308      	movs	r3, #8
 8002dec:	77fb      	strb	r3, [r7, #31]
 8002dee:	e082      	b.n	8002ef6 <UART_SetConfig+0x216>
 8002df0:	2310      	movs	r3, #16
 8002df2:	77fb      	strb	r3, [r7, #31]
 8002df4:	e07f      	b.n	8002ef6 <UART_SetConfig+0x216>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a82      	ldr	r2, [pc, #520]	; (8003004 <UART_SetConfig+0x324>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d124      	bne.n	8002e4a <UART_SetConfig+0x16a>
 8002e00:	4b7e      	ldr	r3, [pc, #504]	; (8002ffc <UART_SetConfig+0x31c>)
 8002e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e04:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8002e08:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002e0c:	d011      	beq.n	8002e32 <UART_SetConfig+0x152>
 8002e0e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002e12:	d817      	bhi.n	8002e44 <UART_SetConfig+0x164>
 8002e14:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002e18:	d011      	beq.n	8002e3e <UART_SetConfig+0x15e>
 8002e1a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002e1e:	d811      	bhi.n	8002e44 <UART_SetConfig+0x164>
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d003      	beq.n	8002e2c <UART_SetConfig+0x14c>
 8002e24:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002e28:	d006      	beq.n	8002e38 <UART_SetConfig+0x158>
 8002e2a:	e00b      	b.n	8002e44 <UART_SetConfig+0x164>
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	77fb      	strb	r3, [r7, #31]
 8002e30:	e061      	b.n	8002ef6 <UART_SetConfig+0x216>
 8002e32:	2302      	movs	r3, #2
 8002e34:	77fb      	strb	r3, [r7, #31]
 8002e36:	e05e      	b.n	8002ef6 <UART_SetConfig+0x216>
 8002e38:	2304      	movs	r3, #4
 8002e3a:	77fb      	strb	r3, [r7, #31]
 8002e3c:	e05b      	b.n	8002ef6 <UART_SetConfig+0x216>
 8002e3e:	2308      	movs	r3, #8
 8002e40:	77fb      	strb	r3, [r7, #31]
 8002e42:	e058      	b.n	8002ef6 <UART_SetConfig+0x216>
 8002e44:	2310      	movs	r3, #16
 8002e46:	77fb      	strb	r3, [r7, #31]
 8002e48:	e055      	b.n	8002ef6 <UART_SetConfig+0x216>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a6e      	ldr	r2, [pc, #440]	; (8003008 <UART_SetConfig+0x328>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d124      	bne.n	8002e9e <UART_SetConfig+0x1be>
 8002e54:	4b69      	ldr	r3, [pc, #420]	; (8002ffc <UART_SetConfig+0x31c>)
 8002e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e58:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002e5c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002e60:	d011      	beq.n	8002e86 <UART_SetConfig+0x1a6>
 8002e62:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002e66:	d817      	bhi.n	8002e98 <UART_SetConfig+0x1b8>
 8002e68:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e6c:	d011      	beq.n	8002e92 <UART_SetConfig+0x1b2>
 8002e6e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e72:	d811      	bhi.n	8002e98 <UART_SetConfig+0x1b8>
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d003      	beq.n	8002e80 <UART_SetConfig+0x1a0>
 8002e78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e7c:	d006      	beq.n	8002e8c <UART_SetConfig+0x1ac>
 8002e7e:	e00b      	b.n	8002e98 <UART_SetConfig+0x1b8>
 8002e80:	2300      	movs	r3, #0
 8002e82:	77fb      	strb	r3, [r7, #31]
 8002e84:	e037      	b.n	8002ef6 <UART_SetConfig+0x216>
 8002e86:	2302      	movs	r3, #2
 8002e88:	77fb      	strb	r3, [r7, #31]
 8002e8a:	e034      	b.n	8002ef6 <UART_SetConfig+0x216>
 8002e8c:	2304      	movs	r3, #4
 8002e8e:	77fb      	strb	r3, [r7, #31]
 8002e90:	e031      	b.n	8002ef6 <UART_SetConfig+0x216>
 8002e92:	2308      	movs	r3, #8
 8002e94:	77fb      	strb	r3, [r7, #31]
 8002e96:	e02e      	b.n	8002ef6 <UART_SetConfig+0x216>
 8002e98:	2310      	movs	r3, #16
 8002e9a:	77fb      	strb	r3, [r7, #31]
 8002e9c:	e02b      	b.n	8002ef6 <UART_SetConfig+0x216>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a5a      	ldr	r2, [pc, #360]	; (800300c <UART_SetConfig+0x32c>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d124      	bne.n	8002ef2 <UART_SetConfig+0x212>
 8002ea8:	4b54      	ldr	r3, [pc, #336]	; (8002ffc <UART_SetConfig+0x31c>)
 8002eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eac:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8002eb0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002eb4:	d011      	beq.n	8002eda <UART_SetConfig+0x1fa>
 8002eb6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002eba:	d817      	bhi.n	8002eec <UART_SetConfig+0x20c>
 8002ebc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ec0:	d011      	beq.n	8002ee6 <UART_SetConfig+0x206>
 8002ec2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ec6:	d811      	bhi.n	8002eec <UART_SetConfig+0x20c>
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d003      	beq.n	8002ed4 <UART_SetConfig+0x1f4>
 8002ecc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ed0:	d006      	beq.n	8002ee0 <UART_SetConfig+0x200>
 8002ed2:	e00b      	b.n	8002eec <UART_SetConfig+0x20c>
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	77fb      	strb	r3, [r7, #31]
 8002ed8:	e00d      	b.n	8002ef6 <UART_SetConfig+0x216>
 8002eda:	2302      	movs	r3, #2
 8002edc:	77fb      	strb	r3, [r7, #31]
 8002ede:	e00a      	b.n	8002ef6 <UART_SetConfig+0x216>
 8002ee0:	2304      	movs	r3, #4
 8002ee2:	77fb      	strb	r3, [r7, #31]
 8002ee4:	e007      	b.n	8002ef6 <UART_SetConfig+0x216>
 8002ee6:	2308      	movs	r3, #8
 8002ee8:	77fb      	strb	r3, [r7, #31]
 8002eea:	e004      	b.n	8002ef6 <UART_SetConfig+0x216>
 8002eec:	2310      	movs	r3, #16
 8002eee:	77fb      	strb	r3, [r7, #31]
 8002ef0:	e001      	b.n	8002ef6 <UART_SetConfig+0x216>
 8002ef2:	2310      	movs	r3, #16
 8002ef4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	69db      	ldr	r3, [r3, #28]
 8002efa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002efe:	d15b      	bne.n	8002fb8 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8002f00:	7ffb      	ldrb	r3, [r7, #31]
 8002f02:	2b08      	cmp	r3, #8
 8002f04:	d827      	bhi.n	8002f56 <UART_SetConfig+0x276>
 8002f06:	a201      	add	r2, pc, #4	; (adr r2, 8002f0c <UART_SetConfig+0x22c>)
 8002f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f0c:	08002f31 	.word	0x08002f31
 8002f10:	08002f39 	.word	0x08002f39
 8002f14:	08002f41 	.word	0x08002f41
 8002f18:	08002f57 	.word	0x08002f57
 8002f1c:	08002f47 	.word	0x08002f47
 8002f20:	08002f57 	.word	0x08002f57
 8002f24:	08002f57 	.word	0x08002f57
 8002f28:	08002f57 	.word	0x08002f57
 8002f2c:	08002f4f 	.word	0x08002f4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f30:	f7ff f916 	bl	8002160 <HAL_RCC_GetPCLK1Freq>
 8002f34:	61b8      	str	r0, [r7, #24]
        break;
 8002f36:	e013      	b.n	8002f60 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f38:	f7ff f934 	bl	80021a4 <HAL_RCC_GetPCLK2Freq>
 8002f3c:	61b8      	str	r0, [r7, #24]
        break;
 8002f3e:	e00f      	b.n	8002f60 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f40:	4b33      	ldr	r3, [pc, #204]	; (8003010 <UART_SetConfig+0x330>)
 8002f42:	61bb      	str	r3, [r7, #24]
        break;
 8002f44:	e00c      	b.n	8002f60 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f46:	f7ff f895 	bl	8002074 <HAL_RCC_GetSysClockFreq>
 8002f4a:	61b8      	str	r0, [r7, #24]
        break;
 8002f4c:	e008      	b.n	8002f60 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f52:	61bb      	str	r3, [r7, #24]
        break;
 8002f54:	e004      	b.n	8002f60 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8002f56:	2300      	movs	r3, #0
 8002f58:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	77bb      	strb	r3, [r7, #30]
        break;
 8002f5e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002f60:	69bb      	ldr	r3, [r7, #24]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	f000 8082 	beq.w	800306c <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	005a      	lsls	r2, r3, #1
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	085b      	lsrs	r3, r3, #1
 8002f72:	441a      	add	r2, r3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f7c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	2b0f      	cmp	r3, #15
 8002f82:	d916      	bls.n	8002fb2 <UART_SetConfig+0x2d2>
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f8a:	d212      	bcs.n	8002fb2 <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	f023 030f 	bic.w	r3, r3, #15
 8002f94:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	085b      	lsrs	r3, r3, #1
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	f003 0307 	and.w	r3, r3, #7
 8002fa0:	b29a      	uxth	r2, r3
 8002fa2:	89fb      	ldrh	r3, [r7, #14]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	89fa      	ldrh	r2, [r7, #14]
 8002fae:	60da      	str	r2, [r3, #12]
 8002fb0:	e05c      	b.n	800306c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	77bb      	strb	r3, [r7, #30]
 8002fb6:	e059      	b.n	800306c <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002fb8:	7ffb      	ldrb	r3, [r7, #31]
 8002fba:	2b08      	cmp	r3, #8
 8002fbc:	d835      	bhi.n	800302a <UART_SetConfig+0x34a>
 8002fbe:	a201      	add	r2, pc, #4	; (adr r2, 8002fc4 <UART_SetConfig+0x2e4>)
 8002fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fc4:	08002fe9 	.word	0x08002fe9
 8002fc8:	08002ff1 	.word	0x08002ff1
 8002fcc:	08003015 	.word	0x08003015
 8002fd0:	0800302b 	.word	0x0800302b
 8002fd4:	0800301b 	.word	0x0800301b
 8002fd8:	0800302b 	.word	0x0800302b
 8002fdc:	0800302b 	.word	0x0800302b
 8002fe0:	0800302b 	.word	0x0800302b
 8002fe4:	08003023 	.word	0x08003023
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fe8:	f7ff f8ba 	bl	8002160 <HAL_RCC_GetPCLK1Freq>
 8002fec:	61b8      	str	r0, [r7, #24]
        break;
 8002fee:	e021      	b.n	8003034 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ff0:	f7ff f8d8 	bl	80021a4 <HAL_RCC_GetPCLK2Freq>
 8002ff4:	61b8      	str	r0, [r7, #24]
        break;
 8002ff6:	e01d      	b.n	8003034 <UART_SetConfig+0x354>
 8002ff8:	40013800 	.word	0x40013800
 8002ffc:	40021000 	.word	0x40021000
 8003000:	40004400 	.word	0x40004400
 8003004:	40004800 	.word	0x40004800
 8003008:	40004c00 	.word	0x40004c00
 800300c:	40005000 	.word	0x40005000
 8003010:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003014:	4b1b      	ldr	r3, [pc, #108]	; (8003084 <UART_SetConfig+0x3a4>)
 8003016:	61bb      	str	r3, [r7, #24]
        break;
 8003018:	e00c      	b.n	8003034 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800301a:	f7ff f82b 	bl	8002074 <HAL_RCC_GetSysClockFreq>
 800301e:	61b8      	str	r0, [r7, #24]
        break;
 8003020:	e008      	b.n	8003034 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003022:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003026:	61bb      	str	r3, [r7, #24]
        break;
 8003028:	e004      	b.n	8003034 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800302a:	2300      	movs	r3, #0
 800302c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	77bb      	strb	r3, [r7, #30]
        break;
 8003032:	bf00      	nop
    }

    if (pclk != 0U)
 8003034:	69bb      	ldr	r3, [r7, #24]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d018      	beq.n	800306c <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	085a      	lsrs	r2, r3, #1
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	441a      	add	r2, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	fbb2 f3f3 	udiv	r3, r2, r3
 800304c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	2b0f      	cmp	r3, #15
 8003052:	d909      	bls.n	8003068 <UART_SetConfig+0x388>
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800305a:	d205      	bcs.n	8003068 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	b29a      	uxth	r2, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	60da      	str	r2, [r3, #12]
 8003066:	e001      	b.n	800306c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003078:	7fbb      	ldrb	r3, [r7, #30]
}
 800307a:	4618      	mov	r0, r3
 800307c:	3720      	adds	r7, #32
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	007a1200 	.word	0x007a1200

08003088 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003094:	f003 0301 	and.w	r3, r3, #1
 8003098:	2b00      	cmp	r3, #0
 800309a:	d00a      	beq.n	80030b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	430a      	orrs	r2, r1
 80030b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b6:	f003 0302 	and.w	r3, r3, #2
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d00a      	beq.n	80030d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	430a      	orrs	r2, r1
 80030d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d8:	f003 0304 	and.w	r3, r3, #4
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d00a      	beq.n	80030f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	430a      	orrs	r2, r1
 80030f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fa:	f003 0308 	and.w	r3, r3, #8
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d00a      	beq.n	8003118 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	430a      	orrs	r2, r1
 8003116:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311c:	f003 0310 	and.w	r3, r3, #16
 8003120:	2b00      	cmp	r3, #0
 8003122:	d00a      	beq.n	800313a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	430a      	orrs	r2, r1
 8003138:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313e:	f003 0320 	and.w	r3, r3, #32
 8003142:	2b00      	cmp	r3, #0
 8003144:	d00a      	beq.n	800315c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	430a      	orrs	r2, r1
 800315a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003160:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003164:	2b00      	cmp	r3, #0
 8003166:	d01a      	beq.n	800319e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	430a      	orrs	r2, r1
 800317c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003182:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003186:	d10a      	bne.n	800319e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	430a      	orrs	r2, r1
 800319c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d00a      	beq.n	80031c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	430a      	orrs	r2, r1
 80031be:	605a      	str	r2, [r3, #4]
  }
}
 80031c0:	bf00      	nop
 80031c2:	370c      	adds	r7, #12
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr

080031cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b098      	sub	sp, #96	; 0x60
 80031d0:	af02      	add	r7, sp, #8
 80031d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2200      	movs	r2, #0
 80031d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80031dc:	f7fd fb10 	bl	8000800 <HAL_GetTick>
 80031e0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0308 	and.w	r3, r3, #8
 80031ec:	2b08      	cmp	r3, #8
 80031ee:	d12e      	bne.n	800324e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80031f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80031f4:	9300      	str	r3, [sp, #0]
 80031f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031f8:	2200      	movs	r2, #0
 80031fa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f000 f88c 	bl	800331c <UART_WaitOnFlagUntilTimeout>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d021      	beq.n	800324e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003212:	e853 3f00 	ldrex	r3, [r3]
 8003216:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800321a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800321e:	653b      	str	r3, [r7, #80]	; 0x50
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	461a      	mov	r2, r3
 8003226:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003228:	647b      	str	r3, [r7, #68]	; 0x44
 800322a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800322c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800322e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003230:	e841 2300 	strex	r3, r2, [r1]
 8003234:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003236:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003238:	2b00      	cmp	r3, #0
 800323a:	d1e6      	bne.n	800320a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2220      	movs	r2, #32
 8003240:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e062      	b.n	8003314 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 0304 	and.w	r3, r3, #4
 8003258:	2b04      	cmp	r3, #4
 800325a:	d149      	bne.n	80032f0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800325c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003260:	9300      	str	r3, [sp, #0]
 8003262:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003264:	2200      	movs	r2, #0
 8003266:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f000 f856 	bl	800331c <UART_WaitOnFlagUntilTimeout>
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d03c      	beq.n	80032f0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800327c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327e:	e853 3f00 	ldrex	r3, [r3]
 8003282:	623b      	str	r3, [r7, #32]
   return(result);
 8003284:	6a3b      	ldr	r3, [r7, #32]
 8003286:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800328a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	461a      	mov	r2, r3
 8003292:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003294:	633b      	str	r3, [r7, #48]	; 0x30
 8003296:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003298:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800329a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800329c:	e841 2300 	strex	r3, r2, [r1]
 80032a0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80032a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d1e6      	bne.n	8003276 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	3308      	adds	r3, #8
 80032ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	e853 3f00 	ldrex	r3, [r3]
 80032b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f023 0301 	bic.w	r3, r3, #1
 80032be:	64bb      	str	r3, [r7, #72]	; 0x48
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	3308      	adds	r3, #8
 80032c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80032c8:	61fa      	str	r2, [r7, #28]
 80032ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032cc:	69b9      	ldr	r1, [r7, #24]
 80032ce:	69fa      	ldr	r2, [r7, #28]
 80032d0:	e841 2300 	strex	r3, r2, [r1]
 80032d4:	617b      	str	r3, [r7, #20]
   return(result);
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d1e5      	bne.n	80032a8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2220      	movs	r2, #32
 80032e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2200      	movs	r2, #0
 80032e8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80032ec:	2303      	movs	r3, #3
 80032ee:	e011      	b.n	8003314 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2220      	movs	r2, #32
 80032f4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2220      	movs	r2, #32
 80032fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003312:	2300      	movs	r3, #0
}
 8003314:	4618      	mov	r0, r3
 8003316:	3758      	adds	r7, #88	; 0x58
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}

0800331c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	60b9      	str	r1, [r7, #8]
 8003326:	603b      	str	r3, [r7, #0]
 8003328:	4613      	mov	r3, r2
 800332a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800332c:	e049      	b.n	80033c2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800332e:	69bb      	ldr	r3, [r7, #24]
 8003330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003334:	d045      	beq.n	80033c2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003336:	f7fd fa63 	bl	8000800 <HAL_GetTick>
 800333a:	4602      	mov	r2, r0
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	69ba      	ldr	r2, [r7, #24]
 8003342:	429a      	cmp	r2, r3
 8003344:	d302      	bcc.n	800334c <UART_WaitOnFlagUntilTimeout+0x30>
 8003346:	69bb      	ldr	r3, [r7, #24]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d101      	bne.n	8003350 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	e048      	b.n	80033e2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0304 	and.w	r3, r3, #4
 800335a:	2b00      	cmp	r3, #0
 800335c:	d031      	beq.n	80033c2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	69db      	ldr	r3, [r3, #28]
 8003364:	f003 0308 	and.w	r3, r3, #8
 8003368:	2b08      	cmp	r3, #8
 800336a:	d110      	bne.n	800338e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2208      	movs	r2, #8
 8003372:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003374:	68f8      	ldr	r0, [r7, #12]
 8003376:	f000 f838 	bl	80033ea <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2208      	movs	r2, #8
 800337e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2200      	movs	r2, #0
 8003386:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e029      	b.n	80033e2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	69db      	ldr	r3, [r3, #28]
 8003394:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003398:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800339c:	d111      	bne.n	80033c2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80033a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80033a8:	68f8      	ldr	r0, [r7, #12]
 80033aa:	f000 f81e 	bl	80033ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2220      	movs	r2, #32
 80033b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2200      	movs	r2, #0
 80033ba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80033be:	2303      	movs	r3, #3
 80033c0:	e00f      	b.n	80033e2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	69da      	ldr	r2, [r3, #28]
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	4013      	ands	r3, r2
 80033cc:	68ba      	ldr	r2, [r7, #8]
 80033ce:	429a      	cmp	r2, r3
 80033d0:	bf0c      	ite	eq
 80033d2:	2301      	moveq	r3, #1
 80033d4:	2300      	movne	r3, #0
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	461a      	mov	r2, r3
 80033da:	79fb      	ldrb	r3, [r7, #7]
 80033dc:	429a      	cmp	r2, r3
 80033de:	d0a6      	beq.n	800332e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033e0:	2300      	movs	r3, #0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3710      	adds	r7, #16
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}

080033ea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80033ea:	b480      	push	{r7}
 80033ec:	b095      	sub	sp, #84	; 0x54
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033fa:	e853 3f00 	ldrex	r3, [r3]
 80033fe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003402:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003406:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	461a      	mov	r2, r3
 800340e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003410:	643b      	str	r3, [r7, #64]	; 0x40
 8003412:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003414:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003416:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003418:	e841 2300 	strex	r3, r2, [r1]
 800341c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800341e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003420:	2b00      	cmp	r3, #0
 8003422:	d1e6      	bne.n	80033f2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	3308      	adds	r3, #8
 800342a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800342c:	6a3b      	ldr	r3, [r7, #32]
 800342e:	e853 3f00 	ldrex	r3, [r3]
 8003432:	61fb      	str	r3, [r7, #28]
   return(result);
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	f023 0301 	bic.w	r3, r3, #1
 800343a:	64bb      	str	r3, [r7, #72]	; 0x48
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	3308      	adds	r3, #8
 8003442:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003444:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003446:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003448:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800344a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800344c:	e841 2300 	strex	r3, r2, [r1]
 8003450:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003454:	2b00      	cmp	r3, #0
 8003456:	d1e5      	bne.n	8003424 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800345c:	2b01      	cmp	r3, #1
 800345e:	d118      	bne.n	8003492 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	e853 3f00 	ldrex	r3, [r3]
 800346c:	60bb      	str	r3, [r7, #8]
   return(result);
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	f023 0310 	bic.w	r3, r3, #16
 8003474:	647b      	str	r3, [r7, #68]	; 0x44
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	461a      	mov	r2, r3
 800347c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800347e:	61bb      	str	r3, [r7, #24]
 8003480:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003482:	6979      	ldr	r1, [r7, #20]
 8003484:	69ba      	ldr	r2, [r7, #24]
 8003486:	e841 2300 	strex	r3, r2, [r1]
 800348a:	613b      	str	r3, [r7, #16]
   return(result);
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d1e6      	bne.n	8003460 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2220      	movs	r2, #32
 8003496:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	669a      	str	r2, [r3, #104]	; 0x68
}
 80034a6:	bf00      	nop
 80034a8:	3754      	adds	r7, #84	; 0x54
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr
	...

080034b4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80034b4:	b480      	push	{r7}
 80034b6:	b085      	sub	sp, #20
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	60f8      	str	r0, [r7, #12]
 80034bc:	60b9      	str	r1, [r7, #8]
 80034be:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	4a07      	ldr	r2, [pc, #28]	; (80034e0 <vApplicationGetIdleTaskMemory+0x2c>)
 80034c4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	4a06      	ldr	r2, [pc, #24]	; (80034e4 <vApplicationGetIdleTaskMemory+0x30>)
 80034ca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2280      	movs	r2, #128	; 0x80
 80034d0:	601a      	str	r2, [r3, #0]
}
 80034d2:	bf00      	nop
 80034d4:	3714      	adds	r7, #20
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr
 80034de:	bf00      	nop
 80034e0:	2000016c 	.word	0x2000016c
 80034e4:	20000228 	.word	0x20000228

080034e8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80034e8:	b480      	push	{r7}
 80034ea:	b085      	sub	sp, #20
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	60f8      	str	r0, [r7, #12]
 80034f0:	60b9      	str	r1, [r7, #8]
 80034f2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	4a07      	ldr	r2, [pc, #28]	; (8003514 <vApplicationGetTimerTaskMemory+0x2c>)
 80034f8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	4a06      	ldr	r2, [pc, #24]	; (8003518 <vApplicationGetTimerTaskMemory+0x30>)
 80034fe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003506:	601a      	str	r2, [r3, #0]
}
 8003508:	bf00      	nop
 800350a:	3714      	adds	r7, #20
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr
 8003514:	20000428 	.word	0x20000428
 8003518:	200004e4 	.word	0x200004e4

0800351c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f103 0208 	add.w	r2, r3, #8
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f04f 32ff 	mov.w	r2, #4294967295
 8003534:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f103 0208 	add.w	r2, r3, #8
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f103 0208 	add.w	r2, r3, #8
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003550:	bf00      	nop
 8003552:	370c      	adds	r7, #12
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr

0800355c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800356a:	bf00      	nop
 800356c:	370c      	adds	r7, #12
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr

08003576 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003576:	b480      	push	{r7}
 8003578:	b085      	sub	sp, #20
 800357a:	af00      	add	r7, sp, #0
 800357c:	6078      	str	r0, [r7, #4]
 800357e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	68fa      	ldr	r2, [r7, #12]
 800358a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	689a      	ldr	r2, [r3, #8]
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	683a      	ldr	r2, [r7, #0]
 800359a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	683a      	ldr	r2, [r7, #0]
 80035a0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	1c5a      	adds	r2, r3, #1
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	601a      	str	r2, [r3, #0]
}
 80035b2:	bf00      	nop
 80035b4:	3714      	adds	r7, #20
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr

080035be <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80035be:	b480      	push	{r7}
 80035c0:	b085      	sub	sp, #20
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	6078      	str	r0, [r7, #4]
 80035c6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035d4:	d103      	bne.n	80035de <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	691b      	ldr	r3, [r3, #16]
 80035da:	60fb      	str	r3, [r7, #12]
 80035dc:	e00c      	b.n	80035f8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	3308      	adds	r3, #8
 80035e2:	60fb      	str	r3, [r7, #12]
 80035e4:	e002      	b.n	80035ec <vListInsert+0x2e>
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	60fb      	str	r3, [r7, #12]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	68ba      	ldr	r2, [r7, #8]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d2f6      	bcs.n	80035e6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	685a      	ldr	r2, [r3, #4]
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	683a      	ldr	r2, [r7, #0]
 8003606:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	68fa      	ldr	r2, [r7, #12]
 800360c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	683a      	ldr	r2, [r7, #0]
 8003612:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	1c5a      	adds	r2, r3, #1
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	601a      	str	r2, [r3, #0]
}
 8003624:	bf00      	nop
 8003626:	3714      	adds	r7, #20
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr

08003630 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003630:	b480      	push	{r7}
 8003632:	b085      	sub	sp, #20
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	691b      	ldr	r3, [r3, #16]
 800363c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	6892      	ldr	r2, [r2, #8]
 8003646:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	6852      	ldr	r2, [r2, #4]
 8003650:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	429a      	cmp	r2, r3
 800365a:	d103      	bne.n	8003664 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	689a      	ldr	r2, [r3, #8]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2200      	movs	r2, #0
 8003668:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	1e5a      	subs	r2, r3, #1
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
}
 8003678:	4618      	mov	r0, r3
 800367a:	3714      	adds	r7, #20
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr

08003684 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b084      	sub	sp, #16
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d10a      	bne.n	80036ae <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800369c:	f383 8811 	msr	BASEPRI, r3
 80036a0:	f3bf 8f6f 	isb	sy
 80036a4:	f3bf 8f4f 	dsb	sy
 80036a8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80036aa:	bf00      	nop
 80036ac:	e7fe      	b.n	80036ac <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80036ae:	f002 f941 	bl	8005934 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ba:	68f9      	ldr	r1, [r7, #12]
 80036bc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80036be:	fb01 f303 	mul.w	r3, r1, r3
 80036c2:	441a      	add	r2, r3
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2200      	movs	r2, #0
 80036cc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036de:	3b01      	subs	r3, #1
 80036e0:	68f9      	ldr	r1, [r7, #12]
 80036e2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80036e4:	fb01 f303 	mul.w	r3, r1, r3
 80036e8:	441a      	add	r2, r3
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	22ff      	movs	r2, #255	; 0xff
 80036f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	22ff      	movs	r2, #255	; 0xff
 80036fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d114      	bne.n	800372e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	691b      	ldr	r3, [r3, #16]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d01a      	beq.n	8003742 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	3310      	adds	r3, #16
 8003710:	4618      	mov	r0, r3
 8003712:	f001 f9e5 	bl	8004ae0 <xTaskRemoveFromEventList>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d012      	beq.n	8003742 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800371c:	4b0c      	ldr	r3, [pc, #48]	; (8003750 <xQueueGenericReset+0xcc>)
 800371e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003722:	601a      	str	r2, [r3, #0]
 8003724:	f3bf 8f4f 	dsb	sy
 8003728:	f3bf 8f6f 	isb	sy
 800372c:	e009      	b.n	8003742 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	3310      	adds	r3, #16
 8003732:	4618      	mov	r0, r3
 8003734:	f7ff fef2 	bl	800351c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	3324      	adds	r3, #36	; 0x24
 800373c:	4618      	mov	r0, r3
 800373e:	f7ff feed 	bl	800351c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003742:	f002 f927 	bl	8005994 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003746:	2301      	movs	r3, #1
}
 8003748:	4618      	mov	r0, r3
 800374a:	3710      	adds	r7, #16
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}
 8003750:	e000ed04 	.word	0xe000ed04

08003754 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003754:	b580      	push	{r7, lr}
 8003756:	b08e      	sub	sp, #56	; 0x38
 8003758:	af02      	add	r7, sp, #8
 800375a:	60f8      	str	r0, [r7, #12]
 800375c:	60b9      	str	r1, [r7, #8]
 800375e:	607a      	str	r2, [r7, #4]
 8003760:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d10a      	bne.n	800377e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800376c:	f383 8811 	msr	BASEPRI, r3
 8003770:	f3bf 8f6f 	isb	sy
 8003774:	f3bf 8f4f 	dsb	sy
 8003778:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800377a:	bf00      	nop
 800377c:	e7fe      	b.n	800377c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d10a      	bne.n	800379a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003788:	f383 8811 	msr	BASEPRI, r3
 800378c:	f3bf 8f6f 	isb	sy
 8003790:	f3bf 8f4f 	dsb	sy
 8003794:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003796:	bf00      	nop
 8003798:	e7fe      	b.n	8003798 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d002      	beq.n	80037a6 <xQueueGenericCreateStatic+0x52>
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d001      	beq.n	80037aa <xQueueGenericCreateStatic+0x56>
 80037a6:	2301      	movs	r3, #1
 80037a8:	e000      	b.n	80037ac <xQueueGenericCreateStatic+0x58>
 80037aa:	2300      	movs	r3, #0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d10a      	bne.n	80037c6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80037b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037b4:	f383 8811 	msr	BASEPRI, r3
 80037b8:	f3bf 8f6f 	isb	sy
 80037bc:	f3bf 8f4f 	dsb	sy
 80037c0:	623b      	str	r3, [r7, #32]
}
 80037c2:	bf00      	nop
 80037c4:	e7fe      	b.n	80037c4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d102      	bne.n	80037d2 <xQueueGenericCreateStatic+0x7e>
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d101      	bne.n	80037d6 <xQueueGenericCreateStatic+0x82>
 80037d2:	2301      	movs	r3, #1
 80037d4:	e000      	b.n	80037d8 <xQueueGenericCreateStatic+0x84>
 80037d6:	2300      	movs	r3, #0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d10a      	bne.n	80037f2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80037dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037e0:	f383 8811 	msr	BASEPRI, r3
 80037e4:	f3bf 8f6f 	isb	sy
 80037e8:	f3bf 8f4f 	dsb	sy
 80037ec:	61fb      	str	r3, [r7, #28]
}
 80037ee:	bf00      	nop
 80037f0:	e7fe      	b.n	80037f0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80037f2:	2350      	movs	r3, #80	; 0x50
 80037f4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	2b50      	cmp	r3, #80	; 0x50
 80037fa:	d00a      	beq.n	8003812 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80037fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003800:	f383 8811 	msr	BASEPRI, r3
 8003804:	f3bf 8f6f 	isb	sy
 8003808:	f3bf 8f4f 	dsb	sy
 800380c:	61bb      	str	r3, [r7, #24]
}
 800380e:	bf00      	nop
 8003810:	e7fe      	b.n	8003810 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003818:	2b00      	cmp	r3, #0
 800381a:	d00d      	beq.n	8003838 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800381c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800381e:	2201      	movs	r2, #1
 8003820:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003824:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800382a:	9300      	str	r3, [sp, #0]
 800382c:	4613      	mov	r3, r2
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	68b9      	ldr	r1, [r7, #8]
 8003832:	68f8      	ldr	r0, [r7, #12]
 8003834:	f000 f805 	bl	8003842 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800383a:	4618      	mov	r0, r3
 800383c:	3730      	adds	r7, #48	; 0x30
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}

08003842 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003842:	b580      	push	{r7, lr}
 8003844:	b084      	sub	sp, #16
 8003846:	af00      	add	r7, sp, #0
 8003848:	60f8      	str	r0, [r7, #12]
 800384a:	60b9      	str	r1, [r7, #8]
 800384c:	607a      	str	r2, [r7, #4]
 800384e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d103      	bne.n	800385e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	69ba      	ldr	r2, [r7, #24]
 800385a:	601a      	str	r2, [r3, #0]
 800385c:	e002      	b.n	8003864 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800385e:	69bb      	ldr	r3, [r7, #24]
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003864:	69bb      	ldr	r3, [r7, #24]
 8003866:	68fa      	ldr	r2, [r7, #12]
 8003868:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800386a:	69bb      	ldr	r3, [r7, #24]
 800386c:	68ba      	ldr	r2, [r7, #8]
 800386e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003870:	2101      	movs	r1, #1
 8003872:	69b8      	ldr	r0, [r7, #24]
 8003874:	f7ff ff06 	bl	8003684 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003878:	69bb      	ldr	r3, [r7, #24]
 800387a:	78fa      	ldrb	r2, [r7, #3]
 800387c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 8003880:	78fb      	ldrb	r3, [r7, #3]
 8003882:	68ba      	ldr	r2, [r7, #8]
 8003884:	68f9      	ldr	r1, [r7, #12]
 8003886:	2073      	movs	r0, #115	; 0x73
 8003888:	f003 f9e4 	bl	8006c54 <SEGGER_SYSVIEW_RecordU32x3>
}
 800388c:	bf00      	nop
 800388e:	3710      	adds	r7, #16
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}

08003894 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b090      	sub	sp, #64	; 0x40
 8003898:	af02      	add	r7, sp, #8
 800389a:	60f8      	str	r0, [r7, #12]
 800389c:	60b9      	str	r1, [r7, #8]
 800389e:	607a      	str	r2, [r7, #4]
 80038a0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80038a2:	2300      	movs	r3, #0
 80038a4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80038aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d10a      	bne.n	80038c6 <xQueueGenericSend+0x32>
	__asm volatile
 80038b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038b4:	f383 8811 	msr	BASEPRI, r3
 80038b8:	f3bf 8f6f 	isb	sy
 80038bc:	f3bf 8f4f 	dsb	sy
 80038c0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80038c2:	bf00      	nop
 80038c4:	e7fe      	b.n	80038c4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d103      	bne.n	80038d4 <xQueueGenericSend+0x40>
 80038cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d101      	bne.n	80038d8 <xQueueGenericSend+0x44>
 80038d4:	2301      	movs	r3, #1
 80038d6:	e000      	b.n	80038da <xQueueGenericSend+0x46>
 80038d8:	2300      	movs	r3, #0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d10a      	bne.n	80038f4 <xQueueGenericSend+0x60>
	__asm volatile
 80038de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038e2:	f383 8811 	msr	BASEPRI, r3
 80038e6:	f3bf 8f6f 	isb	sy
 80038ea:	f3bf 8f4f 	dsb	sy
 80038ee:	627b      	str	r3, [r7, #36]	; 0x24
}
 80038f0:	bf00      	nop
 80038f2:	e7fe      	b.n	80038f2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d103      	bne.n	8003902 <xQueueGenericSend+0x6e>
 80038fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d101      	bne.n	8003906 <xQueueGenericSend+0x72>
 8003902:	2301      	movs	r3, #1
 8003904:	e000      	b.n	8003908 <xQueueGenericSend+0x74>
 8003906:	2300      	movs	r3, #0
 8003908:	2b00      	cmp	r3, #0
 800390a:	d10a      	bne.n	8003922 <xQueueGenericSend+0x8e>
	__asm volatile
 800390c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003910:	f383 8811 	msr	BASEPRI, r3
 8003914:	f3bf 8f6f 	isb	sy
 8003918:	f3bf 8f4f 	dsb	sy
 800391c:	623b      	str	r3, [r7, #32]
}
 800391e:	bf00      	nop
 8003920:	e7fe      	b.n	8003920 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003922:	f001 fae3 	bl	8004eec <xTaskGetSchedulerState>
 8003926:	4603      	mov	r3, r0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d102      	bne.n	8003932 <xQueueGenericSend+0x9e>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d101      	bne.n	8003936 <xQueueGenericSend+0xa2>
 8003932:	2301      	movs	r3, #1
 8003934:	e000      	b.n	8003938 <xQueueGenericSend+0xa4>
 8003936:	2300      	movs	r3, #0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d10a      	bne.n	8003952 <xQueueGenericSend+0xbe>
	__asm volatile
 800393c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003940:	f383 8811 	msr	BASEPRI, r3
 8003944:	f3bf 8f6f 	isb	sy
 8003948:	f3bf 8f4f 	dsb	sy
 800394c:	61fb      	str	r3, [r7, #28]
}
 800394e:	bf00      	nop
 8003950:	e7fe      	b.n	8003950 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003952:	f001 ffef 	bl	8005934 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003958:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800395a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800395c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800395e:	429a      	cmp	r2, r3
 8003960:	d302      	bcc.n	8003968 <xQueueGenericSend+0xd4>
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	2b02      	cmp	r3, #2
 8003966:	d136      	bne.n	80039d6 <xQueueGenericSend+0x142>
			{
				traceQUEUE_SEND( pxQueue );
 8003968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800396a:	4618      	mov	r0, r3
 800396c:	f003 fe24 	bl	80075b8 <SEGGER_SYSVIEW_ShrinkId>
 8003970:	68ba      	ldr	r2, [r7, #8]
 8003972:	6879      	ldr	r1, [r7, #4]
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	9300      	str	r3, [sp, #0]
 8003978:	460b      	mov	r3, r1
 800397a:	4601      	mov	r1, r0
 800397c:	205a      	movs	r0, #90	; 0x5a
 800397e:	f003 f9df 	bl	8006d40 <SEGGER_SYSVIEW_RecordU32x4>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003982:	683a      	ldr	r2, [r7, #0]
 8003984:	68b9      	ldr	r1, [r7, #8]
 8003986:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003988:	f000 fa66 	bl	8003e58 <prvCopyDataToQueue>
 800398c:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800398e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003992:	2b00      	cmp	r3, #0
 8003994:	d010      	beq.n	80039b8 <xQueueGenericSend+0x124>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003998:	3324      	adds	r3, #36	; 0x24
 800399a:	4618      	mov	r0, r3
 800399c:	f001 f8a0 	bl	8004ae0 <xTaskRemoveFromEventList>
 80039a0:	4603      	mov	r3, r0
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d013      	beq.n	80039ce <xQueueGenericSend+0x13a>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80039a6:	4b4d      	ldr	r3, [pc, #308]	; (8003adc <xQueueGenericSend+0x248>)
 80039a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039ac:	601a      	str	r2, [r3, #0]
 80039ae:	f3bf 8f4f 	dsb	sy
 80039b2:	f3bf 8f6f 	isb	sy
 80039b6:	e00a      	b.n	80039ce <xQueueGenericSend+0x13a>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80039b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d007      	beq.n	80039ce <xQueueGenericSend+0x13a>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80039be:	4b47      	ldr	r3, [pc, #284]	; (8003adc <xQueueGenericSend+0x248>)
 80039c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039c4:	601a      	str	r2, [r3, #0]
 80039c6:	f3bf 8f4f 	dsb	sy
 80039ca:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80039ce:	f001 ffe1 	bl	8005994 <vPortExitCritical>
				return pdPASS;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e07d      	b.n	8003ad2 <xQueueGenericSend+0x23e>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d110      	bne.n	80039fe <xQueueGenericSend+0x16a>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80039dc:	f001 ffda 	bl	8005994 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 80039e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039e2:	4618      	mov	r0, r3
 80039e4:	f003 fde8 	bl	80075b8 <SEGGER_SYSVIEW_ShrinkId>
 80039e8:	68ba      	ldr	r2, [r7, #8]
 80039ea:	6879      	ldr	r1, [r7, #4]
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	9300      	str	r3, [sp, #0]
 80039f0:	460b      	mov	r3, r1
 80039f2:	4601      	mov	r1, r0
 80039f4:	205a      	movs	r0, #90	; 0x5a
 80039f6:	f003 f9a3 	bl	8006d40 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_FULL;
 80039fa:	2300      	movs	r3, #0
 80039fc:	e069      	b.n	8003ad2 <xQueueGenericSend+0x23e>
				}
				else if( xEntryTimeSet == pdFALSE )
 80039fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d106      	bne.n	8003a12 <xQueueGenericSend+0x17e>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003a04:	f107 0314 	add.w	r3, r7, #20
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f001 f8d1 	bl	8004bb0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003a12:	f001 ffbf 	bl	8005994 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003a16:	f000 fe0b 	bl	8004630 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003a1a:	f001 ff8b 	bl	8005934 <vPortEnterCritical>
 8003a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a24:	b25b      	sxtb	r3, r3
 8003a26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a2a:	d103      	bne.n	8003a34 <xQueueGenericSend+0x1a0>
 8003a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a3a:	b25b      	sxtb	r3, r3
 8003a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a40:	d103      	bne.n	8003a4a <xQueueGenericSend+0x1b6>
 8003a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a44:	2200      	movs	r2, #0
 8003a46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a4a:	f001 ffa3 	bl	8005994 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003a4e:	1d3a      	adds	r2, r7, #4
 8003a50:	f107 0314 	add.w	r3, r7, #20
 8003a54:	4611      	mov	r1, r2
 8003a56:	4618      	mov	r0, r3
 8003a58:	f001 f8c0 	bl	8004bdc <xTaskCheckForTimeOut>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d124      	bne.n	8003aac <xQueueGenericSend+0x218>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003a62:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a64:	f000 faf0 	bl	8004048 <prvIsQueueFull>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d018      	beq.n	8003aa0 <xQueueGenericSend+0x20c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a70:	3310      	adds	r3, #16
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	4611      	mov	r1, r2
 8003a76:	4618      	mov	r0, r3
 8003a78:	f000 ffe0 	bl	8004a3c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003a7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a7e:	f000 fa7b 	bl	8003f78 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003a82:	f000 fde3 	bl	800464c <xTaskResumeAll>
 8003a86:	4603      	mov	r3, r0
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	f47f af62 	bne.w	8003952 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003a8e:	4b13      	ldr	r3, [pc, #76]	; (8003adc <xQueueGenericSend+0x248>)
 8003a90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a94:	601a      	str	r2, [r3, #0]
 8003a96:	f3bf 8f4f 	dsb	sy
 8003a9a:	f3bf 8f6f 	isb	sy
 8003a9e:	e758      	b.n	8003952 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003aa0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003aa2:	f000 fa69 	bl	8003f78 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003aa6:	f000 fdd1 	bl	800464c <xTaskResumeAll>
 8003aaa:	e752      	b.n	8003952 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003aac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003aae:	f000 fa63 	bl	8003f78 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003ab2:	f000 fdcb 	bl	800464c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 8003ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f003 fd7d 	bl	80075b8 <SEGGER_SYSVIEW_ShrinkId>
 8003abe:	68ba      	ldr	r2, [r7, #8]
 8003ac0:	6879      	ldr	r1, [r7, #4]
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	9300      	str	r3, [sp, #0]
 8003ac6:	460b      	mov	r3, r1
 8003ac8:	4601      	mov	r1, r0
 8003aca:	205a      	movs	r0, #90	; 0x5a
 8003acc:	f003 f938 	bl	8006d40 <SEGGER_SYSVIEW_RecordU32x4>
			return errQUEUE_FULL;
 8003ad0:	2300      	movs	r3, #0
		}
	}
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3738      	adds	r7, #56	; 0x38
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	e000ed04 	.word	0xe000ed04

08003ae0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b08e      	sub	sp, #56	; 0x38
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	60b9      	str	r1, [r7, #8]
 8003aea:	607a      	str	r2, [r7, #4]
 8003aec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d10a      	bne.n	8003b0e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003afc:	f383 8811 	msr	BASEPRI, r3
 8003b00:	f3bf 8f6f 	isb	sy
 8003b04:	f3bf 8f4f 	dsb	sy
 8003b08:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003b0a:	bf00      	nop
 8003b0c:	e7fe      	b.n	8003b0c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d103      	bne.n	8003b1c <xQueueGenericSendFromISR+0x3c>
 8003b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d101      	bne.n	8003b20 <xQueueGenericSendFromISR+0x40>
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e000      	b.n	8003b22 <xQueueGenericSendFromISR+0x42>
 8003b20:	2300      	movs	r3, #0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d10a      	bne.n	8003b3c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b2a:	f383 8811 	msr	BASEPRI, r3
 8003b2e:	f3bf 8f6f 	isb	sy
 8003b32:	f3bf 8f4f 	dsb	sy
 8003b36:	623b      	str	r3, [r7, #32]
}
 8003b38:	bf00      	nop
 8003b3a:	e7fe      	b.n	8003b3a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	2b02      	cmp	r3, #2
 8003b40:	d103      	bne.n	8003b4a <xQueueGenericSendFromISR+0x6a>
 8003b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d101      	bne.n	8003b4e <xQueueGenericSendFromISR+0x6e>
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e000      	b.n	8003b50 <xQueueGenericSendFromISR+0x70>
 8003b4e:	2300      	movs	r3, #0
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d10a      	bne.n	8003b6a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b58:	f383 8811 	msr	BASEPRI, r3
 8003b5c:	f3bf 8f6f 	isb	sy
 8003b60:	f3bf 8f4f 	dsb	sy
 8003b64:	61fb      	str	r3, [r7, #28]
}
 8003b66:	bf00      	nop
 8003b68:	e7fe      	b.n	8003b68 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003b6a:	f001 ffc5 	bl	8005af8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003b6e:	f3ef 8211 	mrs	r2, BASEPRI
 8003b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b76:	f383 8811 	msr	BASEPRI, r3
 8003b7a:	f3bf 8f6f 	isb	sy
 8003b7e:	f3bf 8f4f 	dsb	sy
 8003b82:	61ba      	str	r2, [r7, #24]
 8003b84:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003b86:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003b88:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d302      	bcc.n	8003b9c <xQueueGenericSendFromISR+0xbc>
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	2b02      	cmp	r3, #2
 8003b9a:	d136      	bne.n	8003c0a <xQueueGenericSendFromISR+0x12a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ba2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 8003ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f003 fd05 	bl	80075b8 <SEGGER_SYSVIEW_ShrinkId>
 8003bae:	4601      	mov	r1, r0
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	2060      	movs	r0, #96	; 0x60
 8003bb6:	f002 fff3 	bl	8006ba0 <SEGGER_SYSVIEW_RecordU32x2>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003bba:	683a      	ldr	r2, [r7, #0]
 8003bbc:	68b9      	ldr	r1, [r7, #8]
 8003bbe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003bc0:	f000 f94a 	bl	8003e58 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003bc4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bcc:	d112      	bne.n	8003bf4 <xQueueGenericSendFromISR+0x114>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d016      	beq.n	8003c04 <xQueueGenericSendFromISR+0x124>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bd8:	3324      	adds	r3, #36	; 0x24
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f000 ff80 	bl	8004ae0 <xTaskRemoveFromEventList>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d00e      	beq.n	8003c04 <xQueueGenericSendFromISR+0x124>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d00b      	beq.n	8003c04 <xQueueGenericSendFromISR+0x124>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	601a      	str	r2, [r3, #0]
 8003bf2:	e007      	b.n	8003c04 <xQueueGenericSendFromISR+0x124>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003bf4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003bf8:	3301      	adds	r3, #1
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	b25a      	sxtb	r2, r3
 8003bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003c04:	2301      	movs	r3, #1
 8003c06:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003c08:	e00b      	b.n	8003c22 <xQueueGenericSendFromISR+0x142>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8003c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f003 fcd3 	bl	80075b8 <SEGGER_SYSVIEW_ShrinkId>
 8003c12:	4601      	mov	r1, r0
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	461a      	mov	r2, r3
 8003c18:	2060      	movs	r0, #96	; 0x60
 8003c1a:	f002 ffc1 	bl	8006ba0 <SEGGER_SYSVIEW_RecordU32x2>
			xReturn = errQUEUE_FULL;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	637b      	str	r3, [r7, #52]	; 0x34
 8003c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c24:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003c2c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003c2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3738      	adds	r7, #56	; 0x38
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}

08003c38 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003c38:	b590      	push	{r4, r7, lr}
 8003c3a:	b08f      	sub	sp, #60	; 0x3c
 8003c3c:	af02      	add	r7, sp, #8
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	60b9      	str	r1, [r7, #8]
 8003c42:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003c44:	2300      	movs	r3, #0
 8003c46:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d10a      	bne.n	8003c68 <xQueueReceive+0x30>
	__asm volatile
 8003c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c56:	f383 8811 	msr	BASEPRI, r3
 8003c5a:	f3bf 8f6f 	isb	sy
 8003c5e:	f3bf 8f4f 	dsb	sy
 8003c62:	623b      	str	r3, [r7, #32]
}
 8003c64:	bf00      	nop
 8003c66:	e7fe      	b.n	8003c66 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d103      	bne.n	8003c76 <xQueueReceive+0x3e>
 8003c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d101      	bne.n	8003c7a <xQueueReceive+0x42>
 8003c76:	2301      	movs	r3, #1
 8003c78:	e000      	b.n	8003c7c <xQueueReceive+0x44>
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d10a      	bne.n	8003c96 <xQueueReceive+0x5e>
	__asm volatile
 8003c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c84:	f383 8811 	msr	BASEPRI, r3
 8003c88:	f3bf 8f6f 	isb	sy
 8003c8c:	f3bf 8f4f 	dsb	sy
 8003c90:	61fb      	str	r3, [r7, #28]
}
 8003c92:	bf00      	nop
 8003c94:	e7fe      	b.n	8003c94 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003c96:	f001 f929 	bl	8004eec <xTaskGetSchedulerState>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d102      	bne.n	8003ca6 <xQueueReceive+0x6e>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d101      	bne.n	8003caa <xQueueReceive+0x72>
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e000      	b.n	8003cac <xQueueReceive+0x74>
 8003caa:	2300      	movs	r3, #0
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d10a      	bne.n	8003cc6 <xQueueReceive+0x8e>
	__asm volatile
 8003cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cb4:	f383 8811 	msr	BASEPRI, r3
 8003cb8:	f3bf 8f6f 	isb	sy
 8003cbc:	f3bf 8f4f 	dsb	sy
 8003cc0:	61bb      	str	r3, [r7, #24]
}
 8003cc2:	bf00      	nop
 8003cc4:	e7fe      	b.n	8003cc4 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003cc6:	f001 fe35 	bl	8005934 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cce:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d02f      	beq.n	8003d36 <xQueueReceive+0xfe>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003cd6:	68b9      	ldr	r1, [r7, #8]
 8003cd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003cda:	f000 f927 	bl	8003f2c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
 8003cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f003 fc69 	bl	80075b8 <SEGGER_SYSVIEW_ShrinkId>
 8003ce6:	4604      	mov	r4, r0
 8003ce8:	2000      	movs	r0, #0
 8003cea:	f003 fc65 	bl	80075b8 <SEGGER_SYSVIEW_ShrinkId>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2101      	movs	r1, #1
 8003cf4:	9100      	str	r1, [sp, #0]
 8003cf6:	4621      	mov	r1, r4
 8003cf8:	205c      	movs	r0, #92	; 0x5c
 8003cfa:	f003 f821 	bl	8006d40 <SEGGER_SYSVIEW_RecordU32x4>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d00:	1e5a      	subs	r2, r3, #1
 8003d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d04:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d08:	691b      	ldr	r3, [r3, #16]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d00f      	beq.n	8003d2e <xQueueReceive+0xf6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d10:	3310      	adds	r3, #16
 8003d12:	4618      	mov	r0, r3
 8003d14:	f000 fee4 	bl	8004ae0 <xTaskRemoveFromEventList>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d007      	beq.n	8003d2e <xQueueReceive+0xf6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003d1e:	4b4d      	ldr	r3, [pc, #308]	; (8003e54 <xQueueReceive+0x21c>)
 8003d20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d24:	601a      	str	r2, [r3, #0]
 8003d26:	f3bf 8f4f 	dsb	sy
 8003d2a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003d2e:	f001 fe31 	bl	8005994 <vPortExitCritical>
				return pdPASS;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e08a      	b.n	8003e4c <xQueueReceive+0x214>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d113      	bne.n	8003d64 <xQueueReceive+0x12c>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003d3c:	f001 fe2a 	bl	8005994 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 8003d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d42:	4618      	mov	r0, r3
 8003d44:	f003 fc38 	bl	80075b8 <SEGGER_SYSVIEW_ShrinkId>
 8003d48:	4604      	mov	r4, r0
 8003d4a:	2000      	movs	r0, #0
 8003d4c:	f003 fc34 	bl	80075b8 <SEGGER_SYSVIEW_ShrinkId>
 8003d50:	4602      	mov	r2, r0
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2101      	movs	r1, #1
 8003d56:	9100      	str	r1, [sp, #0]
 8003d58:	4621      	mov	r1, r4
 8003d5a:	205c      	movs	r0, #92	; 0x5c
 8003d5c:	f002 fff0 	bl	8006d40 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 8003d60:	2300      	movs	r3, #0
 8003d62:	e073      	b.n	8003e4c <xQueueReceive+0x214>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d106      	bne.n	8003d78 <xQueueReceive+0x140>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003d6a:	f107 0310 	add.w	r3, r7, #16
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f000 ff1e 	bl	8004bb0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003d74:	2301      	movs	r3, #1
 8003d76:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003d78:	f001 fe0c 	bl	8005994 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003d7c:	f000 fc58 	bl	8004630 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003d80:	f001 fdd8 	bl	8005934 <vPortEnterCritical>
 8003d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d86:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d8a:	b25b      	sxtb	r3, r3
 8003d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d90:	d103      	bne.n	8003d9a <xQueueReceive+0x162>
 8003d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d94:	2200      	movs	r2, #0
 8003d96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d9c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003da0:	b25b      	sxtb	r3, r3
 8003da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003da6:	d103      	bne.n	8003db0 <xQueueReceive+0x178>
 8003da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003daa:	2200      	movs	r2, #0
 8003dac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003db0:	f001 fdf0 	bl	8005994 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003db4:	1d3a      	adds	r2, r7, #4
 8003db6:	f107 0310 	add.w	r3, r7, #16
 8003dba:	4611      	mov	r1, r2
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f000 ff0d 	bl	8004bdc <xTaskCheckForTimeOut>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d124      	bne.n	8003e12 <xQueueReceive+0x1da>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003dc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003dca:	f000 f927 	bl	800401c <prvIsQueueEmpty>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d018      	beq.n	8003e06 <xQueueReceive+0x1ce>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dd6:	3324      	adds	r3, #36	; 0x24
 8003dd8:	687a      	ldr	r2, [r7, #4]
 8003dda:	4611      	mov	r1, r2
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f000 fe2d 	bl	8004a3c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003de2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003de4:	f000 f8c8 	bl	8003f78 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003de8:	f000 fc30 	bl	800464c <xTaskResumeAll>
 8003dec:	4603      	mov	r3, r0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	f47f af69 	bne.w	8003cc6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003df4:	4b17      	ldr	r3, [pc, #92]	; (8003e54 <xQueueReceive+0x21c>)
 8003df6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dfa:	601a      	str	r2, [r3, #0]
 8003dfc:	f3bf 8f4f 	dsb	sy
 8003e00:	f3bf 8f6f 	isb	sy
 8003e04:	e75f      	b.n	8003cc6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003e06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e08:	f000 f8b6 	bl	8003f78 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003e0c:	f000 fc1e 	bl	800464c <xTaskResumeAll>
 8003e10:	e759      	b.n	8003cc6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003e12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e14:	f000 f8b0 	bl	8003f78 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003e18:	f000 fc18 	bl	800464c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003e1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e1e:	f000 f8fd 	bl	800401c <prvIsQueueEmpty>
 8003e22:	4603      	mov	r3, r0
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	f43f af4e 	beq.w	8003cc6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8003e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f003 fbc3 	bl	80075b8 <SEGGER_SYSVIEW_ShrinkId>
 8003e32:	4604      	mov	r4, r0
 8003e34:	2000      	movs	r0, #0
 8003e36:	f003 fbbf 	bl	80075b8 <SEGGER_SYSVIEW_ShrinkId>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2101      	movs	r1, #1
 8003e40:	9100      	str	r1, [sp, #0]
 8003e42:	4621      	mov	r1, r4
 8003e44:	205c      	movs	r0, #92	; 0x5c
 8003e46:	f002 ff7b 	bl	8006d40 <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 8003e4a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3734      	adds	r7, #52	; 0x34
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd90      	pop	{r4, r7, pc}
 8003e54:	e000ed04 	.word	0xe000ed04

08003e58 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b086      	sub	sp, #24
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	60f8      	str	r0, [r7, #12]
 8003e60:	60b9      	str	r1, [r7, #8]
 8003e62:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003e64:	2300      	movs	r3, #0
 8003e66:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e6c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d10d      	bne.n	8003e92 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d14d      	bne.n	8003f1a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	4618      	mov	r0, r3
 8003e84:	f001 f850 	bl	8004f28 <xTaskPriorityDisinherit>
 8003e88:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	605a      	str	r2, [r3, #4]
 8003e90:	e043      	b.n	8003f1a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d119      	bne.n	8003ecc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6898      	ldr	r0, [r3, #8]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	68b9      	ldr	r1, [r7, #8]
 8003ea4:	f003 fd10 	bl	80078c8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	689a      	ldr	r2, [r3, #8]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb0:	441a      	add	r2, r3
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	689a      	ldr	r2, [r3, #8]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d32b      	bcc.n	8003f1a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	609a      	str	r2, [r3, #8]
 8003eca:	e026      	b.n	8003f1a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	68d8      	ldr	r0, [r3, #12]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	68b9      	ldr	r1, [r7, #8]
 8003ed8:	f003 fcf6 	bl	80078c8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	68da      	ldr	r2, [r3, #12]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee4:	425b      	negs	r3, r3
 8003ee6:	441a      	add	r2, r3
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	68da      	ldr	r2, [r3, #12]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d207      	bcs.n	8003f08 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	685a      	ldr	r2, [r3, #4]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f00:	425b      	negs	r3, r3
 8003f02:	441a      	add	r2, r3
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2b02      	cmp	r3, #2
 8003f0c:	d105      	bne.n	8003f1a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d002      	beq.n	8003f1a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	3b01      	subs	r3, #1
 8003f18:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	1c5a      	adds	r2, r3, #1
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003f22:	697b      	ldr	r3, [r7, #20]
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3718      	adds	r7, #24
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}

08003f2c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b082      	sub	sp, #8
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d018      	beq.n	8003f70 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	68da      	ldr	r2, [r3, #12]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f46:	441a      	add	r2, r3
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	68da      	ldr	r2, [r3, #12]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d303      	bcc.n	8003f60 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	68d9      	ldr	r1, [r3, #12]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f68:	461a      	mov	r2, r3
 8003f6a:	6838      	ldr	r0, [r7, #0]
 8003f6c:	f003 fcac 	bl	80078c8 <memcpy>
	}
}
 8003f70:	bf00      	nop
 8003f72:	3708      	adds	r7, #8
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}

08003f78 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b084      	sub	sp, #16
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003f80:	f001 fcd8 	bl	8005934 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f8a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003f8c:	e011      	b.n	8003fb2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d012      	beq.n	8003fbc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	3324      	adds	r3, #36	; 0x24
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f000 fda0 	bl	8004ae0 <xTaskRemoveFromEventList>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d001      	beq.n	8003faa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003fa6:	f000 fe7b 	bl	8004ca0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003faa:	7bfb      	ldrb	r3, [r7, #15]
 8003fac:	3b01      	subs	r3, #1
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003fb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	dce9      	bgt.n	8003f8e <prvUnlockQueue+0x16>
 8003fba:	e000      	b.n	8003fbe <prvUnlockQueue+0x46>
					break;
 8003fbc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	22ff      	movs	r2, #255	; 0xff
 8003fc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003fc6:	f001 fce5 	bl	8005994 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003fca:	f001 fcb3 	bl	8005934 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003fd4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003fd6:	e011      	b.n	8003ffc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	691b      	ldr	r3, [r3, #16]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d012      	beq.n	8004006 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	3310      	adds	r3, #16
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f000 fd7b 	bl	8004ae0 <xTaskRemoveFromEventList>
 8003fea:	4603      	mov	r3, r0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d001      	beq.n	8003ff4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003ff0:	f000 fe56 	bl	8004ca0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003ff4:	7bbb      	ldrb	r3, [r7, #14]
 8003ff6:	3b01      	subs	r3, #1
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003ffc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004000:	2b00      	cmp	r3, #0
 8004002:	dce9      	bgt.n	8003fd8 <prvUnlockQueue+0x60>
 8004004:	e000      	b.n	8004008 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004006:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	22ff      	movs	r2, #255	; 0xff
 800400c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004010:	f001 fcc0 	bl	8005994 <vPortExitCritical>
}
 8004014:	bf00      	nop
 8004016:	3710      	adds	r7, #16
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}

0800401c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b084      	sub	sp, #16
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004024:	f001 fc86 	bl	8005934 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800402c:	2b00      	cmp	r3, #0
 800402e:	d102      	bne.n	8004036 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004030:	2301      	movs	r3, #1
 8004032:	60fb      	str	r3, [r7, #12]
 8004034:	e001      	b.n	800403a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004036:	2300      	movs	r3, #0
 8004038:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800403a:	f001 fcab 	bl	8005994 <vPortExitCritical>

	return xReturn;
 800403e:	68fb      	ldr	r3, [r7, #12]
}
 8004040:	4618      	mov	r0, r3
 8004042:	3710      	adds	r7, #16
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}

08004048 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004050:	f001 fc70 	bl	8005934 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800405c:	429a      	cmp	r2, r3
 800405e:	d102      	bne.n	8004066 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004060:	2301      	movs	r3, #1
 8004062:	60fb      	str	r3, [r7, #12]
 8004064:	e001      	b.n	800406a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004066:	2300      	movs	r3, #0
 8004068:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800406a:	f001 fc93 	bl	8005994 <vPortExitCritical>

	return xReturn;
 800406e:	68fb      	ldr	r3, [r7, #12]
}
 8004070:	4618      	mov	r0, r3
 8004072:	3710      	adds	r7, #16
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}

08004078 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004078:	b580      	push	{r7, lr}
 800407a:	b084      	sub	sp, #16
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004082:	2300      	movs	r3, #0
 8004084:	60fb      	str	r3, [r7, #12]
 8004086:	e01e      	b.n	80040c6 <vQueueAddToRegistry+0x4e>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004088:	4a13      	ldr	r2, [pc, #76]	; (80040d8 <vQueueAddToRegistry+0x60>)
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d115      	bne.n	80040c0 <vQueueAddToRegistry+0x48>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004094:	4910      	ldr	r1, [pc, #64]	; (80040d8 <vQueueAddToRegistry+0x60>)
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	683a      	ldr	r2, [r7, #0]
 800409a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800409e:	4a0e      	ldr	r2, [pc, #56]	; (80040d8 <vQueueAddToRegistry+0x60>)
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	00db      	lsls	r3, r3, #3
 80040a4:	4413      	add	r3, r2
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	4618      	mov	r0, r3
 80040ae:	f003 fa83 	bl	80075b8 <SEGGER_SYSVIEW_ShrinkId>
 80040b2:	4601      	mov	r1, r0
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	461a      	mov	r2, r3
 80040b8:	2071      	movs	r0, #113	; 0x71
 80040ba:	f002 fd71 	bl	8006ba0 <SEGGER_SYSVIEW_RecordU32x2>
				break;
 80040be:	e006      	b.n	80040ce <vQueueAddToRegistry+0x56>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	3301      	adds	r3, #1
 80040c4:	60fb      	str	r3, [r7, #12]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2b07      	cmp	r3, #7
 80040ca:	d9dd      	bls.n	8004088 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80040cc:	bf00      	nop
 80040ce:	bf00      	nop
 80040d0:	3710      	adds	r7, #16
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	200008e4 	.word	0x200008e4

080040dc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b086      	sub	sp, #24
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	60f8      	str	r0, [r7, #12]
 80040e4:	60b9      	str	r1, [r7, #8]
 80040e6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80040ec:	f001 fc22 	bl	8005934 <vPortEnterCritical>
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80040f6:	b25b      	sxtb	r3, r3
 80040f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040fc:	d103      	bne.n	8004106 <vQueueWaitForMessageRestricted+0x2a>
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	2200      	movs	r2, #0
 8004102:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800410c:	b25b      	sxtb	r3, r3
 800410e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004112:	d103      	bne.n	800411c <vQueueWaitForMessageRestricted+0x40>
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	2200      	movs	r2, #0
 8004118:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800411c:	f001 fc3a 	bl	8005994 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004124:	2b00      	cmp	r3, #0
 8004126:	d106      	bne.n	8004136 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	3324      	adds	r3, #36	; 0x24
 800412c:	687a      	ldr	r2, [r7, #4]
 800412e:	68b9      	ldr	r1, [r7, #8]
 8004130:	4618      	mov	r0, r3
 8004132:	f000 fca7 	bl	8004a84 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004136:	6978      	ldr	r0, [r7, #20]
 8004138:	f7ff ff1e 	bl	8003f78 <prvUnlockQueue>
	}
 800413c:	bf00      	nop
 800413e:	3718      	adds	r7, #24
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}

08004144 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004144:	b580      	push	{r7, lr}
 8004146:	b08e      	sub	sp, #56	; 0x38
 8004148:	af04      	add	r7, sp, #16
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	60b9      	str	r1, [r7, #8]
 800414e:	607a      	str	r2, [r7, #4]
 8004150:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004152:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004154:	2b00      	cmp	r3, #0
 8004156:	d10a      	bne.n	800416e <xTaskCreateStatic+0x2a>
	__asm volatile
 8004158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800415c:	f383 8811 	msr	BASEPRI, r3
 8004160:	f3bf 8f6f 	isb	sy
 8004164:	f3bf 8f4f 	dsb	sy
 8004168:	623b      	str	r3, [r7, #32]
}
 800416a:	bf00      	nop
 800416c:	e7fe      	b.n	800416c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800416e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004170:	2b00      	cmp	r3, #0
 8004172:	d10a      	bne.n	800418a <xTaskCreateStatic+0x46>
	__asm volatile
 8004174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004178:	f383 8811 	msr	BASEPRI, r3
 800417c:	f3bf 8f6f 	isb	sy
 8004180:	f3bf 8f4f 	dsb	sy
 8004184:	61fb      	str	r3, [r7, #28]
}
 8004186:	bf00      	nop
 8004188:	e7fe      	b.n	8004188 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800418a:	23bc      	movs	r3, #188	; 0xbc
 800418c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	2bbc      	cmp	r3, #188	; 0xbc
 8004192:	d00a      	beq.n	80041aa <xTaskCreateStatic+0x66>
	__asm volatile
 8004194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004198:	f383 8811 	msr	BASEPRI, r3
 800419c:	f3bf 8f6f 	isb	sy
 80041a0:	f3bf 8f4f 	dsb	sy
 80041a4:	61bb      	str	r3, [r7, #24]
}
 80041a6:	bf00      	nop
 80041a8:	e7fe      	b.n	80041a8 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80041aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d01e      	beq.n	80041ee <xTaskCreateStatic+0xaa>
 80041b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d01b      	beq.n	80041ee <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80041b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041b8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80041ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80041be:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80041c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c2:	2202      	movs	r2, #2
 80041c4:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80041c8:	2300      	movs	r3, #0
 80041ca:	9303      	str	r3, [sp, #12]
 80041cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ce:	9302      	str	r3, [sp, #8]
 80041d0:	f107 0314 	add.w	r3, r7, #20
 80041d4:	9301      	str	r3, [sp, #4]
 80041d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d8:	9300      	str	r3, [sp, #0]
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	68b9      	ldr	r1, [r7, #8]
 80041e0:	68f8      	ldr	r0, [r7, #12]
 80041e2:	f000 f851 	bl	8004288 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80041e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80041e8:	f000 f8ec 	bl	80043c4 <prvAddNewTaskToReadyList>
 80041ec:	e001      	b.n	80041f2 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80041ee:	2300      	movs	r3, #0
 80041f0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80041f2:	697b      	ldr	r3, [r7, #20]
	}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3728      	adds	r7, #40	; 0x28
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}

080041fc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b08c      	sub	sp, #48	; 0x30
 8004200:	af04      	add	r7, sp, #16
 8004202:	60f8      	str	r0, [r7, #12]
 8004204:	60b9      	str	r1, [r7, #8]
 8004206:	603b      	str	r3, [r7, #0]
 8004208:	4613      	mov	r3, r2
 800420a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800420c:	88fb      	ldrh	r3, [r7, #6]
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	4618      	mov	r0, r3
 8004212:	f001 fcb1 	bl	8005b78 <pvPortMalloc>
 8004216:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d00e      	beq.n	800423c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800421e:	20bc      	movs	r0, #188	; 0xbc
 8004220:	f001 fcaa 	bl	8005b78 <pvPortMalloc>
 8004224:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004226:	69fb      	ldr	r3, [r7, #28]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d003      	beq.n	8004234 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800422c:	69fb      	ldr	r3, [r7, #28]
 800422e:	697a      	ldr	r2, [r7, #20]
 8004230:	631a      	str	r2, [r3, #48]	; 0x30
 8004232:	e005      	b.n	8004240 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004234:	6978      	ldr	r0, [r7, #20]
 8004236:	f001 fd63 	bl	8005d00 <vPortFree>
 800423a:	e001      	b.n	8004240 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800423c:	2300      	movs	r3, #0
 800423e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d017      	beq.n	8004276 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004246:	69fb      	ldr	r3, [r7, #28]
 8004248:	2200      	movs	r2, #0
 800424a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800424e:	88fa      	ldrh	r2, [r7, #6]
 8004250:	2300      	movs	r3, #0
 8004252:	9303      	str	r3, [sp, #12]
 8004254:	69fb      	ldr	r3, [r7, #28]
 8004256:	9302      	str	r3, [sp, #8]
 8004258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800425a:	9301      	str	r3, [sp, #4]
 800425c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800425e:	9300      	str	r3, [sp, #0]
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	68b9      	ldr	r1, [r7, #8]
 8004264:	68f8      	ldr	r0, [r7, #12]
 8004266:	f000 f80f 	bl	8004288 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800426a:	69f8      	ldr	r0, [r7, #28]
 800426c:	f000 f8aa 	bl	80043c4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004270:	2301      	movs	r3, #1
 8004272:	61bb      	str	r3, [r7, #24]
 8004274:	e002      	b.n	800427c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004276:	f04f 33ff 	mov.w	r3, #4294967295
 800427a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800427c:	69bb      	ldr	r3, [r7, #24]
	}
 800427e:	4618      	mov	r0, r3
 8004280:	3720      	adds	r7, #32
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
	...

08004288 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b088      	sub	sp, #32
 800428c:	af00      	add	r7, sp, #0
 800428e:	60f8      	str	r0, [r7, #12]
 8004290:	60b9      	str	r1, [r7, #8]
 8004292:	607a      	str	r2, [r7, #4]
 8004294:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004298:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	009b      	lsls	r3, r3, #2
 800429e:	461a      	mov	r2, r3
 80042a0:	21a5      	movs	r1, #165	; 0xa5
 80042a2:	f003 fb1f 	bl	80078e4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80042a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80042b0:	3b01      	subs	r3, #1
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	4413      	add	r3, r2
 80042b6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80042b8:	69bb      	ldr	r3, [r7, #24]
 80042ba:	f023 0307 	bic.w	r3, r3, #7
 80042be:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80042c0:	69bb      	ldr	r3, [r7, #24]
 80042c2:	f003 0307 	and.w	r3, r3, #7
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d00a      	beq.n	80042e0 <prvInitialiseNewTask+0x58>
	__asm volatile
 80042ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ce:	f383 8811 	msr	BASEPRI, r3
 80042d2:	f3bf 8f6f 	isb	sy
 80042d6:	f3bf 8f4f 	dsb	sy
 80042da:	617b      	str	r3, [r7, #20]
}
 80042dc:	bf00      	nop
 80042de:	e7fe      	b.n	80042de <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80042e0:	2300      	movs	r3, #0
 80042e2:	61fb      	str	r3, [r7, #28]
 80042e4:	e012      	b.n	800430c <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80042e6:	68ba      	ldr	r2, [r7, #8]
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	4413      	add	r3, r2
 80042ec:	7819      	ldrb	r1, [r3, #0]
 80042ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042f0:	69fb      	ldr	r3, [r7, #28]
 80042f2:	4413      	add	r3, r2
 80042f4:	3334      	adds	r3, #52	; 0x34
 80042f6:	460a      	mov	r2, r1
 80042f8:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80042fa:	68ba      	ldr	r2, [r7, #8]
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	4413      	add	r3, r2
 8004300:	781b      	ldrb	r3, [r3, #0]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d006      	beq.n	8004314 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004306:	69fb      	ldr	r3, [r7, #28]
 8004308:	3301      	adds	r3, #1
 800430a:	61fb      	str	r3, [r7, #28]
 800430c:	69fb      	ldr	r3, [r7, #28]
 800430e:	2b0f      	cmp	r3, #15
 8004310:	d9e9      	bls.n	80042e6 <prvInitialiseNewTask+0x5e>
 8004312:	e000      	b.n	8004316 <prvInitialiseNewTask+0x8e>
		{
			break;
 8004314:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004318:	2200      	movs	r2, #0
 800431a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800431e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004320:	2b37      	cmp	r3, #55	; 0x37
 8004322:	d901      	bls.n	8004328 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004324:	2337      	movs	r3, #55	; 0x37
 8004326:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800432a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800432c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800432e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004330:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004332:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004336:	2200      	movs	r2, #0
 8004338:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800433a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800433c:	3304      	adds	r3, #4
 800433e:	4618      	mov	r0, r3
 8004340:	f7ff f90c 	bl	800355c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004346:	3318      	adds	r3, #24
 8004348:	4618      	mov	r0, r3
 800434a:	f7ff f907 	bl	800355c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800434e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004350:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004352:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004356:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800435a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800435c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800435e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004360:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004362:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004366:	2200      	movs	r2, #0
 8004368:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800436c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800436e:	2200      	movs	r2, #0
 8004370:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004376:	3354      	adds	r3, #84	; 0x54
 8004378:	2260      	movs	r2, #96	; 0x60
 800437a:	2100      	movs	r1, #0
 800437c:	4618      	mov	r0, r3
 800437e:	f003 fab1 	bl	80078e4 <memset>
 8004382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004384:	4a0c      	ldr	r2, [pc, #48]	; (80043b8 <prvInitialiseNewTask+0x130>)
 8004386:	659a      	str	r2, [r3, #88]	; 0x58
 8004388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800438a:	4a0c      	ldr	r2, [pc, #48]	; (80043bc <prvInitialiseNewTask+0x134>)
 800438c:	65da      	str	r2, [r3, #92]	; 0x5c
 800438e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004390:	4a0b      	ldr	r2, [pc, #44]	; (80043c0 <prvInitialiseNewTask+0x138>)
 8004392:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004394:	683a      	ldr	r2, [r7, #0]
 8004396:	68f9      	ldr	r1, [r7, #12]
 8004398:	69b8      	ldr	r0, [r7, #24]
 800439a:	f001 f9a1 	bl	80056e0 <pxPortInitialiseStack>
 800439e:	4602      	mov	r2, r0
 80043a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80043a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d002      	beq.n	80043b0 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80043aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043ae:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80043b0:	bf00      	nop
 80043b2:	3720      	adds	r7, #32
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}
 80043b8:	08007c20 	.word	0x08007c20
 80043bc:	08007c40 	.word	0x08007c40
 80043c0:	08007c00 	.word	0x08007c00

080043c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80043c4:	b5b0      	push	{r4, r5, r7, lr}
 80043c6:	b084      	sub	sp, #16
 80043c8:	af02      	add	r7, sp, #8
 80043ca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80043cc:	f001 fab2 	bl	8005934 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80043d0:	4b3c      	ldr	r3, [pc, #240]	; (80044c4 <prvAddNewTaskToReadyList+0x100>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	3301      	adds	r3, #1
 80043d6:	4a3b      	ldr	r2, [pc, #236]	; (80044c4 <prvAddNewTaskToReadyList+0x100>)
 80043d8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80043da:	4b3b      	ldr	r3, [pc, #236]	; (80044c8 <prvAddNewTaskToReadyList+0x104>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d109      	bne.n	80043f6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80043e2:	4a39      	ldr	r2, [pc, #228]	; (80044c8 <prvAddNewTaskToReadyList+0x104>)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80043e8:	4b36      	ldr	r3, [pc, #216]	; (80044c4 <prvAddNewTaskToReadyList+0x100>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d110      	bne.n	8004412 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80043f0:	f000 fc7c 	bl	8004cec <prvInitialiseTaskLists>
 80043f4:	e00d      	b.n	8004412 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80043f6:	4b35      	ldr	r3, [pc, #212]	; (80044cc <prvAddNewTaskToReadyList+0x108>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d109      	bne.n	8004412 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80043fe:	4b32      	ldr	r3, [pc, #200]	; (80044c8 <prvAddNewTaskToReadyList+0x104>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004408:	429a      	cmp	r2, r3
 800440a:	d802      	bhi.n	8004412 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800440c:	4a2e      	ldr	r2, [pc, #184]	; (80044c8 <prvAddNewTaskToReadyList+0x104>)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004412:	4b2f      	ldr	r3, [pc, #188]	; (80044d0 <prvAddNewTaskToReadyList+0x10c>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	3301      	adds	r3, #1
 8004418:	4a2d      	ldr	r2, [pc, #180]	; (80044d0 <prvAddNewTaskToReadyList+0x10c>)
 800441a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800441c:	4b2c      	ldr	r3, [pc, #176]	; (80044d0 <prvAddNewTaskToReadyList+0x10c>)
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d016      	beq.n	8004458 <prvAddNewTaskToReadyList+0x94>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	4618      	mov	r0, r3
 800442e:	f002 fffd 	bl	800742c <SEGGER_SYSVIEW_OnTaskCreate>
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004442:	461d      	mov	r5, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	461c      	mov	r4, r3
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800444e:	1ae3      	subs	r3, r4, r3
 8004450:	9300      	str	r3, [sp, #0]
 8004452:	462b      	mov	r3, r5
 8004454:	f001 fe30 	bl	80060b8 <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	4618      	mov	r0, r3
 800445c:	f003 f86a 	bl	8007534 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004464:	4b1b      	ldr	r3, [pc, #108]	; (80044d4 <prvAddNewTaskToReadyList+0x110>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	429a      	cmp	r2, r3
 800446a:	d903      	bls.n	8004474 <prvAddNewTaskToReadyList+0xb0>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004470:	4a18      	ldr	r2, [pc, #96]	; (80044d4 <prvAddNewTaskToReadyList+0x110>)
 8004472:	6013      	str	r3, [r2, #0]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004478:	4613      	mov	r3, r2
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	4413      	add	r3, r2
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	4a15      	ldr	r2, [pc, #84]	; (80044d8 <prvAddNewTaskToReadyList+0x114>)
 8004482:	441a      	add	r2, r3
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	3304      	adds	r3, #4
 8004488:	4619      	mov	r1, r3
 800448a:	4610      	mov	r0, r2
 800448c:	f7ff f873 	bl	8003576 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004490:	f001 fa80 	bl	8005994 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004494:	4b0d      	ldr	r3, [pc, #52]	; (80044cc <prvAddNewTaskToReadyList+0x108>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d00e      	beq.n	80044ba <prvAddNewTaskToReadyList+0xf6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800449c:	4b0a      	ldr	r3, [pc, #40]	; (80044c8 <prvAddNewTaskToReadyList+0x104>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d207      	bcs.n	80044ba <prvAddNewTaskToReadyList+0xf6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80044aa:	4b0c      	ldr	r3, [pc, #48]	; (80044dc <prvAddNewTaskToReadyList+0x118>)
 80044ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044b0:	601a      	str	r2, [r3, #0]
 80044b2:	f3bf 8f4f 	dsb	sy
 80044b6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80044ba:	bf00      	nop
 80044bc:	3708      	adds	r7, #8
 80044be:	46bd      	mov	sp, r7
 80044c0:	bdb0      	pop	{r4, r5, r7, pc}
 80044c2:	bf00      	nop
 80044c4:	20000df8 	.word	0x20000df8
 80044c8:	20000924 	.word	0x20000924
 80044cc:	20000e04 	.word	0x20000e04
 80044d0:	20000e14 	.word	0x20000e14
 80044d4:	20000e00 	.word	0x20000e00
 80044d8:	20000928 	.word	0x20000928
 80044dc:	e000ed04 	.word	0xe000ed04

080044e0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80044e8:	2300      	movs	r3, #0
 80044ea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d01b      	beq.n	800452a <vTaskDelay+0x4a>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80044f2:	4b15      	ldr	r3, [pc, #84]	; (8004548 <vTaskDelay+0x68>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d00a      	beq.n	8004510 <vTaskDelay+0x30>
	__asm volatile
 80044fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044fe:	f383 8811 	msr	BASEPRI, r3
 8004502:	f3bf 8f6f 	isb	sy
 8004506:	f3bf 8f4f 	dsb	sy
 800450a:	60bb      	str	r3, [r7, #8]
}
 800450c:	bf00      	nop
 800450e:	e7fe      	b.n	800450e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004510:	f000 f88e 	bl	8004630 <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 8004514:	6879      	ldr	r1, [r7, #4]
 8004516:	2023      	movs	r0, #35	; 0x23
 8004518:	f002 fb06 	bl	8006b28 <SEGGER_SYSVIEW_RecordU32>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800451c:	2100      	movs	r1, #0
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f000 fd78 	bl	8005014 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004524:	f000 f892 	bl	800464c <xTaskResumeAll>
 8004528:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d107      	bne.n	8004540 <vTaskDelay+0x60>
		{
			portYIELD_WITHIN_API();
 8004530:	4b06      	ldr	r3, [pc, #24]	; (800454c <vTaskDelay+0x6c>)
 8004532:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004536:	601a      	str	r2, [r3, #0]
 8004538:	f3bf 8f4f 	dsb	sy
 800453c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004540:	bf00      	nop
 8004542:	3710      	adds	r7, #16
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}
 8004548:	20000e20 	.word	0x20000e20
 800454c:	e000ed04 	.word	0xe000ed04

08004550 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b08a      	sub	sp, #40	; 0x28
 8004554:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004556:	2300      	movs	r3, #0
 8004558:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800455a:	2300      	movs	r3, #0
 800455c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800455e:	463a      	mov	r2, r7
 8004560:	1d39      	adds	r1, r7, #4
 8004562:	f107 0308 	add.w	r3, r7, #8
 8004566:	4618      	mov	r0, r3
 8004568:	f7fe ffa4 	bl	80034b4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800456c:	6839      	ldr	r1, [r7, #0]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	68ba      	ldr	r2, [r7, #8]
 8004572:	9202      	str	r2, [sp, #8]
 8004574:	9301      	str	r3, [sp, #4]
 8004576:	2300      	movs	r3, #0
 8004578:	9300      	str	r3, [sp, #0]
 800457a:	2300      	movs	r3, #0
 800457c:	460a      	mov	r2, r1
 800457e:	4924      	ldr	r1, [pc, #144]	; (8004610 <vTaskStartScheduler+0xc0>)
 8004580:	4824      	ldr	r0, [pc, #144]	; (8004614 <vTaskStartScheduler+0xc4>)
 8004582:	f7ff fddf 	bl	8004144 <xTaskCreateStatic>
 8004586:	4603      	mov	r3, r0
 8004588:	4a23      	ldr	r2, [pc, #140]	; (8004618 <vTaskStartScheduler+0xc8>)
 800458a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800458c:	4b22      	ldr	r3, [pc, #136]	; (8004618 <vTaskStartScheduler+0xc8>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d002      	beq.n	800459a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004594:	2301      	movs	r3, #1
 8004596:	617b      	str	r3, [r7, #20]
 8004598:	e001      	b.n	800459e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800459a:	2300      	movs	r3, #0
 800459c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d102      	bne.n	80045aa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80045a4:	f000 fd8a 	bl	80050bc <xTimerCreateTimerTask>
 80045a8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d11b      	bne.n	80045e8 <vTaskStartScheduler+0x98>
	__asm volatile
 80045b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045b4:	f383 8811 	msr	BASEPRI, r3
 80045b8:	f3bf 8f6f 	isb	sy
 80045bc:	f3bf 8f4f 	dsb	sy
 80045c0:	613b      	str	r3, [r7, #16]
}
 80045c2:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80045c4:	4b15      	ldr	r3, [pc, #84]	; (800461c <vTaskStartScheduler+0xcc>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	3354      	adds	r3, #84	; 0x54
 80045ca:	4a15      	ldr	r2, [pc, #84]	; (8004620 <vTaskStartScheduler+0xd0>)
 80045cc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80045ce:	4b15      	ldr	r3, [pc, #84]	; (8004624 <vTaskStartScheduler+0xd4>)
 80045d0:	f04f 32ff 	mov.w	r2, #4294967295
 80045d4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80045d6:	4b14      	ldr	r3, [pc, #80]	; (8004628 <vTaskStartScheduler+0xd8>)
 80045d8:	2201      	movs	r2, #1
 80045da:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80045dc:	4b13      	ldr	r3, [pc, #76]	; (800462c <vTaskStartScheduler+0xdc>)
 80045de:	2200      	movs	r2, #0
 80045e0:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80045e2:	f001 f905 	bl	80057f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80045e6:	e00e      	b.n	8004606 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ee:	d10a      	bne.n	8004606 <vTaskStartScheduler+0xb6>
	__asm volatile
 80045f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f4:	f383 8811 	msr	BASEPRI, r3
 80045f8:	f3bf 8f6f 	isb	sy
 80045fc:	f3bf 8f4f 	dsb	sy
 8004600:	60fb      	str	r3, [r7, #12]
}
 8004602:	bf00      	nop
 8004604:	e7fe      	b.n	8004604 <vTaskStartScheduler+0xb4>
}
 8004606:	bf00      	nop
 8004608:	3718      	adds	r7, #24
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}
 800460e:	bf00      	nop
 8004610:	08007ad0 	.word	0x08007ad0
 8004614:	08004cb9 	.word	0x08004cb9
 8004618:	20000e1c 	.word	0x20000e1c
 800461c:	20000924 	.word	0x20000924
 8004620:	20000010 	.word	0x20000010
 8004624:	20000e18 	.word	0x20000e18
 8004628:	20000e04 	.word	0x20000e04
 800462c:	20000dfc 	.word	0x20000dfc

08004630 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004630:	b480      	push	{r7}
 8004632:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004634:	4b04      	ldr	r3, [pc, #16]	; (8004648 <vTaskSuspendAll+0x18>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	3301      	adds	r3, #1
 800463a:	4a03      	ldr	r2, [pc, #12]	; (8004648 <vTaskSuspendAll+0x18>)
 800463c:	6013      	str	r3, [r2, #0]
}
 800463e:	bf00      	nop
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr
 8004648:	20000e20 	.word	0x20000e20

0800464c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b084      	sub	sp, #16
 8004650:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004652:	2300      	movs	r3, #0
 8004654:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004656:	2300      	movs	r3, #0
 8004658:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800465a:	4b44      	ldr	r3, [pc, #272]	; (800476c <xTaskResumeAll+0x120>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d10a      	bne.n	8004678 <xTaskResumeAll+0x2c>
	__asm volatile
 8004662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004666:	f383 8811 	msr	BASEPRI, r3
 800466a:	f3bf 8f6f 	isb	sy
 800466e:	f3bf 8f4f 	dsb	sy
 8004672:	603b      	str	r3, [r7, #0]
}
 8004674:	bf00      	nop
 8004676:	e7fe      	b.n	8004676 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004678:	f001 f95c 	bl	8005934 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800467c:	4b3b      	ldr	r3, [pc, #236]	; (800476c <xTaskResumeAll+0x120>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	3b01      	subs	r3, #1
 8004682:	4a3a      	ldr	r2, [pc, #232]	; (800476c <xTaskResumeAll+0x120>)
 8004684:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004686:	4b39      	ldr	r3, [pc, #228]	; (800476c <xTaskResumeAll+0x120>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d166      	bne.n	800475c <xTaskResumeAll+0x110>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800468e:	4b38      	ldr	r3, [pc, #224]	; (8004770 <xTaskResumeAll+0x124>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d062      	beq.n	800475c <xTaskResumeAll+0x110>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004696:	e033      	b.n	8004700 <xTaskResumeAll+0xb4>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004698:	4b36      	ldr	r3, [pc, #216]	; (8004774 <xTaskResumeAll+0x128>)
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	68db      	ldr	r3, [r3, #12]
 800469e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	3318      	adds	r3, #24
 80046a4:	4618      	mov	r0, r3
 80046a6:	f7fe ffc3 	bl	8003630 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	3304      	adds	r3, #4
 80046ae:	4618      	mov	r0, r3
 80046b0:	f7fe ffbe 	bl	8003630 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	4618      	mov	r0, r3
 80046b8:	f002 ff3c 	bl	8007534 <SEGGER_SYSVIEW_OnTaskStartReady>
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046c0:	4b2d      	ldr	r3, [pc, #180]	; (8004778 <xTaskResumeAll+0x12c>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d903      	bls.n	80046d0 <xTaskResumeAll+0x84>
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046cc:	4a2a      	ldr	r2, [pc, #168]	; (8004778 <xTaskResumeAll+0x12c>)
 80046ce:	6013      	str	r3, [r2, #0]
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046d4:	4613      	mov	r3, r2
 80046d6:	009b      	lsls	r3, r3, #2
 80046d8:	4413      	add	r3, r2
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	4a27      	ldr	r2, [pc, #156]	; (800477c <xTaskResumeAll+0x130>)
 80046de:	441a      	add	r2, r3
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	3304      	adds	r3, #4
 80046e4:	4619      	mov	r1, r3
 80046e6:	4610      	mov	r0, r2
 80046e8:	f7fe ff45 	bl	8003576 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046f0:	4b23      	ldr	r3, [pc, #140]	; (8004780 <xTaskResumeAll+0x134>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d302      	bcc.n	8004700 <xTaskResumeAll+0xb4>
					{
						xYieldPending = pdTRUE;
 80046fa:	4b22      	ldr	r3, [pc, #136]	; (8004784 <xTaskResumeAll+0x138>)
 80046fc:	2201      	movs	r2, #1
 80046fe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004700:	4b1c      	ldr	r3, [pc, #112]	; (8004774 <xTaskResumeAll+0x128>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d1c7      	bne.n	8004698 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d001      	beq.n	8004712 <xTaskResumeAll+0xc6>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800470e:	f000 fbc7 	bl	8004ea0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004712:	4b1d      	ldr	r3, [pc, #116]	; (8004788 <xTaskResumeAll+0x13c>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d010      	beq.n	8004740 <xTaskResumeAll+0xf4>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800471e:	f000 f859 	bl	80047d4 <xTaskIncrementTick>
 8004722:	4603      	mov	r3, r0
 8004724:	2b00      	cmp	r3, #0
 8004726:	d002      	beq.n	800472e <xTaskResumeAll+0xe2>
							{
								xYieldPending = pdTRUE;
 8004728:	4b16      	ldr	r3, [pc, #88]	; (8004784 <xTaskResumeAll+0x138>)
 800472a:	2201      	movs	r2, #1
 800472c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	3b01      	subs	r3, #1
 8004732:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d1f1      	bne.n	800471e <xTaskResumeAll+0xd2>

						uxPendedTicks = 0;
 800473a:	4b13      	ldr	r3, [pc, #76]	; (8004788 <xTaskResumeAll+0x13c>)
 800473c:	2200      	movs	r2, #0
 800473e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004740:	4b10      	ldr	r3, [pc, #64]	; (8004784 <xTaskResumeAll+0x138>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d009      	beq.n	800475c <xTaskResumeAll+0x110>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004748:	2301      	movs	r3, #1
 800474a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800474c:	4b0f      	ldr	r3, [pc, #60]	; (800478c <xTaskResumeAll+0x140>)
 800474e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004752:	601a      	str	r2, [r3, #0]
 8004754:	f3bf 8f4f 	dsb	sy
 8004758:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800475c:	f001 f91a 	bl	8005994 <vPortExitCritical>

	return xAlreadyYielded;
 8004760:	68bb      	ldr	r3, [r7, #8]
}
 8004762:	4618      	mov	r0, r3
 8004764:	3710      	adds	r7, #16
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}
 800476a:	bf00      	nop
 800476c:	20000e20 	.word	0x20000e20
 8004770:	20000df8 	.word	0x20000df8
 8004774:	20000db8 	.word	0x20000db8
 8004778:	20000e00 	.word	0x20000e00
 800477c:	20000928 	.word	0x20000928
 8004780:	20000924 	.word	0x20000924
 8004784:	20000e0c 	.word	0x20000e0c
 8004788:	20000e08 	.word	0x20000e08
 800478c:	e000ed04 	.word	0xe000ed04

08004790 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004790:	b480      	push	{r7}
 8004792:	b083      	sub	sp, #12
 8004794:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004796:	4b05      	ldr	r3, [pc, #20]	; (80047ac <xTaskGetTickCount+0x1c>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800479c:	687b      	ldr	r3, [r7, #4]
}
 800479e:	4618      	mov	r0, r3
 80047a0:	370c      	adds	r7, #12
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr
 80047aa:	bf00      	nop
 80047ac:	20000dfc 	.word	0x20000dfc

080047b0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b082      	sub	sp, #8
 80047b4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80047b6:	f001 f99f 	bl	8005af8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80047ba:	2300      	movs	r3, #0
 80047bc:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80047be:	4b04      	ldr	r3, [pc, #16]	; (80047d0 <xTaskGetTickCountFromISR+0x20>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80047c4:	683b      	ldr	r3, [r7, #0]
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3708      	adds	r7, #8
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop
 80047d0:	20000dfc 	.word	0x20000dfc

080047d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b086      	sub	sp, #24
 80047d8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80047da:	2300      	movs	r3, #0
 80047dc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047de:	4b53      	ldr	r3, [pc, #332]	; (800492c <xTaskIncrementTick+0x158>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	f040 8092 	bne.w	800490c <xTaskIncrementTick+0x138>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80047e8:	4b51      	ldr	r3, [pc, #324]	; (8004930 <xTaskIncrementTick+0x15c>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	3301      	adds	r3, #1
 80047ee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80047f0:	4a4f      	ldr	r2, [pc, #316]	; (8004930 <xTaskIncrementTick+0x15c>)
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d120      	bne.n	800483e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80047fc:	4b4d      	ldr	r3, [pc, #308]	; (8004934 <xTaskIncrementTick+0x160>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d00a      	beq.n	800481c <xTaskIncrementTick+0x48>
	__asm volatile
 8004806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800480a:	f383 8811 	msr	BASEPRI, r3
 800480e:	f3bf 8f6f 	isb	sy
 8004812:	f3bf 8f4f 	dsb	sy
 8004816:	603b      	str	r3, [r7, #0]
}
 8004818:	bf00      	nop
 800481a:	e7fe      	b.n	800481a <xTaskIncrementTick+0x46>
 800481c:	4b45      	ldr	r3, [pc, #276]	; (8004934 <xTaskIncrementTick+0x160>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	60fb      	str	r3, [r7, #12]
 8004822:	4b45      	ldr	r3, [pc, #276]	; (8004938 <xTaskIncrementTick+0x164>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a43      	ldr	r2, [pc, #268]	; (8004934 <xTaskIncrementTick+0x160>)
 8004828:	6013      	str	r3, [r2, #0]
 800482a:	4a43      	ldr	r2, [pc, #268]	; (8004938 <xTaskIncrementTick+0x164>)
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6013      	str	r3, [r2, #0]
 8004830:	4b42      	ldr	r3, [pc, #264]	; (800493c <xTaskIncrementTick+0x168>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	3301      	adds	r3, #1
 8004836:	4a41      	ldr	r2, [pc, #260]	; (800493c <xTaskIncrementTick+0x168>)
 8004838:	6013      	str	r3, [r2, #0]
 800483a:	f000 fb31 	bl	8004ea0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800483e:	4b40      	ldr	r3, [pc, #256]	; (8004940 <xTaskIncrementTick+0x16c>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	693a      	ldr	r2, [r7, #16]
 8004844:	429a      	cmp	r2, r3
 8004846:	d352      	bcc.n	80048ee <xTaskIncrementTick+0x11a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004848:	4b3a      	ldr	r3, [pc, #232]	; (8004934 <xTaskIncrementTick+0x160>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d101      	bne.n	8004856 <xTaskIncrementTick+0x82>
 8004852:	2301      	movs	r3, #1
 8004854:	e000      	b.n	8004858 <xTaskIncrementTick+0x84>
 8004856:	2300      	movs	r3, #0
 8004858:	2b00      	cmp	r3, #0
 800485a:	d004      	beq.n	8004866 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800485c:	4b38      	ldr	r3, [pc, #224]	; (8004940 <xTaskIncrementTick+0x16c>)
 800485e:	f04f 32ff 	mov.w	r2, #4294967295
 8004862:	601a      	str	r2, [r3, #0]
					break;
 8004864:	e043      	b.n	80048ee <xTaskIncrementTick+0x11a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004866:	4b33      	ldr	r3, [pc, #204]	; (8004934 <xTaskIncrementTick+0x160>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	68db      	ldr	r3, [r3, #12]
 800486e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004876:	693a      	ldr	r2, [r7, #16]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	429a      	cmp	r2, r3
 800487c:	d203      	bcs.n	8004886 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800487e:	4a30      	ldr	r2, [pc, #192]	; (8004940 <xTaskIncrementTick+0x16c>)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6013      	str	r3, [r2, #0]
						break;
 8004884:	e033      	b.n	80048ee <xTaskIncrementTick+0x11a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	3304      	adds	r3, #4
 800488a:	4618      	mov	r0, r3
 800488c:	f7fe fed0 	bl	8003630 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004894:	2b00      	cmp	r3, #0
 8004896:	d004      	beq.n	80048a2 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	3318      	adds	r3, #24
 800489c:	4618      	mov	r0, r3
 800489e:	f7fe fec7 	bl	8003630 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	4618      	mov	r0, r3
 80048a6:	f002 fe45 	bl	8007534 <SEGGER_SYSVIEW_OnTaskStartReady>
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048ae:	4b25      	ldr	r3, [pc, #148]	; (8004944 <xTaskIncrementTick+0x170>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d903      	bls.n	80048be <xTaskIncrementTick+0xea>
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ba:	4a22      	ldr	r2, [pc, #136]	; (8004944 <xTaskIncrementTick+0x170>)
 80048bc:	6013      	str	r3, [r2, #0]
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048c2:	4613      	mov	r3, r2
 80048c4:	009b      	lsls	r3, r3, #2
 80048c6:	4413      	add	r3, r2
 80048c8:	009b      	lsls	r3, r3, #2
 80048ca:	4a1f      	ldr	r2, [pc, #124]	; (8004948 <xTaskIncrementTick+0x174>)
 80048cc:	441a      	add	r2, r3
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	3304      	adds	r3, #4
 80048d2:	4619      	mov	r1, r3
 80048d4:	4610      	mov	r0, r2
 80048d6:	f7fe fe4e 	bl	8003576 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048de:	4b1b      	ldr	r3, [pc, #108]	; (800494c <xTaskIncrementTick+0x178>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d3af      	bcc.n	8004848 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80048e8:	2301      	movs	r3, #1
 80048ea:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80048ec:	e7ac      	b.n	8004848 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80048ee:	4b17      	ldr	r3, [pc, #92]	; (800494c <xTaskIncrementTick+0x178>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048f4:	4914      	ldr	r1, [pc, #80]	; (8004948 <xTaskIncrementTick+0x174>)
 80048f6:	4613      	mov	r3, r2
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	4413      	add	r3, r2
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	440b      	add	r3, r1
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	2b01      	cmp	r3, #1
 8004904:	d907      	bls.n	8004916 <xTaskIncrementTick+0x142>
			{
				xSwitchRequired = pdTRUE;
 8004906:	2301      	movs	r3, #1
 8004908:	617b      	str	r3, [r7, #20]
 800490a:	e004      	b.n	8004916 <xTaskIncrementTick+0x142>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800490c:	4b10      	ldr	r3, [pc, #64]	; (8004950 <xTaskIncrementTick+0x17c>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	3301      	adds	r3, #1
 8004912:	4a0f      	ldr	r2, [pc, #60]	; (8004950 <xTaskIncrementTick+0x17c>)
 8004914:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004916:	4b0f      	ldr	r3, [pc, #60]	; (8004954 <xTaskIncrementTick+0x180>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d001      	beq.n	8004922 <xTaskIncrementTick+0x14e>
		{
			xSwitchRequired = pdTRUE;
 800491e:	2301      	movs	r3, #1
 8004920:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004922:	697b      	ldr	r3, [r7, #20]
}
 8004924:	4618      	mov	r0, r3
 8004926:	3718      	adds	r7, #24
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}
 800492c:	20000e20 	.word	0x20000e20
 8004930:	20000dfc 	.word	0x20000dfc
 8004934:	20000db0 	.word	0x20000db0
 8004938:	20000db4 	.word	0x20000db4
 800493c:	20000e10 	.word	0x20000e10
 8004940:	20000e18 	.word	0x20000e18
 8004944:	20000e00 	.word	0x20000e00
 8004948:	20000928 	.word	0x20000928
 800494c:	20000924 	.word	0x20000924
 8004950:	20000e08 	.word	0x20000e08
 8004954:	20000e0c 	.word	0x20000e0c

08004958 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b084      	sub	sp, #16
 800495c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800495e:	4b30      	ldr	r3, [pc, #192]	; (8004a20 <vTaskSwitchContext+0xc8>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d003      	beq.n	800496e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004966:	4b2f      	ldr	r3, [pc, #188]	; (8004a24 <vTaskSwitchContext+0xcc>)
 8004968:	2201      	movs	r2, #1
 800496a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800496c:	e054      	b.n	8004a18 <vTaskSwitchContext+0xc0>
		xYieldPending = pdFALSE;
 800496e:	4b2d      	ldr	r3, [pc, #180]	; (8004a24 <vTaskSwitchContext+0xcc>)
 8004970:	2200      	movs	r2, #0
 8004972:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004974:	4b2c      	ldr	r3, [pc, #176]	; (8004a28 <vTaskSwitchContext+0xd0>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	60fb      	str	r3, [r7, #12]
 800497a:	e010      	b.n	800499e <vTaskSwitchContext+0x46>
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d10a      	bne.n	8004998 <vTaskSwitchContext+0x40>
	__asm volatile
 8004982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004986:	f383 8811 	msr	BASEPRI, r3
 800498a:	f3bf 8f6f 	isb	sy
 800498e:	f3bf 8f4f 	dsb	sy
 8004992:	607b      	str	r3, [r7, #4]
}
 8004994:	bf00      	nop
 8004996:	e7fe      	b.n	8004996 <vTaskSwitchContext+0x3e>
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	3b01      	subs	r3, #1
 800499c:	60fb      	str	r3, [r7, #12]
 800499e:	4923      	ldr	r1, [pc, #140]	; (8004a2c <vTaskSwitchContext+0xd4>)
 80049a0:	68fa      	ldr	r2, [r7, #12]
 80049a2:	4613      	mov	r3, r2
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	4413      	add	r3, r2
 80049a8:	009b      	lsls	r3, r3, #2
 80049aa:	440b      	add	r3, r1
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d0e4      	beq.n	800497c <vTaskSwitchContext+0x24>
 80049b2:	68fa      	ldr	r2, [r7, #12]
 80049b4:	4613      	mov	r3, r2
 80049b6:	009b      	lsls	r3, r3, #2
 80049b8:	4413      	add	r3, r2
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	4a1b      	ldr	r2, [pc, #108]	; (8004a2c <vTaskSwitchContext+0xd4>)
 80049be:	4413      	add	r3, r2
 80049c0:	60bb      	str	r3, [r7, #8]
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	685a      	ldr	r2, [r3, #4]
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	605a      	str	r2, [r3, #4]
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	685a      	ldr	r2, [r3, #4]
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	3308      	adds	r3, #8
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d104      	bne.n	80049e2 <vTaskSwitchContext+0x8a>
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	685a      	ldr	r2, [r3, #4]
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	605a      	str	r2, [r3, #4]
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	68db      	ldr	r3, [r3, #12]
 80049e8:	4a11      	ldr	r2, [pc, #68]	; (8004a30 <vTaskSwitchContext+0xd8>)
 80049ea:	6013      	str	r3, [r2, #0]
 80049ec:	4a0e      	ldr	r2, [pc, #56]	; (8004a28 <vTaskSwitchContext+0xd0>)
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 80049f2:	4b0f      	ldr	r3, [pc, #60]	; (8004a30 <vTaskSwitchContext+0xd8>)
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	4b0f      	ldr	r3, [pc, #60]	; (8004a34 <vTaskSwitchContext+0xdc>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d102      	bne.n	8004a04 <vTaskSwitchContext+0xac>
 80049fe:	f002 fcf9 	bl	80073f4 <SEGGER_SYSVIEW_OnIdle>
 8004a02:	e004      	b.n	8004a0e <vTaskSwitchContext+0xb6>
 8004a04:	4b0a      	ldr	r3, [pc, #40]	; (8004a30 <vTaskSwitchContext+0xd8>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f002 fd51 	bl	80074b0 <SEGGER_SYSVIEW_OnTaskStartExec>
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004a0e:	4b08      	ldr	r3, [pc, #32]	; (8004a30 <vTaskSwitchContext+0xd8>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	3354      	adds	r3, #84	; 0x54
 8004a14:	4a08      	ldr	r2, [pc, #32]	; (8004a38 <vTaskSwitchContext+0xe0>)
 8004a16:	6013      	str	r3, [r2, #0]
}
 8004a18:	bf00      	nop
 8004a1a:	3710      	adds	r7, #16
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}
 8004a20:	20000e20 	.word	0x20000e20
 8004a24:	20000e0c 	.word	0x20000e0c
 8004a28:	20000e00 	.word	0x20000e00
 8004a2c:	20000928 	.word	0x20000928
 8004a30:	20000924 	.word	0x20000924
 8004a34:	20000e1c 	.word	0x20000e1c
 8004a38:	20000010 	.word	0x20000010

08004a3c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b084      	sub	sp, #16
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d10a      	bne.n	8004a62 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a50:	f383 8811 	msr	BASEPRI, r3
 8004a54:	f3bf 8f6f 	isb	sy
 8004a58:	f3bf 8f4f 	dsb	sy
 8004a5c:	60fb      	str	r3, [r7, #12]
}
 8004a5e:	bf00      	nop
 8004a60:	e7fe      	b.n	8004a60 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004a62:	4b07      	ldr	r3, [pc, #28]	; (8004a80 <vTaskPlaceOnEventList+0x44>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	3318      	adds	r3, #24
 8004a68:	4619      	mov	r1, r3
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f7fe fda7 	bl	80035be <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004a70:	2101      	movs	r1, #1
 8004a72:	6838      	ldr	r0, [r7, #0]
 8004a74:	f000 face 	bl	8005014 <prvAddCurrentTaskToDelayedList>
}
 8004a78:	bf00      	nop
 8004a7a:	3710      	adds	r7, #16
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}
 8004a80:	20000924 	.word	0x20000924

08004a84 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b086      	sub	sp, #24
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	60f8      	str	r0, [r7, #12]
 8004a8c:	60b9      	str	r1, [r7, #8]
 8004a8e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d10a      	bne.n	8004aac <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a9a:	f383 8811 	msr	BASEPRI, r3
 8004a9e:	f3bf 8f6f 	isb	sy
 8004aa2:	f3bf 8f4f 	dsb	sy
 8004aa6:	617b      	str	r3, [r7, #20]
}
 8004aa8:	bf00      	nop
 8004aaa:	e7fe      	b.n	8004aaa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004aac:	4b0b      	ldr	r3, [pc, #44]	; (8004adc <vTaskPlaceOnEventListRestricted+0x58>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	3318      	adds	r3, #24
 8004ab2:	4619      	mov	r1, r3
 8004ab4:	68f8      	ldr	r0, [r7, #12]
 8004ab6:	f7fe fd5e 	bl	8003576 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d002      	beq.n	8004ac6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004ac0:	f04f 33ff 	mov.w	r3, #4294967295
 8004ac4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8004ac6:	2024      	movs	r0, #36	; 0x24
 8004ac8:	f002 f810 	bl	8006aec <SEGGER_SYSVIEW_RecordVoid>
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004acc:	6879      	ldr	r1, [r7, #4]
 8004ace:	68b8      	ldr	r0, [r7, #8]
 8004ad0:	f000 faa0 	bl	8005014 <prvAddCurrentTaskToDelayedList>
	}
 8004ad4:	bf00      	nop
 8004ad6:	3718      	adds	r7, #24
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}
 8004adc:	20000924 	.word	0x20000924

08004ae0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b086      	sub	sp, #24
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	68db      	ldr	r3, [r3, #12]
 8004aee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d10a      	bne.n	8004b0c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004afa:	f383 8811 	msr	BASEPRI, r3
 8004afe:	f3bf 8f6f 	isb	sy
 8004b02:	f3bf 8f4f 	dsb	sy
 8004b06:	60fb      	str	r3, [r7, #12]
}
 8004b08:	bf00      	nop
 8004b0a:	e7fe      	b.n	8004b0a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	3318      	adds	r3, #24
 8004b10:	4618      	mov	r0, r3
 8004b12:	f7fe fd8d 	bl	8003630 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b16:	4b20      	ldr	r3, [pc, #128]	; (8004b98 <xTaskRemoveFromEventList+0xb8>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d121      	bne.n	8004b62 <xTaskRemoveFromEventList+0x82>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	3304      	adds	r3, #4
 8004b22:	4618      	mov	r0, r3
 8004b24:	f7fe fd84 	bl	8003630 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f002 fd02 	bl	8007534 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b34:	4b19      	ldr	r3, [pc, #100]	; (8004b9c <xTaskRemoveFromEventList+0xbc>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d903      	bls.n	8004b44 <xTaskRemoveFromEventList+0x64>
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b40:	4a16      	ldr	r2, [pc, #88]	; (8004b9c <xTaskRemoveFromEventList+0xbc>)
 8004b42:	6013      	str	r3, [r2, #0]
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b48:	4613      	mov	r3, r2
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	4413      	add	r3, r2
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	4a13      	ldr	r2, [pc, #76]	; (8004ba0 <xTaskRemoveFromEventList+0xc0>)
 8004b52:	441a      	add	r2, r3
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	3304      	adds	r3, #4
 8004b58:	4619      	mov	r1, r3
 8004b5a:	4610      	mov	r0, r2
 8004b5c:	f7fe fd0b 	bl	8003576 <vListInsertEnd>
 8004b60:	e005      	b.n	8004b6e <xTaskRemoveFromEventList+0x8e>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	3318      	adds	r3, #24
 8004b66:	4619      	mov	r1, r3
 8004b68:	480e      	ldr	r0, [pc, #56]	; (8004ba4 <xTaskRemoveFromEventList+0xc4>)
 8004b6a:	f7fe fd04 	bl	8003576 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b72:	4b0d      	ldr	r3, [pc, #52]	; (8004ba8 <xTaskRemoveFromEventList+0xc8>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d905      	bls.n	8004b88 <xTaskRemoveFromEventList+0xa8>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004b80:	4b0a      	ldr	r3, [pc, #40]	; (8004bac <xTaskRemoveFromEventList+0xcc>)
 8004b82:	2201      	movs	r2, #1
 8004b84:	601a      	str	r2, [r3, #0]
 8004b86:	e001      	b.n	8004b8c <xTaskRemoveFromEventList+0xac>
	}
	else
	{
		xReturn = pdFALSE;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004b8c:	697b      	ldr	r3, [r7, #20]
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3718      	adds	r7, #24
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}
 8004b96:	bf00      	nop
 8004b98:	20000e20 	.word	0x20000e20
 8004b9c:	20000e00 	.word	0x20000e00
 8004ba0:	20000928 	.word	0x20000928
 8004ba4:	20000db8 	.word	0x20000db8
 8004ba8:	20000924 	.word	0x20000924
 8004bac:	20000e0c 	.word	0x20000e0c

08004bb0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b083      	sub	sp, #12
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004bb8:	4b06      	ldr	r3, [pc, #24]	; (8004bd4 <vTaskInternalSetTimeOutState+0x24>)
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004bc0:	4b05      	ldr	r3, [pc, #20]	; (8004bd8 <vTaskInternalSetTimeOutState+0x28>)
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	605a      	str	r2, [r3, #4]
}
 8004bc8:	bf00      	nop
 8004bca:	370c      	adds	r7, #12
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr
 8004bd4:	20000e10 	.word	0x20000e10
 8004bd8:	20000dfc 	.word	0x20000dfc

08004bdc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b088      	sub	sp, #32
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d10a      	bne.n	8004c02 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bf0:	f383 8811 	msr	BASEPRI, r3
 8004bf4:	f3bf 8f6f 	isb	sy
 8004bf8:	f3bf 8f4f 	dsb	sy
 8004bfc:	613b      	str	r3, [r7, #16]
}
 8004bfe:	bf00      	nop
 8004c00:	e7fe      	b.n	8004c00 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d10a      	bne.n	8004c1e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c0c:	f383 8811 	msr	BASEPRI, r3
 8004c10:	f3bf 8f6f 	isb	sy
 8004c14:	f3bf 8f4f 	dsb	sy
 8004c18:	60fb      	str	r3, [r7, #12]
}
 8004c1a:	bf00      	nop
 8004c1c:	e7fe      	b.n	8004c1c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004c1e:	f000 fe89 	bl	8005934 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004c22:	4b1d      	ldr	r3, [pc, #116]	; (8004c98 <xTaskCheckForTimeOut+0xbc>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	69ba      	ldr	r2, [r7, #24]
 8004c2e:	1ad3      	subs	r3, r2, r3
 8004c30:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c3a:	d102      	bne.n	8004c42 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	61fb      	str	r3, [r7, #28]
 8004c40:	e023      	b.n	8004c8a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	4b15      	ldr	r3, [pc, #84]	; (8004c9c <xTaskCheckForTimeOut+0xc0>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d007      	beq.n	8004c5e <xTaskCheckForTimeOut+0x82>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	69ba      	ldr	r2, [r7, #24]
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d302      	bcc.n	8004c5e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	61fb      	str	r3, [r7, #28]
 8004c5c:	e015      	b.n	8004c8a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	697a      	ldr	r2, [r7, #20]
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d20b      	bcs.n	8004c80 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	1ad2      	subs	r2, r2, r3
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f7ff ff9b 	bl	8004bb0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	61fb      	str	r3, [r7, #28]
 8004c7e:	e004      	b.n	8004c8a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	2200      	movs	r2, #0
 8004c84:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004c86:	2301      	movs	r3, #1
 8004c88:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004c8a:	f000 fe83 	bl	8005994 <vPortExitCritical>

	return xReturn;
 8004c8e:	69fb      	ldr	r3, [r7, #28]
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3720      	adds	r7, #32
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}
 8004c98:	20000dfc 	.word	0x20000dfc
 8004c9c:	20000e10 	.word	0x20000e10

08004ca0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004ca4:	4b03      	ldr	r3, [pc, #12]	; (8004cb4 <vTaskMissedYield+0x14>)
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	601a      	str	r2, [r3, #0]
}
 8004caa:	bf00      	nop
 8004cac:	46bd      	mov	sp, r7
 8004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb2:	4770      	bx	lr
 8004cb4:	20000e0c 	.word	0x20000e0c

08004cb8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b082      	sub	sp, #8
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004cc0:	f000 f854 	bl	8004d6c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004cc4:	4b07      	ldr	r3, [pc, #28]	; (8004ce4 <prvIdleTask+0x2c>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d907      	bls.n	8004cdc <prvIdleTask+0x24>
			{
				taskYIELD();
 8004ccc:	4b06      	ldr	r3, [pc, #24]	; (8004ce8 <prvIdleTask+0x30>)
 8004cce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cd2:	601a      	str	r2, [r3, #0]
 8004cd4:	f3bf 8f4f 	dsb	sy
 8004cd8:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8004cdc:	f7fb fbd4 	bl	8000488 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8004ce0:	e7ee      	b.n	8004cc0 <prvIdleTask+0x8>
 8004ce2:	bf00      	nop
 8004ce4:	20000928 	.word	0x20000928
 8004ce8:	e000ed04 	.word	0xe000ed04

08004cec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b082      	sub	sp, #8
 8004cf0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	607b      	str	r3, [r7, #4]
 8004cf6:	e00c      	b.n	8004d12 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004cf8:	687a      	ldr	r2, [r7, #4]
 8004cfa:	4613      	mov	r3, r2
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	4413      	add	r3, r2
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	4a12      	ldr	r2, [pc, #72]	; (8004d4c <prvInitialiseTaskLists+0x60>)
 8004d04:	4413      	add	r3, r2
 8004d06:	4618      	mov	r0, r3
 8004d08:	f7fe fc08 	bl	800351c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	3301      	adds	r3, #1
 8004d10:	607b      	str	r3, [r7, #4]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2b37      	cmp	r3, #55	; 0x37
 8004d16:	d9ef      	bls.n	8004cf8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004d18:	480d      	ldr	r0, [pc, #52]	; (8004d50 <prvInitialiseTaskLists+0x64>)
 8004d1a:	f7fe fbff 	bl	800351c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004d1e:	480d      	ldr	r0, [pc, #52]	; (8004d54 <prvInitialiseTaskLists+0x68>)
 8004d20:	f7fe fbfc 	bl	800351c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004d24:	480c      	ldr	r0, [pc, #48]	; (8004d58 <prvInitialiseTaskLists+0x6c>)
 8004d26:	f7fe fbf9 	bl	800351c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004d2a:	480c      	ldr	r0, [pc, #48]	; (8004d5c <prvInitialiseTaskLists+0x70>)
 8004d2c:	f7fe fbf6 	bl	800351c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004d30:	480b      	ldr	r0, [pc, #44]	; (8004d60 <prvInitialiseTaskLists+0x74>)
 8004d32:	f7fe fbf3 	bl	800351c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004d36:	4b0b      	ldr	r3, [pc, #44]	; (8004d64 <prvInitialiseTaskLists+0x78>)
 8004d38:	4a05      	ldr	r2, [pc, #20]	; (8004d50 <prvInitialiseTaskLists+0x64>)
 8004d3a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004d3c:	4b0a      	ldr	r3, [pc, #40]	; (8004d68 <prvInitialiseTaskLists+0x7c>)
 8004d3e:	4a05      	ldr	r2, [pc, #20]	; (8004d54 <prvInitialiseTaskLists+0x68>)
 8004d40:	601a      	str	r2, [r3, #0]
}
 8004d42:	bf00      	nop
 8004d44:	3708      	adds	r7, #8
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
 8004d4a:	bf00      	nop
 8004d4c:	20000928 	.word	0x20000928
 8004d50:	20000d88 	.word	0x20000d88
 8004d54:	20000d9c 	.word	0x20000d9c
 8004d58:	20000db8 	.word	0x20000db8
 8004d5c:	20000dcc 	.word	0x20000dcc
 8004d60:	20000de4 	.word	0x20000de4
 8004d64:	20000db0 	.word	0x20000db0
 8004d68:	20000db4 	.word	0x20000db4

08004d6c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b082      	sub	sp, #8
 8004d70:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004d72:	e019      	b.n	8004da8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004d74:	f000 fdde 	bl	8005934 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004d78:	4b10      	ldr	r3, [pc, #64]	; (8004dbc <prvCheckTasksWaitingTermination+0x50>)
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	68db      	ldr	r3, [r3, #12]
 8004d7e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	3304      	adds	r3, #4
 8004d84:	4618      	mov	r0, r3
 8004d86:	f7fe fc53 	bl	8003630 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004d8a:	4b0d      	ldr	r3, [pc, #52]	; (8004dc0 <prvCheckTasksWaitingTermination+0x54>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	3b01      	subs	r3, #1
 8004d90:	4a0b      	ldr	r2, [pc, #44]	; (8004dc0 <prvCheckTasksWaitingTermination+0x54>)
 8004d92:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004d94:	4b0b      	ldr	r3, [pc, #44]	; (8004dc4 <prvCheckTasksWaitingTermination+0x58>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	3b01      	subs	r3, #1
 8004d9a:	4a0a      	ldr	r2, [pc, #40]	; (8004dc4 <prvCheckTasksWaitingTermination+0x58>)
 8004d9c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004d9e:	f000 fdf9 	bl	8005994 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f000 f848 	bl	8004e38 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004da8:	4b06      	ldr	r3, [pc, #24]	; (8004dc4 <prvCheckTasksWaitingTermination+0x58>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d1e1      	bne.n	8004d74 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004db0:	bf00      	nop
 8004db2:	bf00      	nop
 8004db4:	3708      	adds	r7, #8
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
 8004dba:	bf00      	nop
 8004dbc:	20000dcc 	.word	0x20000dcc
 8004dc0:	20000df8 	.word	0x20000df8
 8004dc4:	20000de0 	.word	0x20000de0

08004dc8 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8004dc8:	b480      	push	{r7}
 8004dca:	b085      	sub	sp, #20
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8004dd4:	e005      	b.n	8004de2 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	3301      	adds	r3, #1
 8004dda:	607b      	str	r3, [r7, #4]
			ulCount++;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	3301      	adds	r3, #1
 8004de0:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	781b      	ldrb	r3, [r3, #0]
 8004de6:	2ba5      	cmp	r3, #165	; 0xa5
 8004de8:	d0f5      	beq.n	8004dd6 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	089b      	lsrs	r3, r3, #2
 8004dee:	60fb      	str	r3, [r7, #12]

		return ( uint16_t ) ulCount;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	b29b      	uxth	r3, r3
	}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3714      	adds	r7, #20
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr

08004e00 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b086      	sub	sp, #24
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d102      	bne.n	8004e14 <uxTaskGetStackHighWaterMark+0x14>
 8004e0e:	4b09      	ldr	r3, [pc, #36]	; (8004e34 <uxTaskGetStackHighWaterMark+0x34>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	e000      	b.n	8004e16 <uxTaskGetStackHighWaterMark+0x16>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e1c:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 8004e1e:	6938      	ldr	r0, [r7, #16]
 8004e20:	f7ff ffd2 	bl	8004dc8 <prvTaskCheckFreeStackSpace>
 8004e24:	4603      	mov	r3, r0
 8004e26:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 8004e28:	68fb      	ldr	r3, [r7, #12]
	}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3718      	adds	r7, #24
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}
 8004e32:	bf00      	nop
 8004e34:	20000924 	.word	0x20000924

08004e38 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b084      	sub	sp, #16
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	3354      	adds	r3, #84	; 0x54
 8004e44:	4618      	mov	r0, r3
 8004e46:	f002 fd63 	bl	8007910 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d108      	bne.n	8004e66 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f000 ff51 	bl	8005d00 <vPortFree>
				vPortFree( pxTCB );
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f000 ff4e 	bl	8005d00 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004e64:	e018      	b.n	8004e98 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d103      	bne.n	8004e78 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f000 ff45 	bl	8005d00 <vPortFree>
	}
 8004e76:	e00f      	b.n	8004e98 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004e7e:	2b02      	cmp	r3, #2
 8004e80:	d00a      	beq.n	8004e98 <prvDeleteTCB+0x60>
	__asm volatile
 8004e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e86:	f383 8811 	msr	BASEPRI, r3
 8004e8a:	f3bf 8f6f 	isb	sy
 8004e8e:	f3bf 8f4f 	dsb	sy
 8004e92:	60fb      	str	r3, [r7, #12]
}
 8004e94:	bf00      	nop
 8004e96:	e7fe      	b.n	8004e96 <prvDeleteTCB+0x5e>
	}
 8004e98:	bf00      	nop
 8004e9a:	3710      	adds	r7, #16
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}

08004ea0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b083      	sub	sp, #12
 8004ea4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ea6:	4b0f      	ldr	r3, [pc, #60]	; (8004ee4 <prvResetNextTaskUnblockTime+0x44>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d101      	bne.n	8004eb4 <prvResetNextTaskUnblockTime+0x14>
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e000      	b.n	8004eb6 <prvResetNextTaskUnblockTime+0x16>
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d004      	beq.n	8004ec4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004eba:	4b0b      	ldr	r3, [pc, #44]	; (8004ee8 <prvResetNextTaskUnblockTime+0x48>)
 8004ebc:	f04f 32ff 	mov.w	r2, #4294967295
 8004ec0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004ec2:	e008      	b.n	8004ed6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004ec4:	4b07      	ldr	r3, [pc, #28]	; (8004ee4 <prvResetNextTaskUnblockTime+0x44>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	68db      	ldr	r3, [r3, #12]
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	4a05      	ldr	r2, [pc, #20]	; (8004ee8 <prvResetNextTaskUnblockTime+0x48>)
 8004ed4:	6013      	str	r3, [r2, #0]
}
 8004ed6:	bf00      	nop
 8004ed8:	370c      	adds	r7, #12
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr
 8004ee2:	bf00      	nop
 8004ee4:	20000db0 	.word	0x20000db0
 8004ee8:	20000e18 	.word	0x20000e18

08004eec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004eec:	b480      	push	{r7}
 8004eee:	b083      	sub	sp, #12
 8004ef0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004ef2:	4b0b      	ldr	r3, [pc, #44]	; (8004f20 <xTaskGetSchedulerState+0x34>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d102      	bne.n	8004f00 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004efa:	2301      	movs	r3, #1
 8004efc:	607b      	str	r3, [r7, #4]
 8004efe:	e008      	b.n	8004f12 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f00:	4b08      	ldr	r3, [pc, #32]	; (8004f24 <xTaskGetSchedulerState+0x38>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d102      	bne.n	8004f0e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004f08:	2302      	movs	r3, #2
 8004f0a:	607b      	str	r3, [r7, #4]
 8004f0c:	e001      	b.n	8004f12 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004f12:	687b      	ldr	r3, [r7, #4]
	}
 8004f14:	4618      	mov	r0, r3
 8004f16:	370c      	adds	r7, #12
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr
 8004f20:	20000e04 	.word	0x20000e04
 8004f24:	20000e20 	.word	0x20000e20

08004f28 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b086      	sub	sp, #24
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004f34:	2300      	movs	r3, #0
 8004f36:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d05f      	beq.n	8004ffe <xTaskPriorityDisinherit+0xd6>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004f3e:	4b32      	ldr	r3, [pc, #200]	; (8005008 <xTaskPriorityDisinherit+0xe0>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	693a      	ldr	r2, [r7, #16]
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d00a      	beq.n	8004f5e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f4c:	f383 8811 	msr	BASEPRI, r3
 8004f50:	f3bf 8f6f 	isb	sy
 8004f54:	f3bf 8f4f 	dsb	sy
 8004f58:	60fb      	str	r3, [r7, #12]
}
 8004f5a:	bf00      	nop
 8004f5c:	e7fe      	b.n	8004f5c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d10a      	bne.n	8004f7c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f6a:	f383 8811 	msr	BASEPRI, r3
 8004f6e:	f3bf 8f6f 	isb	sy
 8004f72:	f3bf 8f4f 	dsb	sy
 8004f76:	60bb      	str	r3, [r7, #8]
}
 8004f78:	bf00      	nop
 8004f7a:	e7fe      	b.n	8004f7a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f80:	1e5a      	subs	r2, r3, #1
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f8e:	429a      	cmp	r2, r3
 8004f90:	d035      	beq.n	8004ffe <xTaskPriorityDisinherit+0xd6>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d131      	bne.n	8004ffe <xTaskPriorityDisinherit+0xd6>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	3304      	adds	r3, #4
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f7fe fb46 	bl	8003630 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	4619      	mov	r1, r3
 8004fa8:	204a      	movs	r0, #74	; 0x4a
 8004faa:	f001 fdbd 	bl	8006b28 <SEGGER_SYSVIEW_RecordU32>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fba:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f002 fab5 	bl	8007534 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fce:	4b0f      	ldr	r3, [pc, #60]	; (800500c <xTaskPriorityDisinherit+0xe4>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d903      	bls.n	8004fde <xTaskPriorityDisinherit+0xb6>
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fda:	4a0c      	ldr	r2, [pc, #48]	; (800500c <xTaskPriorityDisinherit+0xe4>)
 8004fdc:	6013      	str	r3, [r2, #0]
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fe2:	4613      	mov	r3, r2
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	4413      	add	r3, r2
 8004fe8:	009b      	lsls	r3, r3, #2
 8004fea:	4a09      	ldr	r2, [pc, #36]	; (8005010 <xTaskPriorityDisinherit+0xe8>)
 8004fec:	441a      	add	r2, r3
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	3304      	adds	r3, #4
 8004ff2:	4619      	mov	r1, r3
 8004ff4:	4610      	mov	r0, r2
 8004ff6:	f7fe fabe 	bl	8003576 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004ffe:	697b      	ldr	r3, [r7, #20]
	}
 8005000:	4618      	mov	r0, r3
 8005002:	3718      	adds	r7, #24
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}
 8005008:	20000924 	.word	0x20000924
 800500c:	20000e00 	.word	0x20000e00
 8005010:	20000928 	.word	0x20000928

08005014 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b084      	sub	sp, #16
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800501e:	4b21      	ldr	r3, [pc, #132]	; (80050a4 <prvAddCurrentTaskToDelayedList+0x90>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005024:	4b20      	ldr	r3, [pc, #128]	; (80050a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	3304      	adds	r3, #4
 800502a:	4618      	mov	r0, r3
 800502c:	f7fe fb00 	bl	8003630 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005036:	d10a      	bne.n	800504e <prvAddCurrentTaskToDelayedList+0x3a>
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d007      	beq.n	800504e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800503e:	4b1a      	ldr	r3, [pc, #104]	; (80050a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	3304      	adds	r3, #4
 8005044:	4619      	mov	r1, r3
 8005046:	4819      	ldr	r0, [pc, #100]	; (80050ac <prvAddCurrentTaskToDelayedList+0x98>)
 8005048:	f7fe fa95 	bl	8003576 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800504c:	e026      	b.n	800509c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800504e:	68fa      	ldr	r2, [r7, #12]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	4413      	add	r3, r2
 8005054:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005056:	4b14      	ldr	r3, [pc, #80]	; (80050a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	68ba      	ldr	r2, [r7, #8]
 800505c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800505e:	68ba      	ldr	r2, [r7, #8]
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	429a      	cmp	r2, r3
 8005064:	d209      	bcs.n	800507a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005066:	4b12      	ldr	r3, [pc, #72]	; (80050b0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	4b0f      	ldr	r3, [pc, #60]	; (80050a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	3304      	adds	r3, #4
 8005070:	4619      	mov	r1, r3
 8005072:	4610      	mov	r0, r2
 8005074:	f7fe faa3 	bl	80035be <vListInsert>
}
 8005078:	e010      	b.n	800509c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800507a:	4b0e      	ldr	r3, [pc, #56]	; (80050b4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	4b0a      	ldr	r3, [pc, #40]	; (80050a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	3304      	adds	r3, #4
 8005084:	4619      	mov	r1, r3
 8005086:	4610      	mov	r0, r2
 8005088:	f7fe fa99 	bl	80035be <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800508c:	4b0a      	ldr	r3, [pc, #40]	; (80050b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	68ba      	ldr	r2, [r7, #8]
 8005092:	429a      	cmp	r2, r3
 8005094:	d202      	bcs.n	800509c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005096:	4a08      	ldr	r2, [pc, #32]	; (80050b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	6013      	str	r3, [r2, #0]
}
 800509c:	bf00      	nop
 800509e:	3710      	adds	r7, #16
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}
 80050a4:	20000dfc 	.word	0x20000dfc
 80050a8:	20000924 	.word	0x20000924
 80050ac:	20000de4 	.word	0x20000de4
 80050b0:	20000db4 	.word	0x20000db4
 80050b4:	20000db0 	.word	0x20000db0
 80050b8:	20000e18 	.word	0x20000e18

080050bc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b08a      	sub	sp, #40	; 0x28
 80050c0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80050c2:	2300      	movs	r3, #0
 80050c4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80050c6:	f000 facb 	bl	8005660 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80050ca:	4b1c      	ldr	r3, [pc, #112]	; (800513c <xTimerCreateTimerTask+0x80>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d021      	beq.n	8005116 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80050d2:	2300      	movs	r3, #0
 80050d4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80050d6:	2300      	movs	r3, #0
 80050d8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80050da:	1d3a      	adds	r2, r7, #4
 80050dc:	f107 0108 	add.w	r1, r7, #8
 80050e0:	f107 030c 	add.w	r3, r7, #12
 80050e4:	4618      	mov	r0, r3
 80050e6:	f7fe f9ff 	bl	80034e8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80050ea:	6879      	ldr	r1, [r7, #4]
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	68fa      	ldr	r2, [r7, #12]
 80050f0:	9202      	str	r2, [sp, #8]
 80050f2:	9301      	str	r3, [sp, #4]
 80050f4:	2302      	movs	r3, #2
 80050f6:	9300      	str	r3, [sp, #0]
 80050f8:	2300      	movs	r3, #0
 80050fa:	460a      	mov	r2, r1
 80050fc:	4910      	ldr	r1, [pc, #64]	; (8005140 <xTimerCreateTimerTask+0x84>)
 80050fe:	4811      	ldr	r0, [pc, #68]	; (8005144 <xTimerCreateTimerTask+0x88>)
 8005100:	f7ff f820 	bl	8004144 <xTaskCreateStatic>
 8005104:	4603      	mov	r3, r0
 8005106:	4a10      	ldr	r2, [pc, #64]	; (8005148 <xTimerCreateTimerTask+0x8c>)
 8005108:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800510a:	4b0f      	ldr	r3, [pc, #60]	; (8005148 <xTimerCreateTimerTask+0x8c>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d001      	beq.n	8005116 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005112:	2301      	movs	r3, #1
 8005114:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d10a      	bne.n	8005132 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800511c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005120:	f383 8811 	msr	BASEPRI, r3
 8005124:	f3bf 8f6f 	isb	sy
 8005128:	f3bf 8f4f 	dsb	sy
 800512c:	613b      	str	r3, [r7, #16]
}
 800512e:	bf00      	nop
 8005130:	e7fe      	b.n	8005130 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005132:	697b      	ldr	r3, [r7, #20]
}
 8005134:	4618      	mov	r0, r3
 8005136:	3718      	adds	r7, #24
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}
 800513c:	20000e54 	.word	0x20000e54
 8005140:	08007ad8 	.word	0x08007ad8
 8005144:	08005269 	.word	0x08005269
 8005148:	20000e58 	.word	0x20000e58

0800514c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b08a      	sub	sp, #40	; 0x28
 8005150:	af00      	add	r7, sp, #0
 8005152:	60f8      	str	r0, [r7, #12]
 8005154:	60b9      	str	r1, [r7, #8]
 8005156:	607a      	str	r2, [r7, #4]
 8005158:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800515a:	2300      	movs	r3, #0
 800515c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d10a      	bne.n	800517a <xTimerGenericCommand+0x2e>
	__asm volatile
 8005164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005168:	f383 8811 	msr	BASEPRI, r3
 800516c:	f3bf 8f6f 	isb	sy
 8005170:	f3bf 8f4f 	dsb	sy
 8005174:	623b      	str	r3, [r7, #32]
}
 8005176:	bf00      	nop
 8005178:	e7fe      	b.n	8005178 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800517a:	4b1a      	ldr	r3, [pc, #104]	; (80051e4 <xTimerGenericCommand+0x98>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d02a      	beq.n	80051d8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	2b05      	cmp	r3, #5
 8005192:	dc18      	bgt.n	80051c6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005194:	f7ff feaa 	bl	8004eec <xTaskGetSchedulerState>
 8005198:	4603      	mov	r3, r0
 800519a:	2b02      	cmp	r3, #2
 800519c:	d109      	bne.n	80051b2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800519e:	4b11      	ldr	r3, [pc, #68]	; (80051e4 <xTimerGenericCommand+0x98>)
 80051a0:	6818      	ldr	r0, [r3, #0]
 80051a2:	f107 0110 	add.w	r1, r7, #16
 80051a6:	2300      	movs	r3, #0
 80051a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051aa:	f7fe fb73 	bl	8003894 <xQueueGenericSend>
 80051ae:	6278      	str	r0, [r7, #36]	; 0x24
 80051b0:	e012      	b.n	80051d8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80051b2:	4b0c      	ldr	r3, [pc, #48]	; (80051e4 <xTimerGenericCommand+0x98>)
 80051b4:	6818      	ldr	r0, [r3, #0]
 80051b6:	f107 0110 	add.w	r1, r7, #16
 80051ba:	2300      	movs	r3, #0
 80051bc:	2200      	movs	r2, #0
 80051be:	f7fe fb69 	bl	8003894 <xQueueGenericSend>
 80051c2:	6278      	str	r0, [r7, #36]	; 0x24
 80051c4:	e008      	b.n	80051d8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80051c6:	4b07      	ldr	r3, [pc, #28]	; (80051e4 <xTimerGenericCommand+0x98>)
 80051c8:	6818      	ldr	r0, [r3, #0]
 80051ca:	f107 0110 	add.w	r1, r7, #16
 80051ce:	2300      	movs	r3, #0
 80051d0:	683a      	ldr	r2, [r7, #0]
 80051d2:	f7fe fc85 	bl	8003ae0 <xQueueGenericSendFromISR>
 80051d6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80051d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3728      	adds	r7, #40	; 0x28
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}
 80051e2:	bf00      	nop
 80051e4:	20000e54 	.word	0x20000e54

080051e8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b088      	sub	sp, #32
 80051ec:	af02      	add	r7, sp, #8
 80051ee:	6078      	str	r0, [r7, #4]
 80051f0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80051f2:	4b1c      	ldr	r3, [pc, #112]	; (8005264 <prvProcessExpiredTimer+0x7c>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	68db      	ldr	r3, [r3, #12]
 80051f8:	68db      	ldr	r3, [r3, #12]
 80051fa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	3304      	adds	r3, #4
 8005200:	4618      	mov	r0, r3
 8005202:	f7fe fa15 	bl	8003630 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	69db      	ldr	r3, [r3, #28]
 800520a:	2b01      	cmp	r3, #1
 800520c:	d122      	bne.n	8005254 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	699a      	ldr	r2, [r3, #24]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	18d1      	adds	r1, r2, r3
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	683a      	ldr	r2, [r7, #0]
 800521a:	6978      	ldr	r0, [r7, #20]
 800521c:	f000 f8c8 	bl	80053b0 <prvInsertTimerInActiveList>
 8005220:	4603      	mov	r3, r0
 8005222:	2b00      	cmp	r3, #0
 8005224:	d016      	beq.n	8005254 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005226:	2300      	movs	r3, #0
 8005228:	9300      	str	r3, [sp, #0]
 800522a:	2300      	movs	r3, #0
 800522c:	687a      	ldr	r2, [r7, #4]
 800522e:	2100      	movs	r1, #0
 8005230:	6978      	ldr	r0, [r7, #20]
 8005232:	f7ff ff8b 	bl	800514c <xTimerGenericCommand>
 8005236:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d10a      	bne.n	8005254 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800523e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005242:	f383 8811 	msr	BASEPRI, r3
 8005246:	f3bf 8f6f 	isb	sy
 800524a:	f3bf 8f4f 	dsb	sy
 800524e:	60fb      	str	r3, [r7, #12]
}
 8005250:	bf00      	nop
 8005252:	e7fe      	b.n	8005252 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005258:	6978      	ldr	r0, [r7, #20]
 800525a:	4798      	blx	r3
}
 800525c:	bf00      	nop
 800525e:	3718      	adds	r7, #24
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}
 8005264:	20000e4c 	.word	0x20000e4c

08005268 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b084      	sub	sp, #16
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005270:	f107 0308 	add.w	r3, r7, #8
 8005274:	4618      	mov	r0, r3
 8005276:	f000 f857 	bl	8005328 <prvGetNextExpireTime>
 800527a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	4619      	mov	r1, r3
 8005280:	68f8      	ldr	r0, [r7, #12]
 8005282:	f000 f803 	bl	800528c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005286:	f000 f8d5 	bl	8005434 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800528a:	e7f1      	b.n	8005270 <prvTimerTask+0x8>

0800528c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b084      	sub	sp, #16
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005296:	f7ff f9cb 	bl	8004630 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800529a:	f107 0308 	add.w	r3, r7, #8
 800529e:	4618      	mov	r0, r3
 80052a0:	f000 f866 	bl	8005370 <prvSampleTimeNow>
 80052a4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d130      	bne.n	800530e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d10a      	bne.n	80052c8 <prvProcessTimerOrBlockTask+0x3c>
 80052b2:	687a      	ldr	r2, [r7, #4]
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d806      	bhi.n	80052c8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80052ba:	f7ff f9c7 	bl	800464c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80052be:	68f9      	ldr	r1, [r7, #12]
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f7ff ff91 	bl	80051e8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80052c6:	e024      	b.n	8005312 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d008      	beq.n	80052e0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80052ce:	4b13      	ldr	r3, [pc, #76]	; (800531c <prvProcessTimerOrBlockTask+0x90>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	bf0c      	ite	eq
 80052d8:	2301      	moveq	r3, #1
 80052da:	2300      	movne	r3, #0
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80052e0:	4b0f      	ldr	r3, [pc, #60]	; (8005320 <prvProcessTimerOrBlockTask+0x94>)
 80052e2:	6818      	ldr	r0, [r3, #0]
 80052e4:	687a      	ldr	r2, [r7, #4]
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	1ad3      	subs	r3, r2, r3
 80052ea:	683a      	ldr	r2, [r7, #0]
 80052ec:	4619      	mov	r1, r3
 80052ee:	f7fe fef5 	bl	80040dc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80052f2:	f7ff f9ab 	bl	800464c <xTaskResumeAll>
 80052f6:	4603      	mov	r3, r0
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d10a      	bne.n	8005312 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80052fc:	4b09      	ldr	r3, [pc, #36]	; (8005324 <prvProcessTimerOrBlockTask+0x98>)
 80052fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005302:	601a      	str	r2, [r3, #0]
 8005304:	f3bf 8f4f 	dsb	sy
 8005308:	f3bf 8f6f 	isb	sy
}
 800530c:	e001      	b.n	8005312 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800530e:	f7ff f99d 	bl	800464c <xTaskResumeAll>
}
 8005312:	bf00      	nop
 8005314:	3710      	adds	r7, #16
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}
 800531a:	bf00      	nop
 800531c:	20000e50 	.word	0x20000e50
 8005320:	20000e54 	.word	0x20000e54
 8005324:	e000ed04 	.word	0xe000ed04

08005328 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005328:	b480      	push	{r7}
 800532a:	b085      	sub	sp, #20
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005330:	4b0e      	ldr	r3, [pc, #56]	; (800536c <prvGetNextExpireTime+0x44>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	2b00      	cmp	r3, #0
 8005338:	bf0c      	ite	eq
 800533a:	2301      	moveq	r3, #1
 800533c:	2300      	movne	r3, #0
 800533e:	b2db      	uxtb	r3, r3
 8005340:	461a      	mov	r2, r3
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d105      	bne.n	800535a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800534e:	4b07      	ldr	r3, [pc, #28]	; (800536c <prvGetNextExpireTime+0x44>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	68db      	ldr	r3, [r3, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	60fb      	str	r3, [r7, #12]
 8005358:	e001      	b.n	800535e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800535a:	2300      	movs	r3, #0
 800535c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800535e:	68fb      	ldr	r3, [r7, #12]
}
 8005360:	4618      	mov	r0, r3
 8005362:	3714      	adds	r7, #20
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr
 800536c:	20000e4c 	.word	0x20000e4c

08005370 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b084      	sub	sp, #16
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005378:	f7ff fa0a 	bl	8004790 <xTaskGetTickCount>
 800537c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800537e:	4b0b      	ldr	r3, [pc, #44]	; (80053ac <prvSampleTimeNow+0x3c>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	68fa      	ldr	r2, [r7, #12]
 8005384:	429a      	cmp	r2, r3
 8005386:	d205      	bcs.n	8005394 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005388:	f000 f908 	bl	800559c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2201      	movs	r2, #1
 8005390:	601a      	str	r2, [r3, #0]
 8005392:	e002      	b.n	800539a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2200      	movs	r2, #0
 8005398:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800539a:	4a04      	ldr	r2, [pc, #16]	; (80053ac <prvSampleTimeNow+0x3c>)
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80053a0:	68fb      	ldr	r3, [r7, #12]
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3710      	adds	r7, #16
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
 80053aa:	bf00      	nop
 80053ac:	20000e5c 	.word	0x20000e5c

080053b0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b086      	sub	sp, #24
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	60f8      	str	r0, [r7, #12]
 80053b8:	60b9      	str	r1, [r7, #8]
 80053ba:	607a      	str	r2, [r7, #4]
 80053bc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80053be:	2300      	movs	r3, #0
 80053c0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	68ba      	ldr	r2, [r7, #8]
 80053c6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	68fa      	ldr	r2, [r7, #12]
 80053cc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80053ce:	68ba      	ldr	r2, [r7, #8]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	429a      	cmp	r2, r3
 80053d4:	d812      	bhi.n	80053fc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	1ad2      	subs	r2, r2, r3
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	699b      	ldr	r3, [r3, #24]
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d302      	bcc.n	80053ea <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80053e4:	2301      	movs	r3, #1
 80053e6:	617b      	str	r3, [r7, #20]
 80053e8:	e01b      	b.n	8005422 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80053ea:	4b10      	ldr	r3, [pc, #64]	; (800542c <prvInsertTimerInActiveList+0x7c>)
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	3304      	adds	r3, #4
 80053f2:	4619      	mov	r1, r3
 80053f4:	4610      	mov	r0, r2
 80053f6:	f7fe f8e2 	bl	80035be <vListInsert>
 80053fa:	e012      	b.n	8005422 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80053fc:	687a      	ldr	r2, [r7, #4]
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	429a      	cmp	r2, r3
 8005402:	d206      	bcs.n	8005412 <prvInsertTimerInActiveList+0x62>
 8005404:	68ba      	ldr	r2, [r7, #8]
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	429a      	cmp	r2, r3
 800540a:	d302      	bcc.n	8005412 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800540c:	2301      	movs	r3, #1
 800540e:	617b      	str	r3, [r7, #20]
 8005410:	e007      	b.n	8005422 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005412:	4b07      	ldr	r3, [pc, #28]	; (8005430 <prvInsertTimerInActiveList+0x80>)
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	3304      	adds	r3, #4
 800541a:	4619      	mov	r1, r3
 800541c:	4610      	mov	r0, r2
 800541e:	f7fe f8ce 	bl	80035be <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005422:	697b      	ldr	r3, [r7, #20]
}
 8005424:	4618      	mov	r0, r3
 8005426:	3718      	adds	r7, #24
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}
 800542c:	20000e50 	.word	0x20000e50
 8005430:	20000e4c 	.word	0x20000e4c

08005434 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b08e      	sub	sp, #56	; 0x38
 8005438:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800543a:	e09d      	b.n	8005578 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2b00      	cmp	r3, #0
 8005440:	da18      	bge.n	8005474 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005442:	1d3b      	adds	r3, r7, #4
 8005444:	3304      	adds	r3, #4
 8005446:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800544a:	2b00      	cmp	r3, #0
 800544c:	d10a      	bne.n	8005464 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800544e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005452:	f383 8811 	msr	BASEPRI, r3
 8005456:	f3bf 8f6f 	isb	sy
 800545a:	f3bf 8f4f 	dsb	sy
 800545e:	61fb      	str	r3, [r7, #28]
}
 8005460:	bf00      	nop
 8005462:	e7fe      	b.n	8005462 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800546a:	6850      	ldr	r0, [r2, #4]
 800546c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800546e:	6892      	ldr	r2, [r2, #8]
 8005470:	4611      	mov	r1, r2
 8005472:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2b00      	cmp	r3, #0
 8005478:	db7d      	blt.n	8005576 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800547e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005480:	695b      	ldr	r3, [r3, #20]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d004      	beq.n	8005490 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005488:	3304      	adds	r3, #4
 800548a:	4618      	mov	r0, r3
 800548c:	f7fe f8d0 	bl	8003630 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005490:	463b      	mov	r3, r7
 8005492:	4618      	mov	r0, r3
 8005494:	f7ff ff6c 	bl	8005370 <prvSampleTimeNow>
 8005498:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2b09      	cmp	r3, #9
 800549e:	d86b      	bhi.n	8005578 <prvProcessReceivedCommands+0x144>
 80054a0:	a201      	add	r2, pc, #4	; (adr r2, 80054a8 <prvProcessReceivedCommands+0x74>)
 80054a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054a6:	bf00      	nop
 80054a8:	080054d1 	.word	0x080054d1
 80054ac:	080054d1 	.word	0x080054d1
 80054b0:	080054d1 	.word	0x080054d1
 80054b4:	08005579 	.word	0x08005579
 80054b8:	0800552d 	.word	0x0800552d
 80054bc:	08005565 	.word	0x08005565
 80054c0:	080054d1 	.word	0x080054d1
 80054c4:	080054d1 	.word	0x080054d1
 80054c8:	08005579 	.word	0x08005579
 80054cc:	0800552d 	.word	0x0800552d
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80054d0:	68ba      	ldr	r2, [r7, #8]
 80054d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054d4:	699b      	ldr	r3, [r3, #24]
 80054d6:	18d1      	adds	r1, r2, r3
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054de:	f7ff ff67 	bl	80053b0 <prvInsertTimerInActiveList>
 80054e2:	4603      	mov	r3, r0
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d047      	beq.n	8005578 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80054e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054ee:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80054f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054f2:	69db      	ldr	r3, [r3, #28]
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d13f      	bne.n	8005578 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80054f8:	68ba      	ldr	r2, [r7, #8]
 80054fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054fc:	699b      	ldr	r3, [r3, #24]
 80054fe:	441a      	add	r2, r3
 8005500:	2300      	movs	r3, #0
 8005502:	9300      	str	r3, [sp, #0]
 8005504:	2300      	movs	r3, #0
 8005506:	2100      	movs	r1, #0
 8005508:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800550a:	f7ff fe1f 	bl	800514c <xTimerGenericCommand>
 800550e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005510:	6a3b      	ldr	r3, [r7, #32]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d130      	bne.n	8005578 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8005516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800551a:	f383 8811 	msr	BASEPRI, r3
 800551e:	f3bf 8f6f 	isb	sy
 8005522:	f3bf 8f4f 	dsb	sy
 8005526:	61bb      	str	r3, [r7, #24]
}
 8005528:	bf00      	nop
 800552a:	e7fe      	b.n	800552a <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800552c:	68ba      	ldr	r2, [r7, #8]
 800552e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005530:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005534:	699b      	ldr	r3, [r3, #24]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d10a      	bne.n	8005550 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800553a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800553e:	f383 8811 	msr	BASEPRI, r3
 8005542:	f3bf 8f6f 	isb	sy
 8005546:	f3bf 8f4f 	dsb	sy
 800554a:	617b      	str	r3, [r7, #20]
}
 800554c:	bf00      	nop
 800554e:	e7fe      	b.n	800554e <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005552:	699a      	ldr	r2, [r3, #24]
 8005554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005556:	18d1      	adds	r1, r2, r3
 8005558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800555c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800555e:	f7ff ff27 	bl	80053b0 <prvInsertTimerInActiveList>
					break;
 8005562:	e009      	b.n	8005578 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005566:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800556a:	2b00      	cmp	r3, #0
 800556c:	d104      	bne.n	8005578 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800556e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005570:	f000 fbc6 	bl	8005d00 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005574:	e000      	b.n	8005578 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005576:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005578:	4b07      	ldr	r3, [pc, #28]	; (8005598 <prvProcessReceivedCommands+0x164>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	1d39      	adds	r1, r7, #4
 800557e:	2200      	movs	r2, #0
 8005580:	4618      	mov	r0, r3
 8005582:	f7fe fb59 	bl	8003c38 <xQueueReceive>
 8005586:	4603      	mov	r3, r0
 8005588:	2b00      	cmp	r3, #0
 800558a:	f47f af57 	bne.w	800543c <prvProcessReceivedCommands+0x8>
	}
}
 800558e:	bf00      	nop
 8005590:	bf00      	nop
 8005592:	3730      	adds	r7, #48	; 0x30
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}
 8005598:	20000e54 	.word	0x20000e54

0800559c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b088      	sub	sp, #32
 80055a0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80055a2:	e045      	b.n	8005630 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80055a4:	4b2c      	ldr	r3, [pc, #176]	; (8005658 <prvSwitchTimerLists+0xbc>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	68db      	ldr	r3, [r3, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80055ae:	4b2a      	ldr	r3, [pc, #168]	; (8005658 <prvSwitchTimerLists+0xbc>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	68db      	ldr	r3, [r3, #12]
 80055b6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	3304      	adds	r3, #4
 80055bc:	4618      	mov	r0, r3
 80055be:	f7fe f837 	bl	8003630 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c6:	68f8      	ldr	r0, [r7, #12]
 80055c8:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	69db      	ldr	r3, [r3, #28]
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d12e      	bne.n	8005630 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	699b      	ldr	r3, [r3, #24]
 80055d6:	693a      	ldr	r2, [r7, #16]
 80055d8:	4413      	add	r3, r2
 80055da:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80055dc:	68ba      	ldr	r2, [r7, #8]
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	429a      	cmp	r2, r3
 80055e2:	d90e      	bls.n	8005602 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	68ba      	ldr	r2, [r7, #8]
 80055e8:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	68fa      	ldr	r2, [r7, #12]
 80055ee:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80055f0:	4b19      	ldr	r3, [pc, #100]	; (8005658 <prvSwitchTimerLists+0xbc>)
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	3304      	adds	r3, #4
 80055f8:	4619      	mov	r1, r3
 80055fa:	4610      	mov	r0, r2
 80055fc:	f7fd ffdf 	bl	80035be <vListInsert>
 8005600:	e016      	b.n	8005630 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005602:	2300      	movs	r3, #0
 8005604:	9300      	str	r3, [sp, #0]
 8005606:	2300      	movs	r3, #0
 8005608:	693a      	ldr	r2, [r7, #16]
 800560a:	2100      	movs	r1, #0
 800560c:	68f8      	ldr	r0, [r7, #12]
 800560e:	f7ff fd9d 	bl	800514c <xTimerGenericCommand>
 8005612:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d10a      	bne.n	8005630 <prvSwitchTimerLists+0x94>
	__asm volatile
 800561a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800561e:	f383 8811 	msr	BASEPRI, r3
 8005622:	f3bf 8f6f 	isb	sy
 8005626:	f3bf 8f4f 	dsb	sy
 800562a:	603b      	str	r3, [r7, #0]
}
 800562c:	bf00      	nop
 800562e:	e7fe      	b.n	800562e <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005630:	4b09      	ldr	r3, [pc, #36]	; (8005658 <prvSwitchTimerLists+0xbc>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d1b4      	bne.n	80055a4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800563a:	4b07      	ldr	r3, [pc, #28]	; (8005658 <prvSwitchTimerLists+0xbc>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005640:	4b06      	ldr	r3, [pc, #24]	; (800565c <prvSwitchTimerLists+0xc0>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a04      	ldr	r2, [pc, #16]	; (8005658 <prvSwitchTimerLists+0xbc>)
 8005646:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005648:	4a04      	ldr	r2, [pc, #16]	; (800565c <prvSwitchTimerLists+0xc0>)
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	6013      	str	r3, [r2, #0]
}
 800564e:	bf00      	nop
 8005650:	3718      	adds	r7, #24
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}
 8005656:	bf00      	nop
 8005658:	20000e4c 	.word	0x20000e4c
 800565c:	20000e50 	.word	0x20000e50

08005660 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b082      	sub	sp, #8
 8005664:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005666:	f000 f965 	bl	8005934 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800566a:	4b15      	ldr	r3, [pc, #84]	; (80056c0 <prvCheckForValidListAndQueue+0x60>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d120      	bne.n	80056b4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005672:	4814      	ldr	r0, [pc, #80]	; (80056c4 <prvCheckForValidListAndQueue+0x64>)
 8005674:	f7fd ff52 	bl	800351c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005678:	4813      	ldr	r0, [pc, #76]	; (80056c8 <prvCheckForValidListAndQueue+0x68>)
 800567a:	f7fd ff4f 	bl	800351c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800567e:	4b13      	ldr	r3, [pc, #76]	; (80056cc <prvCheckForValidListAndQueue+0x6c>)
 8005680:	4a10      	ldr	r2, [pc, #64]	; (80056c4 <prvCheckForValidListAndQueue+0x64>)
 8005682:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005684:	4b12      	ldr	r3, [pc, #72]	; (80056d0 <prvCheckForValidListAndQueue+0x70>)
 8005686:	4a10      	ldr	r2, [pc, #64]	; (80056c8 <prvCheckForValidListAndQueue+0x68>)
 8005688:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800568a:	2300      	movs	r3, #0
 800568c:	9300      	str	r3, [sp, #0]
 800568e:	4b11      	ldr	r3, [pc, #68]	; (80056d4 <prvCheckForValidListAndQueue+0x74>)
 8005690:	4a11      	ldr	r2, [pc, #68]	; (80056d8 <prvCheckForValidListAndQueue+0x78>)
 8005692:	2110      	movs	r1, #16
 8005694:	200a      	movs	r0, #10
 8005696:	f7fe f85d 	bl	8003754 <xQueueGenericCreateStatic>
 800569a:	4603      	mov	r3, r0
 800569c:	4a08      	ldr	r2, [pc, #32]	; (80056c0 <prvCheckForValidListAndQueue+0x60>)
 800569e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80056a0:	4b07      	ldr	r3, [pc, #28]	; (80056c0 <prvCheckForValidListAndQueue+0x60>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d005      	beq.n	80056b4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80056a8:	4b05      	ldr	r3, [pc, #20]	; (80056c0 <prvCheckForValidListAndQueue+0x60>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	490b      	ldr	r1, [pc, #44]	; (80056dc <prvCheckForValidListAndQueue+0x7c>)
 80056ae:	4618      	mov	r0, r3
 80056b0:	f7fe fce2 	bl	8004078 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80056b4:	f000 f96e 	bl	8005994 <vPortExitCritical>
}
 80056b8:	bf00      	nop
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}
 80056be:	bf00      	nop
 80056c0:	20000e54 	.word	0x20000e54
 80056c4:	20000e24 	.word	0x20000e24
 80056c8:	20000e38 	.word	0x20000e38
 80056cc:	20000e4c 	.word	0x20000e4c
 80056d0:	20000e50 	.word	0x20000e50
 80056d4:	20000f00 	.word	0x20000f00
 80056d8:	20000e60 	.word	0x20000e60
 80056dc:	08007ae0 	.word	0x08007ae0

080056e0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80056e0:	b480      	push	{r7}
 80056e2:	b085      	sub	sp, #20
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	60f8      	str	r0, [r7, #12]
 80056e8:	60b9      	str	r1, [r7, #8]
 80056ea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	3b04      	subs	r3, #4
 80056f0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80056f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	3b04      	subs	r3, #4
 80056fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	f023 0201 	bic.w	r2, r3, #1
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	3b04      	subs	r3, #4
 800570e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005710:	4a0c      	ldr	r2, [pc, #48]	; (8005744 <pxPortInitialiseStack+0x64>)
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	3b14      	subs	r3, #20
 800571a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800571c:	687a      	ldr	r2, [r7, #4]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	3b04      	subs	r3, #4
 8005726:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f06f 0202 	mvn.w	r2, #2
 800572e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	3b20      	subs	r3, #32
 8005734:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005736:	68fb      	ldr	r3, [r7, #12]
}
 8005738:	4618      	mov	r0, r3
 800573a:	3714      	adds	r7, #20
 800573c:	46bd      	mov	sp, r7
 800573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005742:	4770      	bx	lr
 8005744:	08005749 	.word	0x08005749

08005748 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005748:	b480      	push	{r7}
 800574a:	b085      	sub	sp, #20
 800574c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800574e:	2300      	movs	r3, #0
 8005750:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005752:	4b12      	ldr	r3, [pc, #72]	; (800579c <prvTaskExitError+0x54>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800575a:	d00a      	beq.n	8005772 <prvTaskExitError+0x2a>
	__asm volatile
 800575c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005760:	f383 8811 	msr	BASEPRI, r3
 8005764:	f3bf 8f6f 	isb	sy
 8005768:	f3bf 8f4f 	dsb	sy
 800576c:	60fb      	str	r3, [r7, #12]
}
 800576e:	bf00      	nop
 8005770:	e7fe      	b.n	8005770 <prvTaskExitError+0x28>
	__asm volatile
 8005772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005776:	f383 8811 	msr	BASEPRI, r3
 800577a:	f3bf 8f6f 	isb	sy
 800577e:	f3bf 8f4f 	dsb	sy
 8005782:	60bb      	str	r3, [r7, #8]
}
 8005784:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005786:	bf00      	nop
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d0fc      	beq.n	8005788 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800578e:	bf00      	nop
 8005790:	bf00      	nop
 8005792:	3714      	adds	r7, #20
 8005794:	46bd      	mov	sp, r7
 8005796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579a:	4770      	bx	lr
 800579c:	2000000c 	.word	0x2000000c

080057a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80057a0:	4b07      	ldr	r3, [pc, #28]	; (80057c0 <pxCurrentTCBConst2>)
 80057a2:	6819      	ldr	r1, [r3, #0]
 80057a4:	6808      	ldr	r0, [r1, #0]
 80057a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057aa:	f380 8809 	msr	PSP, r0
 80057ae:	f3bf 8f6f 	isb	sy
 80057b2:	f04f 0000 	mov.w	r0, #0
 80057b6:	f380 8811 	msr	BASEPRI, r0
 80057ba:	4770      	bx	lr
 80057bc:	f3af 8000 	nop.w

080057c0 <pxCurrentTCBConst2>:
 80057c0:	20000924 	.word	0x20000924
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80057c4:	bf00      	nop
 80057c6:	bf00      	nop

080057c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80057c8:	4808      	ldr	r0, [pc, #32]	; (80057ec <prvPortStartFirstTask+0x24>)
 80057ca:	6800      	ldr	r0, [r0, #0]
 80057cc:	6800      	ldr	r0, [r0, #0]
 80057ce:	f380 8808 	msr	MSP, r0
 80057d2:	f04f 0000 	mov.w	r0, #0
 80057d6:	f380 8814 	msr	CONTROL, r0
 80057da:	b662      	cpsie	i
 80057dc:	b661      	cpsie	f
 80057de:	f3bf 8f4f 	dsb	sy
 80057e2:	f3bf 8f6f 	isb	sy
 80057e6:	df00      	svc	0
 80057e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80057ea:	bf00      	nop
 80057ec:	e000ed08 	.word	0xe000ed08

080057f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b086      	sub	sp, #24
 80057f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80057f6:	4b46      	ldr	r3, [pc, #280]	; (8005910 <xPortStartScheduler+0x120>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a46      	ldr	r2, [pc, #280]	; (8005914 <xPortStartScheduler+0x124>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d10a      	bne.n	8005816 <xPortStartScheduler+0x26>
	__asm volatile
 8005800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005804:	f383 8811 	msr	BASEPRI, r3
 8005808:	f3bf 8f6f 	isb	sy
 800580c:	f3bf 8f4f 	dsb	sy
 8005810:	613b      	str	r3, [r7, #16]
}
 8005812:	bf00      	nop
 8005814:	e7fe      	b.n	8005814 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005816:	4b3e      	ldr	r3, [pc, #248]	; (8005910 <xPortStartScheduler+0x120>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a3f      	ldr	r2, [pc, #252]	; (8005918 <xPortStartScheduler+0x128>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d10a      	bne.n	8005836 <xPortStartScheduler+0x46>
	__asm volatile
 8005820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005824:	f383 8811 	msr	BASEPRI, r3
 8005828:	f3bf 8f6f 	isb	sy
 800582c:	f3bf 8f4f 	dsb	sy
 8005830:	60fb      	str	r3, [r7, #12]
}
 8005832:	bf00      	nop
 8005834:	e7fe      	b.n	8005834 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005836:	4b39      	ldr	r3, [pc, #228]	; (800591c <xPortStartScheduler+0x12c>)
 8005838:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	781b      	ldrb	r3, [r3, #0]
 800583e:	b2db      	uxtb	r3, r3
 8005840:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	22ff      	movs	r2, #255	; 0xff
 8005846:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	781b      	ldrb	r3, [r3, #0]
 800584c:	b2db      	uxtb	r3, r3
 800584e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005850:	78fb      	ldrb	r3, [r7, #3]
 8005852:	b2db      	uxtb	r3, r3
 8005854:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005858:	b2da      	uxtb	r2, r3
 800585a:	4b31      	ldr	r3, [pc, #196]	; (8005920 <xPortStartScheduler+0x130>)
 800585c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800585e:	4b31      	ldr	r3, [pc, #196]	; (8005924 <xPortStartScheduler+0x134>)
 8005860:	2207      	movs	r2, #7
 8005862:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005864:	e009      	b.n	800587a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005866:	4b2f      	ldr	r3, [pc, #188]	; (8005924 <xPortStartScheduler+0x134>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	3b01      	subs	r3, #1
 800586c:	4a2d      	ldr	r2, [pc, #180]	; (8005924 <xPortStartScheduler+0x134>)
 800586e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005870:	78fb      	ldrb	r3, [r7, #3]
 8005872:	b2db      	uxtb	r3, r3
 8005874:	005b      	lsls	r3, r3, #1
 8005876:	b2db      	uxtb	r3, r3
 8005878:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800587a:	78fb      	ldrb	r3, [r7, #3]
 800587c:	b2db      	uxtb	r3, r3
 800587e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005882:	2b80      	cmp	r3, #128	; 0x80
 8005884:	d0ef      	beq.n	8005866 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005886:	4b27      	ldr	r3, [pc, #156]	; (8005924 <xPortStartScheduler+0x134>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f1c3 0307 	rsb	r3, r3, #7
 800588e:	2b04      	cmp	r3, #4
 8005890:	d00a      	beq.n	80058a8 <xPortStartScheduler+0xb8>
	__asm volatile
 8005892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005896:	f383 8811 	msr	BASEPRI, r3
 800589a:	f3bf 8f6f 	isb	sy
 800589e:	f3bf 8f4f 	dsb	sy
 80058a2:	60bb      	str	r3, [r7, #8]
}
 80058a4:	bf00      	nop
 80058a6:	e7fe      	b.n	80058a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80058a8:	4b1e      	ldr	r3, [pc, #120]	; (8005924 <xPortStartScheduler+0x134>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	021b      	lsls	r3, r3, #8
 80058ae:	4a1d      	ldr	r2, [pc, #116]	; (8005924 <xPortStartScheduler+0x134>)
 80058b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80058b2:	4b1c      	ldr	r3, [pc, #112]	; (8005924 <xPortStartScheduler+0x134>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80058ba:	4a1a      	ldr	r2, [pc, #104]	; (8005924 <xPortStartScheduler+0x134>)
 80058bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	b2da      	uxtb	r2, r3
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80058c6:	4b18      	ldr	r3, [pc, #96]	; (8005928 <xPortStartScheduler+0x138>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a17      	ldr	r2, [pc, #92]	; (8005928 <xPortStartScheduler+0x138>)
 80058cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80058d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80058d2:	4b15      	ldr	r3, [pc, #84]	; (8005928 <xPortStartScheduler+0x138>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a14      	ldr	r2, [pc, #80]	; (8005928 <xPortStartScheduler+0x138>)
 80058d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80058dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80058de:	f000 f8dd 	bl	8005a9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80058e2:	4b12      	ldr	r3, [pc, #72]	; (800592c <xPortStartScheduler+0x13c>)
 80058e4:	2200      	movs	r2, #0
 80058e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80058e8:	f000 f8fc 	bl	8005ae4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80058ec:	4b10      	ldr	r3, [pc, #64]	; (8005930 <xPortStartScheduler+0x140>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a0f      	ldr	r2, [pc, #60]	; (8005930 <xPortStartScheduler+0x140>)
 80058f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80058f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80058f8:	f7ff ff66 	bl	80057c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80058fc:	f7ff f82c 	bl	8004958 <vTaskSwitchContext>
	prvTaskExitError();
 8005900:	f7ff ff22 	bl	8005748 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005904:	2300      	movs	r3, #0
}
 8005906:	4618      	mov	r0, r3
 8005908:	3718      	adds	r7, #24
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}
 800590e:	bf00      	nop
 8005910:	e000ed00 	.word	0xe000ed00
 8005914:	410fc271 	.word	0x410fc271
 8005918:	410fc270 	.word	0x410fc270
 800591c:	e000e400 	.word	0xe000e400
 8005920:	20000f50 	.word	0x20000f50
 8005924:	20000f54 	.word	0x20000f54
 8005928:	e000ed20 	.word	0xe000ed20
 800592c:	2000000c 	.word	0x2000000c
 8005930:	e000ef34 	.word	0xe000ef34

08005934 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005934:	b480      	push	{r7}
 8005936:	b083      	sub	sp, #12
 8005938:	af00      	add	r7, sp, #0
	__asm volatile
 800593a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800593e:	f383 8811 	msr	BASEPRI, r3
 8005942:	f3bf 8f6f 	isb	sy
 8005946:	f3bf 8f4f 	dsb	sy
 800594a:	607b      	str	r3, [r7, #4]
}
 800594c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800594e:	4b0f      	ldr	r3, [pc, #60]	; (800598c <vPortEnterCritical+0x58>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	3301      	adds	r3, #1
 8005954:	4a0d      	ldr	r2, [pc, #52]	; (800598c <vPortEnterCritical+0x58>)
 8005956:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005958:	4b0c      	ldr	r3, [pc, #48]	; (800598c <vPortEnterCritical+0x58>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	2b01      	cmp	r3, #1
 800595e:	d10f      	bne.n	8005980 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005960:	4b0b      	ldr	r3, [pc, #44]	; (8005990 <vPortEnterCritical+0x5c>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	b2db      	uxtb	r3, r3
 8005966:	2b00      	cmp	r3, #0
 8005968:	d00a      	beq.n	8005980 <vPortEnterCritical+0x4c>
	__asm volatile
 800596a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800596e:	f383 8811 	msr	BASEPRI, r3
 8005972:	f3bf 8f6f 	isb	sy
 8005976:	f3bf 8f4f 	dsb	sy
 800597a:	603b      	str	r3, [r7, #0]
}
 800597c:	bf00      	nop
 800597e:	e7fe      	b.n	800597e <vPortEnterCritical+0x4a>
	}
}
 8005980:	bf00      	nop
 8005982:	370c      	adds	r7, #12
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr
 800598c:	2000000c 	.word	0x2000000c
 8005990:	e000ed04 	.word	0xe000ed04

08005994 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005994:	b480      	push	{r7}
 8005996:	b083      	sub	sp, #12
 8005998:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800599a:	4b12      	ldr	r3, [pc, #72]	; (80059e4 <vPortExitCritical+0x50>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d10a      	bne.n	80059b8 <vPortExitCritical+0x24>
	__asm volatile
 80059a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a6:	f383 8811 	msr	BASEPRI, r3
 80059aa:	f3bf 8f6f 	isb	sy
 80059ae:	f3bf 8f4f 	dsb	sy
 80059b2:	607b      	str	r3, [r7, #4]
}
 80059b4:	bf00      	nop
 80059b6:	e7fe      	b.n	80059b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80059b8:	4b0a      	ldr	r3, [pc, #40]	; (80059e4 <vPortExitCritical+0x50>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	3b01      	subs	r3, #1
 80059be:	4a09      	ldr	r2, [pc, #36]	; (80059e4 <vPortExitCritical+0x50>)
 80059c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80059c2:	4b08      	ldr	r3, [pc, #32]	; (80059e4 <vPortExitCritical+0x50>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d105      	bne.n	80059d6 <vPortExitCritical+0x42>
 80059ca:	2300      	movs	r3, #0
 80059cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	f383 8811 	msr	BASEPRI, r3
}
 80059d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80059d6:	bf00      	nop
 80059d8:	370c      	adds	r7, #12
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr
 80059e2:	bf00      	nop
 80059e4:	2000000c 	.word	0x2000000c
	...

080059f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80059f0:	f3ef 8009 	mrs	r0, PSP
 80059f4:	f3bf 8f6f 	isb	sy
 80059f8:	4b15      	ldr	r3, [pc, #84]	; (8005a50 <pxCurrentTCBConst>)
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	f01e 0f10 	tst.w	lr, #16
 8005a00:	bf08      	it	eq
 8005a02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005a06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a0a:	6010      	str	r0, [r2, #0]
 8005a0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005a10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005a14:	f380 8811 	msr	BASEPRI, r0
 8005a18:	f3bf 8f4f 	dsb	sy
 8005a1c:	f3bf 8f6f 	isb	sy
 8005a20:	f7fe ff9a 	bl	8004958 <vTaskSwitchContext>
 8005a24:	f04f 0000 	mov.w	r0, #0
 8005a28:	f380 8811 	msr	BASEPRI, r0
 8005a2c:	bc09      	pop	{r0, r3}
 8005a2e:	6819      	ldr	r1, [r3, #0]
 8005a30:	6808      	ldr	r0, [r1, #0]
 8005a32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a36:	f01e 0f10 	tst.w	lr, #16
 8005a3a:	bf08      	it	eq
 8005a3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005a40:	f380 8809 	msr	PSP, r0
 8005a44:	f3bf 8f6f 	isb	sy
 8005a48:	4770      	bx	lr
 8005a4a:	bf00      	nop
 8005a4c:	f3af 8000 	nop.w

08005a50 <pxCurrentTCBConst>:
 8005a50:	20000924 	.word	0x20000924
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005a54:	bf00      	nop
 8005a56:	bf00      	nop

08005a58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b082      	sub	sp, #8
 8005a5c:	af00      	add	r7, sp, #0
	__asm volatile
 8005a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a62:	f383 8811 	msr	BASEPRI, r3
 8005a66:	f3bf 8f6f 	isb	sy
 8005a6a:	f3bf 8f4f 	dsb	sy
 8005a6e:	607b      	str	r3, [r7, #4]
}
 8005a70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005a72:	f7fe feaf 	bl	80047d4 <xTaskIncrementTick>
 8005a76:	4603      	mov	r3, r0
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d003      	beq.n	8005a84 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005a7c:	4b06      	ldr	r3, [pc, #24]	; (8005a98 <SysTick_Handler+0x40>)
 8005a7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a82:	601a      	str	r2, [r3, #0]
 8005a84:	2300      	movs	r3, #0
 8005a86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	f383 8811 	msr	BASEPRI, r3
}
 8005a8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005a90:	bf00      	nop
 8005a92:	3708      	adds	r7, #8
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}
 8005a98:	e000ed04 	.word	0xe000ed04

08005a9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005aa0:	4b0b      	ldr	r3, [pc, #44]	; (8005ad0 <vPortSetupTimerInterrupt+0x34>)
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005aa6:	4b0b      	ldr	r3, [pc, #44]	; (8005ad4 <vPortSetupTimerInterrupt+0x38>)
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005aac:	4b0a      	ldr	r3, [pc, #40]	; (8005ad8 <vPortSetupTimerInterrupt+0x3c>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a0a      	ldr	r2, [pc, #40]	; (8005adc <vPortSetupTimerInterrupt+0x40>)
 8005ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ab6:	099b      	lsrs	r3, r3, #6
 8005ab8:	4a09      	ldr	r2, [pc, #36]	; (8005ae0 <vPortSetupTimerInterrupt+0x44>)
 8005aba:	3b01      	subs	r3, #1
 8005abc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005abe:	4b04      	ldr	r3, [pc, #16]	; (8005ad0 <vPortSetupTimerInterrupt+0x34>)
 8005ac0:	2207      	movs	r2, #7
 8005ac2:	601a      	str	r2, [r3, #0]
}
 8005ac4:	bf00      	nop
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr
 8005ace:	bf00      	nop
 8005ad0:	e000e010 	.word	0xe000e010
 8005ad4:	e000e018 	.word	0xe000e018
 8005ad8:	20000000 	.word	0x20000000
 8005adc:	10624dd3 	.word	0x10624dd3
 8005ae0:	e000e014 	.word	0xe000e014

08005ae4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005ae4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005af4 <vPortEnableVFP+0x10>
 8005ae8:	6801      	ldr	r1, [r0, #0]
 8005aea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005aee:	6001      	str	r1, [r0, #0]
 8005af0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005af2:	bf00      	nop
 8005af4:	e000ed88 	.word	0xe000ed88

08005af8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005af8:	b480      	push	{r7}
 8005afa:	b085      	sub	sp, #20
 8005afc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005afe:	f3ef 8305 	mrs	r3, IPSR
 8005b02:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2b0f      	cmp	r3, #15
 8005b08:	d914      	bls.n	8005b34 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005b0a:	4a17      	ldr	r2, [pc, #92]	; (8005b68 <vPortValidateInterruptPriority+0x70>)
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	4413      	add	r3, r2
 8005b10:	781b      	ldrb	r3, [r3, #0]
 8005b12:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005b14:	4b15      	ldr	r3, [pc, #84]	; (8005b6c <vPortValidateInterruptPriority+0x74>)
 8005b16:	781b      	ldrb	r3, [r3, #0]
 8005b18:	7afa      	ldrb	r2, [r7, #11]
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	d20a      	bcs.n	8005b34 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b22:	f383 8811 	msr	BASEPRI, r3
 8005b26:	f3bf 8f6f 	isb	sy
 8005b2a:	f3bf 8f4f 	dsb	sy
 8005b2e:	607b      	str	r3, [r7, #4]
}
 8005b30:	bf00      	nop
 8005b32:	e7fe      	b.n	8005b32 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005b34:	4b0e      	ldr	r3, [pc, #56]	; (8005b70 <vPortValidateInterruptPriority+0x78>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005b3c:	4b0d      	ldr	r3, [pc, #52]	; (8005b74 <vPortValidateInterruptPriority+0x7c>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d90a      	bls.n	8005b5a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b48:	f383 8811 	msr	BASEPRI, r3
 8005b4c:	f3bf 8f6f 	isb	sy
 8005b50:	f3bf 8f4f 	dsb	sy
 8005b54:	603b      	str	r3, [r7, #0]
}
 8005b56:	bf00      	nop
 8005b58:	e7fe      	b.n	8005b58 <vPortValidateInterruptPriority+0x60>
	}
 8005b5a:	bf00      	nop
 8005b5c:	3714      	adds	r7, #20
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b64:	4770      	bx	lr
 8005b66:	bf00      	nop
 8005b68:	e000e3f0 	.word	0xe000e3f0
 8005b6c:	20000f50 	.word	0x20000f50
 8005b70:	e000ed0c 	.word	0xe000ed0c
 8005b74:	20000f54 	.word	0x20000f54

08005b78 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b08a      	sub	sp, #40	; 0x28
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005b80:	2300      	movs	r3, #0
 8005b82:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005b84:	f7fe fd54 	bl	8004630 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005b88:	4b58      	ldr	r3, [pc, #352]	; (8005cec <pvPortMalloc+0x174>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d101      	bne.n	8005b94 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005b90:	f000 f910 	bl	8005db4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005b94:	4b56      	ldr	r3, [pc, #344]	; (8005cf0 <pvPortMalloc+0x178>)
 8005b96:	681a      	ldr	r2, [r3, #0]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	4013      	ands	r3, r2
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	f040 808e 	bne.w	8005cbe <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d01d      	beq.n	8005be4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005ba8:	2208      	movs	r2, #8
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	4413      	add	r3, r2
 8005bae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f003 0307 	and.w	r3, r3, #7
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d014      	beq.n	8005be4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f023 0307 	bic.w	r3, r3, #7
 8005bc0:	3308      	adds	r3, #8
 8005bc2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	f003 0307 	and.w	r3, r3, #7
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d00a      	beq.n	8005be4 <pvPortMalloc+0x6c>
	__asm volatile
 8005bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd2:	f383 8811 	msr	BASEPRI, r3
 8005bd6:	f3bf 8f6f 	isb	sy
 8005bda:	f3bf 8f4f 	dsb	sy
 8005bde:	617b      	str	r3, [r7, #20]
}
 8005be0:	bf00      	nop
 8005be2:	e7fe      	b.n	8005be2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d069      	beq.n	8005cbe <pvPortMalloc+0x146>
 8005bea:	4b42      	ldr	r3, [pc, #264]	; (8005cf4 <pvPortMalloc+0x17c>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	687a      	ldr	r2, [r7, #4]
 8005bf0:	429a      	cmp	r2, r3
 8005bf2:	d864      	bhi.n	8005cbe <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005bf4:	4b40      	ldr	r3, [pc, #256]	; (8005cf8 <pvPortMalloc+0x180>)
 8005bf6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005bf8:	4b3f      	ldr	r3, [pc, #252]	; (8005cf8 <pvPortMalloc+0x180>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005bfe:	e004      	b.n	8005c0a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c02:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	687a      	ldr	r2, [r7, #4]
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d903      	bls.n	8005c1c <pvPortMalloc+0xa4>
 8005c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d1f1      	bne.n	8005c00 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005c1c:	4b33      	ldr	r3, [pc, #204]	; (8005cec <pvPortMalloc+0x174>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d04b      	beq.n	8005cbe <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005c26:	6a3b      	ldr	r3, [r7, #32]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	2208      	movs	r2, #8
 8005c2c:	4413      	add	r3, r2
 8005c2e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	6a3b      	ldr	r3, [r7, #32]
 8005c36:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3a:	685a      	ldr	r2, [r3, #4]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	1ad2      	subs	r2, r2, r3
 8005c40:	2308      	movs	r3, #8
 8005c42:	005b      	lsls	r3, r3, #1
 8005c44:	429a      	cmp	r2, r3
 8005c46:	d91f      	bls.n	8005c88 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005c48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	4413      	add	r3, r2
 8005c4e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c50:	69bb      	ldr	r3, [r7, #24]
 8005c52:	f003 0307 	and.w	r3, r3, #7
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d00a      	beq.n	8005c70 <pvPortMalloc+0xf8>
	__asm volatile
 8005c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c5e:	f383 8811 	msr	BASEPRI, r3
 8005c62:	f3bf 8f6f 	isb	sy
 8005c66:	f3bf 8f4f 	dsb	sy
 8005c6a:	613b      	str	r3, [r7, #16]
}
 8005c6c:	bf00      	nop
 8005c6e:	e7fe      	b.n	8005c6e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c72:	685a      	ldr	r2, [r3, #4]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	1ad2      	subs	r2, r2, r3
 8005c78:	69bb      	ldr	r3, [r7, #24]
 8005c7a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7e:	687a      	ldr	r2, [r7, #4]
 8005c80:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005c82:	69b8      	ldr	r0, [r7, #24]
 8005c84:	f000 f8f8 	bl	8005e78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005c88:	4b1a      	ldr	r3, [pc, #104]	; (8005cf4 <pvPortMalloc+0x17c>)
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	1ad3      	subs	r3, r2, r3
 8005c92:	4a18      	ldr	r2, [pc, #96]	; (8005cf4 <pvPortMalloc+0x17c>)
 8005c94:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005c96:	4b17      	ldr	r3, [pc, #92]	; (8005cf4 <pvPortMalloc+0x17c>)
 8005c98:	681a      	ldr	r2, [r3, #0]
 8005c9a:	4b18      	ldr	r3, [pc, #96]	; (8005cfc <pvPortMalloc+0x184>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	d203      	bcs.n	8005caa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005ca2:	4b14      	ldr	r3, [pc, #80]	; (8005cf4 <pvPortMalloc+0x17c>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a15      	ldr	r2, [pc, #84]	; (8005cfc <pvPortMalloc+0x184>)
 8005ca8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cac:	685a      	ldr	r2, [r3, #4]
 8005cae:	4b10      	ldr	r3, [pc, #64]	; (8005cf0 <pvPortMalloc+0x178>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	431a      	orrs	r2, r3
 8005cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cba:	2200      	movs	r2, #0
 8005cbc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005cbe:	f7fe fcc5 	bl	800464c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005cc2:	69fb      	ldr	r3, [r7, #28]
 8005cc4:	f003 0307 	and.w	r3, r3, #7
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d00a      	beq.n	8005ce2 <pvPortMalloc+0x16a>
	__asm volatile
 8005ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd0:	f383 8811 	msr	BASEPRI, r3
 8005cd4:	f3bf 8f6f 	isb	sy
 8005cd8:	f3bf 8f4f 	dsb	sy
 8005cdc:	60fb      	str	r3, [r7, #12]
}
 8005cde:	bf00      	nop
 8005ce0:	e7fe      	b.n	8005ce0 <pvPortMalloc+0x168>
	return pvReturn;
 8005ce2:	69fb      	ldr	r3, [r7, #28]
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	3728      	adds	r7, #40	; 0x28
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}
 8005cec:	20001b60 	.word	0x20001b60
 8005cf0:	20001b6c 	.word	0x20001b6c
 8005cf4:	20001b64 	.word	0x20001b64
 8005cf8:	20001b58 	.word	0x20001b58
 8005cfc:	20001b68 	.word	0x20001b68

08005d00 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b086      	sub	sp, #24
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d048      	beq.n	8005da4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005d12:	2308      	movs	r3, #8
 8005d14:	425b      	negs	r3, r3
 8005d16:	697a      	ldr	r2, [r7, #20]
 8005d18:	4413      	add	r3, r2
 8005d1a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	685a      	ldr	r2, [r3, #4]
 8005d24:	4b21      	ldr	r3, [pc, #132]	; (8005dac <vPortFree+0xac>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4013      	ands	r3, r2
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d10a      	bne.n	8005d44 <vPortFree+0x44>
	__asm volatile
 8005d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d32:	f383 8811 	msr	BASEPRI, r3
 8005d36:	f3bf 8f6f 	isb	sy
 8005d3a:	f3bf 8f4f 	dsb	sy
 8005d3e:	60fb      	str	r3, [r7, #12]
}
 8005d40:	bf00      	nop
 8005d42:	e7fe      	b.n	8005d42 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d00a      	beq.n	8005d62 <vPortFree+0x62>
	__asm volatile
 8005d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d50:	f383 8811 	msr	BASEPRI, r3
 8005d54:	f3bf 8f6f 	isb	sy
 8005d58:	f3bf 8f4f 	dsb	sy
 8005d5c:	60bb      	str	r3, [r7, #8]
}
 8005d5e:	bf00      	nop
 8005d60:	e7fe      	b.n	8005d60 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	685a      	ldr	r2, [r3, #4]
 8005d66:	4b11      	ldr	r3, [pc, #68]	; (8005dac <vPortFree+0xac>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4013      	ands	r3, r2
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d019      	beq.n	8005da4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d115      	bne.n	8005da4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	685a      	ldr	r2, [r3, #4]
 8005d7c:	4b0b      	ldr	r3, [pc, #44]	; (8005dac <vPortFree+0xac>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	43db      	mvns	r3, r3
 8005d82:	401a      	ands	r2, r3
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005d88:	f7fe fc52 	bl	8004630 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	685a      	ldr	r2, [r3, #4]
 8005d90:	4b07      	ldr	r3, [pc, #28]	; (8005db0 <vPortFree+0xb0>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4413      	add	r3, r2
 8005d96:	4a06      	ldr	r2, [pc, #24]	; (8005db0 <vPortFree+0xb0>)
 8005d98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005d9a:	6938      	ldr	r0, [r7, #16]
 8005d9c:	f000 f86c 	bl	8005e78 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005da0:	f7fe fc54 	bl	800464c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005da4:	bf00      	nop
 8005da6:	3718      	adds	r7, #24
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}
 8005dac:	20001b6c 	.word	0x20001b6c
 8005db0:	20001b64 	.word	0x20001b64

08005db4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005db4:	b480      	push	{r7}
 8005db6:	b085      	sub	sp, #20
 8005db8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005dba:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005dbe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005dc0:	4b27      	ldr	r3, [pc, #156]	; (8005e60 <prvHeapInit+0xac>)
 8005dc2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f003 0307 	and.w	r3, r3, #7
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d00c      	beq.n	8005de8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	3307      	adds	r3, #7
 8005dd2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	f023 0307 	bic.w	r3, r3, #7
 8005dda:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005ddc:	68ba      	ldr	r2, [r7, #8]
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	1ad3      	subs	r3, r2, r3
 8005de2:	4a1f      	ldr	r2, [pc, #124]	; (8005e60 <prvHeapInit+0xac>)
 8005de4:	4413      	add	r3, r2
 8005de6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005dec:	4a1d      	ldr	r2, [pc, #116]	; (8005e64 <prvHeapInit+0xb0>)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005df2:	4b1c      	ldr	r3, [pc, #112]	; (8005e64 <prvHeapInit+0xb0>)
 8005df4:	2200      	movs	r2, #0
 8005df6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	68ba      	ldr	r2, [r7, #8]
 8005dfc:	4413      	add	r3, r2
 8005dfe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005e00:	2208      	movs	r2, #8
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	1a9b      	subs	r3, r3, r2
 8005e06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	f023 0307 	bic.w	r3, r3, #7
 8005e0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	4a15      	ldr	r2, [pc, #84]	; (8005e68 <prvHeapInit+0xb4>)
 8005e14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005e16:	4b14      	ldr	r3, [pc, #80]	; (8005e68 <prvHeapInit+0xb4>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005e1e:	4b12      	ldr	r3, [pc, #72]	; (8005e68 <prvHeapInit+0xb4>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	2200      	movs	r2, #0
 8005e24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	68fa      	ldr	r2, [r7, #12]
 8005e2e:	1ad2      	subs	r2, r2, r3
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005e34:	4b0c      	ldr	r3, [pc, #48]	; (8005e68 <prvHeapInit+0xb4>)
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	4a0a      	ldr	r2, [pc, #40]	; (8005e6c <prvHeapInit+0xb8>)
 8005e42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	4a09      	ldr	r2, [pc, #36]	; (8005e70 <prvHeapInit+0xbc>)
 8005e4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005e4c:	4b09      	ldr	r3, [pc, #36]	; (8005e74 <prvHeapInit+0xc0>)
 8005e4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005e52:	601a      	str	r2, [r3, #0]
}
 8005e54:	bf00      	nop
 8005e56:	3714      	adds	r7, #20
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr
 8005e60:	20000f58 	.word	0x20000f58
 8005e64:	20001b58 	.word	0x20001b58
 8005e68:	20001b60 	.word	0x20001b60
 8005e6c:	20001b68 	.word	0x20001b68
 8005e70:	20001b64 	.word	0x20001b64
 8005e74:	20001b6c 	.word	0x20001b6c

08005e78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b085      	sub	sp, #20
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005e80:	4b28      	ldr	r3, [pc, #160]	; (8005f24 <prvInsertBlockIntoFreeList+0xac>)
 8005e82:	60fb      	str	r3, [r7, #12]
 8005e84:	e002      	b.n	8005e8c <prvInsertBlockIntoFreeList+0x14>
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	60fb      	str	r3, [r7, #12]
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	687a      	ldr	r2, [r7, #4]
 8005e92:	429a      	cmp	r2, r3
 8005e94:	d8f7      	bhi.n	8005e86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	68ba      	ldr	r2, [r7, #8]
 8005ea0:	4413      	add	r3, r2
 8005ea2:	687a      	ldr	r2, [r7, #4]
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	d108      	bne.n	8005eba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	685a      	ldr	r2, [r3, #4]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	441a      	add	r2, r3
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	68ba      	ldr	r2, [r7, #8]
 8005ec4:	441a      	add	r2, r3
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	d118      	bne.n	8005f00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681a      	ldr	r2, [r3, #0]
 8005ed2:	4b15      	ldr	r3, [pc, #84]	; (8005f28 <prvInsertBlockIntoFreeList+0xb0>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	d00d      	beq.n	8005ef6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	685a      	ldr	r2, [r3, #4]
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	441a      	add	r2, r3
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	601a      	str	r2, [r3, #0]
 8005ef4:	e008      	b.n	8005f08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005ef6:	4b0c      	ldr	r3, [pc, #48]	; (8005f28 <prvInsertBlockIntoFreeList+0xb0>)
 8005ef8:	681a      	ldr	r2, [r3, #0]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	601a      	str	r2, [r3, #0]
 8005efe:	e003      	b.n	8005f08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005f08:	68fa      	ldr	r2, [r7, #12]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	d002      	beq.n	8005f16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	687a      	ldr	r2, [r7, #4]
 8005f14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f16:	bf00      	nop
 8005f18:	3714      	adds	r7, #20
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr
 8005f22:	bf00      	nop
 8005f24:	20001b58 	.word	0x20001b58
 8005f28:	20001b60 	.word	0x20001b60

08005f2c <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8005f30:	4803      	ldr	r0, [pc, #12]	; (8005f40 <_cbSendSystemDesc+0x14>)
 8005f32:	f001 fa09 	bl	8007348 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8005f36:	4803      	ldr	r0, [pc, #12]	; (8005f44 <_cbSendSystemDesc+0x18>)
 8005f38:	f001 fa06 	bl	8007348 <SEGGER_SYSVIEW_SendSysDesc>
}
 8005f3c:	bf00      	nop
 8005f3e:	bd80      	pop	{r7, pc}
 8005f40:	08007ae8 	.word	0x08007ae8
 8005f44:	08007b1c 	.word	0x08007b1c

08005f48 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8005f4c:	4b06      	ldr	r3, [pc, #24]	; (8005f68 <SEGGER_SYSVIEW_Conf+0x20>)
 8005f4e:	6818      	ldr	r0, [r3, #0]
 8005f50:	4b05      	ldr	r3, [pc, #20]	; (8005f68 <SEGGER_SYSVIEW_Conf+0x20>)
 8005f52:	6819      	ldr	r1, [r3, #0]
 8005f54:	4b05      	ldr	r3, [pc, #20]	; (8005f6c <SEGGER_SYSVIEW_Conf+0x24>)
 8005f56:	4a06      	ldr	r2, [pc, #24]	; (8005f70 <SEGGER_SYSVIEW_Conf+0x28>)
 8005f58:	f000 fd74 	bl	8006a44 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8005f5c:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8005f60:	f000 fdb4 	bl	8006acc <SEGGER_SYSVIEW_SetRAMBase>
}
 8005f64:	bf00      	nop
 8005f66:	bd80      	pop	{r7, pc}
 8005f68:	20000000 	.word	0x20000000
 8005f6c:	08005f2d 	.word	0x08005f2d
 8005f70:	08007bd8 	.word	0x08007bd8

08005f74 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8005f74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f76:	b085      	sub	sp, #20
 8005f78:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	607b      	str	r3, [r7, #4]
 8005f7e:	e048      	b.n	8006012 <_cbSendTaskList+0x9e>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
 8005f80:	4929      	ldr	r1, [pc, #164]	; (8006028 <_cbSendTaskList+0xb4>)
 8005f82:	687a      	ldr	r2, [r7, #4]
 8005f84:	4613      	mov	r3, r2
 8005f86:	009b      	lsls	r3, r3, #2
 8005f88:	4413      	add	r3, r2
 8005f8a:	009b      	lsls	r3, r3, #2
 8005f8c:	440b      	add	r3, r1
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4618      	mov	r0, r3
 8005f92:	f7fe ff35 	bl	8004e00 <uxTaskGetStackHighWaterMark>
 8005f96:	4601      	mov	r1, r0
 8005f98:	4823      	ldr	r0, [pc, #140]	; (8006028 <_cbSendTaskList+0xb4>)
 8005f9a:	687a      	ldr	r2, [r7, #4]
 8005f9c:	4613      	mov	r3, r2
 8005f9e:	009b      	lsls	r3, r3, #2
 8005fa0:	4413      	add	r3, r2
 8005fa2:	009b      	lsls	r3, r3, #2
 8005fa4:	4403      	add	r3, r0
 8005fa6:	3310      	adds	r3, #16
 8005fa8:	6019      	str	r1, [r3, #0]
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8005faa:	491f      	ldr	r1, [pc, #124]	; (8006028 <_cbSendTaskList+0xb4>)
 8005fac:	687a      	ldr	r2, [r7, #4]
 8005fae:	4613      	mov	r3, r2
 8005fb0:	009b      	lsls	r3, r3, #2
 8005fb2:	4413      	add	r3, r2
 8005fb4:	009b      	lsls	r3, r3, #2
 8005fb6:	440b      	add	r3, r1
 8005fb8:	6818      	ldr	r0, [r3, #0]
 8005fba:	491b      	ldr	r1, [pc, #108]	; (8006028 <_cbSendTaskList+0xb4>)
 8005fbc:	687a      	ldr	r2, [r7, #4]
 8005fbe:	4613      	mov	r3, r2
 8005fc0:	009b      	lsls	r3, r3, #2
 8005fc2:	4413      	add	r3, r2
 8005fc4:	009b      	lsls	r3, r3, #2
 8005fc6:	440b      	add	r3, r1
 8005fc8:	3304      	adds	r3, #4
 8005fca:	6819      	ldr	r1, [r3, #0]
 8005fcc:	4c16      	ldr	r4, [pc, #88]	; (8006028 <_cbSendTaskList+0xb4>)
 8005fce:	687a      	ldr	r2, [r7, #4]
 8005fd0:	4613      	mov	r3, r2
 8005fd2:	009b      	lsls	r3, r3, #2
 8005fd4:	4413      	add	r3, r2
 8005fd6:	009b      	lsls	r3, r3, #2
 8005fd8:	4423      	add	r3, r4
 8005fda:	3308      	adds	r3, #8
 8005fdc:	681c      	ldr	r4, [r3, #0]
 8005fde:	4d12      	ldr	r5, [pc, #72]	; (8006028 <_cbSendTaskList+0xb4>)
 8005fe0:	687a      	ldr	r2, [r7, #4]
 8005fe2:	4613      	mov	r3, r2
 8005fe4:	009b      	lsls	r3, r3, #2
 8005fe6:	4413      	add	r3, r2
 8005fe8:	009b      	lsls	r3, r3, #2
 8005fea:	442b      	add	r3, r5
 8005fec:	330c      	adds	r3, #12
 8005fee:	681d      	ldr	r5, [r3, #0]
 8005ff0:	4e0d      	ldr	r6, [pc, #52]	; (8006028 <_cbSendTaskList+0xb4>)
 8005ff2:	687a      	ldr	r2, [r7, #4]
 8005ff4:	4613      	mov	r3, r2
 8005ff6:	009b      	lsls	r3, r3, #2
 8005ff8:	4413      	add	r3, r2
 8005ffa:	009b      	lsls	r3, r3, #2
 8005ffc:	4433      	add	r3, r6
 8005ffe:	3310      	adds	r3, #16
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	9300      	str	r3, [sp, #0]
 8006004:	462b      	mov	r3, r5
 8006006:	4622      	mov	r2, r4
 8006008:	f000 f8be 	bl	8006188 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	3301      	adds	r3, #1
 8006010:	607b      	str	r3, [r7, #4]
 8006012:	4b06      	ldr	r3, [pc, #24]	; (800602c <_cbSendTaskList+0xb8>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	687a      	ldr	r2, [r7, #4]
 8006018:	429a      	cmp	r2, r3
 800601a:	d3b1      	bcc.n	8005f80 <_cbSendTaskList+0xc>
  }
}
 800601c:	bf00      	nop
 800601e:	bf00      	nop
 8006020:	370c      	adds	r7, #12
 8006022:	46bd      	mov	sp, r7
 8006024:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006026:	bf00      	nop
 8006028:	20001b70 	.word	0x20001b70
 800602c:	20001c10 	.word	0x20001c10

08006030 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8006030:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006034:	b082      	sub	sp, #8
 8006036:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8006038:	f7fe fbba 	bl	80047b0 <xTaskGetTickCountFromISR>
 800603c:	4603      	mov	r3, r0
 800603e:	2200      	movs	r2, #0
 8006040:	469a      	mov	sl, r3
 8006042:	4693      	mov	fp, r2
 8006044:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8006048:	e9d7 0100 	ldrd	r0, r1, [r7]
 800604c:	4602      	mov	r2, r0
 800604e:	460b      	mov	r3, r1
 8006050:	f04f 0a00 	mov.w	sl, #0
 8006054:	f04f 0b00 	mov.w	fp, #0
 8006058:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 800605c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8006060:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8006064:	4652      	mov	r2, sl
 8006066:	465b      	mov	r3, fp
 8006068:	1a14      	subs	r4, r2, r0
 800606a:	eb63 0501 	sbc.w	r5, r3, r1
 800606e:	f04f 0200 	mov.w	r2, #0
 8006072:	f04f 0300 	mov.w	r3, #0
 8006076:	00ab      	lsls	r3, r5, #2
 8006078:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800607c:	00a2      	lsls	r2, r4, #2
 800607e:	4614      	mov	r4, r2
 8006080:	461d      	mov	r5, r3
 8006082:	eb14 0800 	adds.w	r8, r4, r0
 8006086:	eb45 0901 	adc.w	r9, r5, r1
 800608a:	f04f 0200 	mov.w	r2, #0
 800608e:	f04f 0300 	mov.w	r3, #0
 8006092:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006096:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800609a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800609e:	4690      	mov	r8, r2
 80060a0:	4699      	mov	r9, r3
 80060a2:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 80060a6:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80060aa:	4610      	mov	r0, r2
 80060ac:	4619      	mov	r1, r3
 80060ae:	3708      	adds	r7, #8
 80060b0:	46bd      	mov	sp, r7
 80060b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080060b8 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b086      	sub	sp, #24
 80060bc:	af02      	add	r7, sp, #8
 80060be:	60f8      	str	r0, [r7, #12]
 80060c0:	60b9      	str	r1, [r7, #8]
 80060c2:	607a      	str	r2, [r7, #4]
 80060c4:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80060c6:	2205      	movs	r2, #5
 80060c8:	492b      	ldr	r1, [pc, #172]	; (8006178 <SYSVIEW_AddTask+0xc0>)
 80060ca:	68b8      	ldr	r0, [r7, #8]
 80060cc:	f001 fbec 	bl	80078a8 <memcmp>
 80060d0:	4603      	mov	r3, r0
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d04b      	beq.n	800616e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80060d6:	4b29      	ldr	r3, [pc, #164]	; (800617c <SYSVIEW_AddTask+0xc4>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	2b07      	cmp	r3, #7
 80060dc:	d903      	bls.n	80060e6 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80060de:	4828      	ldr	r0, [pc, #160]	; (8006180 <SYSVIEW_AddTask+0xc8>)
 80060e0:	f001 fb60 	bl	80077a4 <SEGGER_SYSVIEW_Warn>
    return;
 80060e4:	e044      	b.n	8006170 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80060e6:	4b25      	ldr	r3, [pc, #148]	; (800617c <SYSVIEW_AddTask+0xc4>)
 80060e8:	681a      	ldr	r2, [r3, #0]
 80060ea:	4926      	ldr	r1, [pc, #152]	; (8006184 <SYSVIEW_AddTask+0xcc>)
 80060ec:	4613      	mov	r3, r2
 80060ee:	009b      	lsls	r3, r3, #2
 80060f0:	4413      	add	r3, r2
 80060f2:	009b      	lsls	r3, r3, #2
 80060f4:	440b      	add	r3, r1
 80060f6:	68fa      	ldr	r2, [r7, #12]
 80060f8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80060fa:	4b20      	ldr	r3, [pc, #128]	; (800617c <SYSVIEW_AddTask+0xc4>)
 80060fc:	681a      	ldr	r2, [r3, #0]
 80060fe:	4921      	ldr	r1, [pc, #132]	; (8006184 <SYSVIEW_AddTask+0xcc>)
 8006100:	4613      	mov	r3, r2
 8006102:	009b      	lsls	r3, r3, #2
 8006104:	4413      	add	r3, r2
 8006106:	009b      	lsls	r3, r3, #2
 8006108:	440b      	add	r3, r1
 800610a:	3304      	adds	r3, #4
 800610c:	68ba      	ldr	r2, [r7, #8]
 800610e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8006110:	4b1a      	ldr	r3, [pc, #104]	; (800617c <SYSVIEW_AddTask+0xc4>)
 8006112:	681a      	ldr	r2, [r3, #0]
 8006114:	491b      	ldr	r1, [pc, #108]	; (8006184 <SYSVIEW_AddTask+0xcc>)
 8006116:	4613      	mov	r3, r2
 8006118:	009b      	lsls	r3, r3, #2
 800611a:	4413      	add	r3, r2
 800611c:	009b      	lsls	r3, r3, #2
 800611e:	440b      	add	r3, r1
 8006120:	3308      	adds	r3, #8
 8006122:	687a      	ldr	r2, [r7, #4]
 8006124:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8006126:	4b15      	ldr	r3, [pc, #84]	; (800617c <SYSVIEW_AddTask+0xc4>)
 8006128:	681a      	ldr	r2, [r3, #0]
 800612a:	4916      	ldr	r1, [pc, #88]	; (8006184 <SYSVIEW_AddTask+0xcc>)
 800612c:	4613      	mov	r3, r2
 800612e:	009b      	lsls	r3, r3, #2
 8006130:	4413      	add	r3, r2
 8006132:	009b      	lsls	r3, r3, #2
 8006134:	440b      	add	r3, r1
 8006136:	330c      	adds	r3, #12
 8006138:	683a      	ldr	r2, [r7, #0]
 800613a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800613c:	4b0f      	ldr	r3, [pc, #60]	; (800617c <SYSVIEW_AddTask+0xc4>)
 800613e:	681a      	ldr	r2, [r3, #0]
 8006140:	4910      	ldr	r1, [pc, #64]	; (8006184 <SYSVIEW_AddTask+0xcc>)
 8006142:	4613      	mov	r3, r2
 8006144:	009b      	lsls	r3, r3, #2
 8006146:	4413      	add	r3, r2
 8006148:	009b      	lsls	r3, r3, #2
 800614a:	440b      	add	r3, r1
 800614c:	3310      	adds	r3, #16
 800614e:	69ba      	ldr	r2, [r7, #24]
 8006150:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8006152:	4b0a      	ldr	r3, [pc, #40]	; (800617c <SYSVIEW_AddTask+0xc4>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	3301      	adds	r3, #1
 8006158:	4a08      	ldr	r2, [pc, #32]	; (800617c <SYSVIEW_AddTask+0xc4>)
 800615a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800615c:	69bb      	ldr	r3, [r7, #24]
 800615e:	9300      	str	r3, [sp, #0]
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	687a      	ldr	r2, [r7, #4]
 8006164:	68b9      	ldr	r1, [r7, #8]
 8006166:	68f8      	ldr	r0, [r7, #12]
 8006168:	f000 f80e 	bl	8006188 <SYSVIEW_SendTaskInfo>
 800616c:	e000      	b.n	8006170 <SYSVIEW_AddTask+0xb8>
    return;
 800616e:	bf00      	nop

}
 8006170:	3710      	adds	r7, #16
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}
 8006176:	bf00      	nop
 8006178:	08007b2c 	.word	0x08007b2c
 800617c:	20001c10 	.word	0x20001c10
 8006180:	08007b34 	.word	0x08007b34
 8006184:	20001b70 	.word	0x20001b70

08006188 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8006188:	b580      	push	{r7, lr}
 800618a:	b08a      	sub	sp, #40	; 0x28
 800618c:	af00      	add	r7, sp, #0
 800618e:	60f8      	str	r0, [r7, #12]
 8006190:	60b9      	str	r1, [r7, #8]
 8006192:	607a      	str	r2, [r7, #4]
 8006194:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8006196:	f107 0314 	add.w	r3, r7, #20
 800619a:	2214      	movs	r2, #20
 800619c:	2100      	movs	r1, #0
 800619e:	4618      	mov	r0, r3
 80061a0:	f001 fba0 	bl	80078e4 <memset>
  TaskInfo.TaskID     = TaskID;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 80061b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b6:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80061b8:	f107 0314 	add.w	r3, r7, #20
 80061bc:	4618      	mov	r0, r3
 80061be:	f000 ffcb 	bl	8007158 <SEGGER_SYSVIEW_SendTaskInfo>
}
 80061c2:	bf00      	nop
 80061c4:	3728      	adds	r7, #40	; 0x28
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}
	...

080061cc <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b082      	sub	sp, #8
 80061d0:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80061d2:	4b26      	ldr	r3, [pc, #152]	; (800626c <_DoInit+0xa0>)
 80061d4:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 80061d6:	22a8      	movs	r2, #168	; 0xa8
 80061d8:	2100      	movs	r1, #0
 80061da:	6838      	ldr	r0, [r7, #0]
 80061dc:	f001 fb82 	bl	80078e4 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	2203      	movs	r2, #3
 80061e4:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	2203      	movs	r2, #3
 80061ea:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	4a20      	ldr	r2, [pc, #128]	; (8006270 <_DoInit+0xa4>)
 80061f0:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	4a1f      	ldr	r2, [pc, #124]	; (8006274 <_DoInit+0xa8>)
 80061f6:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80061fe:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	2200      	movs	r2, #0
 8006204:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	2200      	movs	r2, #0
 800620a:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	2200      	movs	r2, #0
 8006210:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	4a16      	ldr	r2, [pc, #88]	; (8006270 <_DoInit+0xa4>)
 8006216:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	4a17      	ldr	r2, [pc, #92]	; (8006278 <_DoInit+0xac>)
 800621c:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	2210      	movs	r2, #16
 8006222:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	2200      	movs	r2, #0
 8006228:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	2200      	movs	r2, #0
 800622e:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	2200      	movs	r2, #0
 8006234:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8006236:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800623a:	2300      	movs	r3, #0
 800623c:	607b      	str	r3, [r7, #4]
 800623e:	e00c      	b.n	800625a <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f1c3 030f 	rsb	r3, r3, #15
 8006246:	4a0d      	ldr	r2, [pc, #52]	; (800627c <_DoInit+0xb0>)
 8006248:	5cd1      	ldrb	r1, [r2, r3]
 800624a:	683a      	ldr	r2, [r7, #0]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	4413      	add	r3, r2
 8006250:	460a      	mov	r2, r1
 8006252:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	3301      	adds	r3, #1
 8006258:	607b      	str	r3, [r7, #4]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2b0f      	cmp	r3, #15
 800625e:	d9ef      	bls.n	8006240 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8006260:	f3bf 8f5f 	dmb	sy
}
 8006264:	bf00      	nop
 8006266:	3708      	adds	r7, #8
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}
 800626c:	20001c14 	.word	0x20001c14
 8006270:	08007b84 	.word	0x08007b84
 8006274:	20001cbc 	.word	0x20001cbc
 8006278:	200020bc 	.word	0x200020bc
 800627c:	08007be0 	.word	0x08007be0

08006280 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8006280:	b580      	push	{r7, lr}
 8006282:	b08c      	sub	sp, #48	; 0x30
 8006284:	af00      	add	r7, sp, #0
 8006286:	60f8      	str	r0, [r7, #12]
 8006288:	60b9      	str	r1, [r7, #8]
 800628a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 800628c:	4b3e      	ldr	r3, [pc, #248]	; (8006388 <SEGGER_RTT_ReadNoLock+0x108>)
 800628e:	623b      	str	r3, [r7, #32]
 8006290:	6a3b      	ldr	r3, [r7, #32]
 8006292:	781b      	ldrb	r3, [r3, #0]
 8006294:	b2db      	uxtb	r3, r3
 8006296:	2b00      	cmp	r3, #0
 8006298:	d101      	bne.n	800629e <SEGGER_RTT_ReadNoLock+0x1e>
 800629a:	f7ff ff97 	bl	80061cc <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800629e:	68fa      	ldr	r2, [r7, #12]
 80062a0:	4613      	mov	r3, r2
 80062a2:	005b      	lsls	r3, r3, #1
 80062a4:	4413      	add	r3, r2
 80062a6:	00db      	lsls	r3, r3, #3
 80062a8:	3360      	adds	r3, #96	; 0x60
 80062aa:	4a37      	ldr	r2, [pc, #220]	; (8006388 <SEGGER_RTT_ReadNoLock+0x108>)
 80062ac:	4413      	add	r3, r2
 80062ae:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80062b4:	69fb      	ldr	r3, [r7, #28]
 80062b6:	691b      	ldr	r3, [r3, #16]
 80062b8:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80062ba:	69fb      	ldr	r3, [r7, #28]
 80062bc:	68db      	ldr	r3, [r3, #12]
 80062be:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80062c0:	2300      	movs	r3, #0
 80062c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80062c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062c6:	69bb      	ldr	r3, [r7, #24]
 80062c8:	429a      	cmp	r2, r3
 80062ca:	d92b      	bls.n	8006324 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80062cc:	69fb      	ldr	r3, [r7, #28]
 80062ce:	689a      	ldr	r2, [r3, #8]
 80062d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d2:	1ad3      	subs	r3, r2, r3
 80062d4:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80062d6:	697a      	ldr	r2, [r7, #20]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	4293      	cmp	r3, r2
 80062dc:	bf28      	it	cs
 80062de:	4613      	movcs	r3, r2
 80062e0:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80062e2:	69fb      	ldr	r3, [r7, #28]
 80062e4:	685a      	ldr	r2, [r3, #4]
 80062e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062e8:	4413      	add	r3, r2
 80062ea:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80062ec:	697a      	ldr	r2, [r7, #20]
 80062ee:	6939      	ldr	r1, [r7, #16]
 80062f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80062f2:	f001 fae9 	bl	80078c8 <memcpy>
    NumBytesRead += NumBytesRem;
 80062f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	4413      	add	r3, r2
 80062fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80062fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	4413      	add	r3, r2
 8006304:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8006306:	687a      	ldr	r2, [r7, #4]
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	1ad3      	subs	r3, r2, r3
 800630c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800630e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	4413      	add	r3, r2
 8006314:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8006316:	69fb      	ldr	r3, [r7, #28]
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800631c:	429a      	cmp	r2, r3
 800631e:	d101      	bne.n	8006324 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8006320:	2300      	movs	r3, #0
 8006322:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8006324:	69ba      	ldr	r2, [r7, #24]
 8006326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006328:	1ad3      	subs	r3, r2, r3
 800632a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800632c:	697a      	ldr	r2, [r7, #20]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	4293      	cmp	r3, r2
 8006332:	bf28      	it	cs
 8006334:	4613      	movcs	r3, r2
 8006336:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d019      	beq.n	8006372 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800633e:	69fb      	ldr	r3, [r7, #28]
 8006340:	685a      	ldr	r2, [r3, #4]
 8006342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006344:	4413      	add	r3, r2
 8006346:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8006348:	697a      	ldr	r2, [r7, #20]
 800634a:	6939      	ldr	r1, [r7, #16]
 800634c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800634e:	f001 fabb 	bl	80078c8 <memcpy>
    NumBytesRead += NumBytesRem;
 8006352:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006354:	697b      	ldr	r3, [r7, #20]
 8006356:	4413      	add	r3, r2
 8006358:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800635a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	4413      	add	r3, r2
 8006360:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8006362:	687a      	ldr	r2, [r7, #4]
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	1ad3      	subs	r3, r2, r3
 8006368:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800636a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	4413      	add	r3, r2
 8006370:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8006372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006374:	2b00      	cmp	r3, #0
 8006376:	d002      	beq.n	800637e <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8006378:	69fb      	ldr	r3, [r7, #28]
 800637a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800637c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800637e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8006380:	4618      	mov	r0, r3
 8006382:	3730      	adds	r7, #48	; 0x30
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}
 8006388:	20001c14 	.word	0x20001c14

0800638c <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800638c:	b580      	push	{r7, lr}
 800638e:	b088      	sub	sp, #32
 8006390:	af00      	add	r7, sp, #0
 8006392:	60f8      	str	r0, [r7, #12]
 8006394:	60b9      	str	r1, [r7, #8]
 8006396:	607a      	str	r2, [r7, #4]
 8006398:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800639a:	4b3d      	ldr	r3, [pc, #244]	; (8006490 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800639c:	61bb      	str	r3, [r7, #24]
 800639e:	69bb      	ldr	r3, [r7, #24]
 80063a0:	781b      	ldrb	r3, [r3, #0]
 80063a2:	b2db      	uxtb	r3, r3
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d101      	bne.n	80063ac <SEGGER_RTT_AllocUpBuffer+0x20>
 80063a8:	f7ff ff10 	bl	80061cc <_DoInit>
  SEGGER_RTT_LOCK();
 80063ac:	f3ef 8311 	mrs	r3, BASEPRI
 80063b0:	f04f 0120 	mov.w	r1, #32
 80063b4:	f381 8811 	msr	BASEPRI, r1
 80063b8:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80063ba:	4b35      	ldr	r3, [pc, #212]	; (8006490 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80063bc:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80063be:	2300      	movs	r3, #0
 80063c0:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80063c2:	6939      	ldr	r1, [r7, #16]
 80063c4:	69fb      	ldr	r3, [r7, #28]
 80063c6:	1c5a      	adds	r2, r3, #1
 80063c8:	4613      	mov	r3, r2
 80063ca:	005b      	lsls	r3, r3, #1
 80063cc:	4413      	add	r3, r2
 80063ce:	00db      	lsls	r3, r3, #3
 80063d0:	440b      	add	r3, r1
 80063d2:	3304      	adds	r3, #4
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d008      	beq.n	80063ec <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80063da:	69fb      	ldr	r3, [r7, #28]
 80063dc:	3301      	adds	r3, #1
 80063de:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	691b      	ldr	r3, [r3, #16]
 80063e4:	69fa      	ldr	r2, [r7, #28]
 80063e6:	429a      	cmp	r2, r3
 80063e8:	dbeb      	blt.n	80063c2 <SEGGER_RTT_AllocUpBuffer+0x36>
 80063ea:	e000      	b.n	80063ee <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80063ec:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	691b      	ldr	r3, [r3, #16]
 80063f2:	69fa      	ldr	r2, [r7, #28]
 80063f4:	429a      	cmp	r2, r3
 80063f6:	da3f      	bge.n	8006478 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80063f8:	6939      	ldr	r1, [r7, #16]
 80063fa:	69fb      	ldr	r3, [r7, #28]
 80063fc:	1c5a      	adds	r2, r3, #1
 80063fe:	4613      	mov	r3, r2
 8006400:	005b      	lsls	r3, r3, #1
 8006402:	4413      	add	r3, r2
 8006404:	00db      	lsls	r3, r3, #3
 8006406:	440b      	add	r3, r1
 8006408:	68fa      	ldr	r2, [r7, #12]
 800640a:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 800640c:	6939      	ldr	r1, [r7, #16]
 800640e:	69fb      	ldr	r3, [r7, #28]
 8006410:	1c5a      	adds	r2, r3, #1
 8006412:	4613      	mov	r3, r2
 8006414:	005b      	lsls	r3, r3, #1
 8006416:	4413      	add	r3, r2
 8006418:	00db      	lsls	r3, r3, #3
 800641a:	440b      	add	r3, r1
 800641c:	3304      	adds	r3, #4
 800641e:	68ba      	ldr	r2, [r7, #8]
 8006420:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8006422:	6939      	ldr	r1, [r7, #16]
 8006424:	69fa      	ldr	r2, [r7, #28]
 8006426:	4613      	mov	r3, r2
 8006428:	005b      	lsls	r3, r3, #1
 800642a:	4413      	add	r3, r2
 800642c:	00db      	lsls	r3, r3, #3
 800642e:	440b      	add	r3, r1
 8006430:	3320      	adds	r3, #32
 8006432:	687a      	ldr	r2, [r7, #4]
 8006434:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8006436:	6939      	ldr	r1, [r7, #16]
 8006438:	69fa      	ldr	r2, [r7, #28]
 800643a:	4613      	mov	r3, r2
 800643c:	005b      	lsls	r3, r3, #1
 800643e:	4413      	add	r3, r2
 8006440:	00db      	lsls	r3, r3, #3
 8006442:	440b      	add	r3, r1
 8006444:	3328      	adds	r3, #40	; 0x28
 8006446:	2200      	movs	r2, #0
 8006448:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800644a:	6939      	ldr	r1, [r7, #16]
 800644c:	69fa      	ldr	r2, [r7, #28]
 800644e:	4613      	mov	r3, r2
 8006450:	005b      	lsls	r3, r3, #1
 8006452:	4413      	add	r3, r2
 8006454:	00db      	lsls	r3, r3, #3
 8006456:	440b      	add	r3, r1
 8006458:	3324      	adds	r3, #36	; 0x24
 800645a:	2200      	movs	r2, #0
 800645c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800645e:	6939      	ldr	r1, [r7, #16]
 8006460:	69fa      	ldr	r2, [r7, #28]
 8006462:	4613      	mov	r3, r2
 8006464:	005b      	lsls	r3, r3, #1
 8006466:	4413      	add	r3, r2
 8006468:	00db      	lsls	r3, r3, #3
 800646a:	440b      	add	r3, r1
 800646c:	332c      	adds	r3, #44	; 0x2c
 800646e:	683a      	ldr	r2, [r7, #0]
 8006470:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8006472:	f3bf 8f5f 	dmb	sy
 8006476:	e002      	b.n	800647e <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8006478:	f04f 33ff 	mov.w	r3, #4294967295
 800647c:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8006484:	69fb      	ldr	r3, [r7, #28]
}
 8006486:	4618      	mov	r0, r3
 8006488:	3720      	adds	r7, #32
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}
 800648e:	bf00      	nop
 8006490:	20001c14 	.word	0x20001c14

08006494 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8006494:	b580      	push	{r7, lr}
 8006496:	b08a      	sub	sp, #40	; 0x28
 8006498:	af00      	add	r7, sp, #0
 800649a:	60f8      	str	r0, [r7, #12]
 800649c:	60b9      	str	r1, [r7, #8]
 800649e:	607a      	str	r2, [r7, #4]
 80064a0:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 80064a2:	4b21      	ldr	r3, [pc, #132]	; (8006528 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80064a4:	623b      	str	r3, [r7, #32]
 80064a6:	6a3b      	ldr	r3, [r7, #32]
 80064a8:	781b      	ldrb	r3, [r3, #0]
 80064aa:	b2db      	uxtb	r3, r3
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d101      	bne.n	80064b4 <SEGGER_RTT_ConfigDownBuffer+0x20>
 80064b0:	f7ff fe8c 	bl	80061cc <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80064b4:	4b1c      	ldr	r3, [pc, #112]	; (8006528 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80064b6:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	2b02      	cmp	r3, #2
 80064bc:	d82c      	bhi.n	8006518 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 80064be:	f3ef 8311 	mrs	r3, BASEPRI
 80064c2:	f04f 0120 	mov.w	r1, #32
 80064c6:	f381 8811 	msr	BASEPRI, r1
 80064ca:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 80064cc:	68fa      	ldr	r2, [r7, #12]
 80064ce:	4613      	mov	r3, r2
 80064d0:	005b      	lsls	r3, r3, #1
 80064d2:	4413      	add	r3, r2
 80064d4:	00db      	lsls	r3, r3, #3
 80064d6:	3360      	adds	r3, #96	; 0x60
 80064d8:	69fa      	ldr	r2, [r7, #28]
 80064da:	4413      	add	r3, r2
 80064dc:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d00e      	beq.n	8006502 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	68ba      	ldr	r2, [r7, #8]
 80064e8:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	687a      	ldr	r2, [r7, #4]
 80064ee:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	683a      	ldr	r2, [r7, #0]
 80064f4:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	2200      	movs	r2, #0
 80064fa:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	2200      	movs	r2, #0
 8006500:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006506:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8006508:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 800650c:	69bb      	ldr	r3, [r7, #24]
 800650e:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8006512:	2300      	movs	r3, #0
 8006514:	627b      	str	r3, [r7, #36]	; 0x24
 8006516:	e002      	b.n	800651e <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8006518:	f04f 33ff 	mov.w	r3, #4294967295
 800651c:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 800651e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006520:	4618      	mov	r0, r3
 8006522:	3728      	adds	r7, #40	; 0x28
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}
 8006528:	20001c14 	.word	0x20001c14

0800652c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800652c:	b480      	push	{r7}
 800652e:	b087      	sub	sp, #28
 8006530:	af00      	add	r7, sp, #0
 8006532:	60f8      	str	r0, [r7, #12]
 8006534:	60b9      	str	r1, [r7, #8]
 8006536:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	1c5a      	adds	r2, r3, #1
 8006540:	60fa      	str	r2, [r7, #12]
 8006542:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2b80      	cmp	r3, #128	; 0x80
 8006548:	d90a      	bls.n	8006560 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 800654a:	2380      	movs	r3, #128	; 0x80
 800654c:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 800654e:	e007      	b.n	8006560 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 8006550:	68ba      	ldr	r2, [r7, #8]
 8006552:	1c53      	adds	r3, r2, #1
 8006554:	60bb      	str	r3, [r7, #8]
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	1c59      	adds	r1, r3, #1
 800655a:	60f9      	str	r1, [r7, #12]
 800655c:	7812      	ldrb	r2, [r2, #0]
 800655e:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	1e5a      	subs	r2, r3, #1
 8006564:	607a      	str	r2, [r7, #4]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d003      	beq.n	8006572 <_EncodeStr+0x46>
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	781b      	ldrb	r3, [r3, #0]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d1ee      	bne.n	8006550 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 8006572:	68ba      	ldr	r2, [r7, #8]
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	1ad3      	subs	r3, r2, r3
 8006578:	b2da      	uxtb	r2, r3
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 800657e:	68fb      	ldr	r3, [r7, #12]
}
 8006580:	4618      	mov	r0, r3
 8006582:	371c      	adds	r7, #28
 8006584:	46bd      	mov	sp, r7
 8006586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658a:	4770      	bx	lr

0800658c <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800658c:	b480      	push	{r7}
 800658e:	b083      	sub	sp, #12
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	3307      	adds	r3, #7
}
 8006598:	4618      	mov	r0, r3
 800659a:	370c      	adds	r7, #12
 800659c:	46bd      	mov	sp, r7
 800659e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a2:	4770      	bx	lr

080065a4 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b082      	sub	sp, #8
 80065a8:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80065aa:	4b35      	ldr	r3, [pc, #212]	; (8006680 <_HandleIncomingPacket+0xdc>)
 80065ac:	7e1b      	ldrb	r3, [r3, #24]
 80065ae:	4618      	mov	r0, r3
 80065b0:	1cfb      	adds	r3, r7, #3
 80065b2:	2201      	movs	r2, #1
 80065b4:	4619      	mov	r1, r3
 80065b6:	f7ff fe63 	bl	8006280 <SEGGER_RTT_ReadNoLock>
 80065ba:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d052      	beq.n	8006668 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 80065c2:	78fb      	ldrb	r3, [r7, #3]
 80065c4:	2b80      	cmp	r3, #128	; 0x80
 80065c6:	d031      	beq.n	800662c <_HandleIncomingPacket+0x88>
 80065c8:	2b80      	cmp	r3, #128	; 0x80
 80065ca:	dc40      	bgt.n	800664e <_HandleIncomingPacket+0xaa>
 80065cc:	2b07      	cmp	r3, #7
 80065ce:	dc15      	bgt.n	80065fc <_HandleIncomingPacket+0x58>
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	dd3c      	ble.n	800664e <_HandleIncomingPacket+0xaa>
 80065d4:	3b01      	subs	r3, #1
 80065d6:	2b06      	cmp	r3, #6
 80065d8:	d839      	bhi.n	800664e <_HandleIncomingPacket+0xaa>
 80065da:	a201      	add	r2, pc, #4	; (adr r2, 80065e0 <_HandleIncomingPacket+0x3c>)
 80065dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065e0:	08006603 	.word	0x08006603
 80065e4:	08006609 	.word	0x08006609
 80065e8:	0800660f 	.word	0x0800660f
 80065ec:	08006615 	.word	0x08006615
 80065f0:	0800661b 	.word	0x0800661b
 80065f4:	08006621 	.word	0x08006621
 80065f8:	08006627 	.word	0x08006627
 80065fc:	2b7f      	cmp	r3, #127	; 0x7f
 80065fe:	d035      	beq.n	800666c <_HandleIncomingPacket+0xc8>
 8006600:	e025      	b.n	800664e <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8006602:	f000 fc2f 	bl	8006e64 <SEGGER_SYSVIEW_Start>
      break;
 8006606:	e036      	b.n	8006676 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8006608:	f000 fce6 	bl	8006fd8 <SEGGER_SYSVIEW_Stop>
      break;
 800660c:	e033      	b.n	8006676 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800660e:	f000 febf 	bl	8007390 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8006612:	e030      	b.n	8006676 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8006614:	f000 fe84 	bl	8007320 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8006618:	e02d      	b.n	8006676 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800661a:	f000 fd03 	bl	8007024 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800661e:	e02a      	b.n	8006676 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8006620:	f001 f882 	bl	8007728 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8006624:	e027      	b.n	8006676 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8006626:	f001 f861 	bl	80076ec <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800662a:	e024      	b.n	8006676 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800662c:	4b14      	ldr	r3, [pc, #80]	; (8006680 <_HandleIncomingPacket+0xdc>)
 800662e:	7e1b      	ldrb	r3, [r3, #24]
 8006630:	4618      	mov	r0, r3
 8006632:	1cfb      	adds	r3, r7, #3
 8006634:	2201      	movs	r2, #1
 8006636:	4619      	mov	r1, r3
 8006638:	f7ff fe22 	bl	8006280 <SEGGER_RTT_ReadNoLock>
 800663c:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d015      	beq.n	8006670 <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8006644:	78fb      	ldrb	r3, [r7, #3]
 8006646:	4618      	mov	r0, r3
 8006648:	f000 ffc6 	bl	80075d8 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800664c:	e010      	b.n	8006670 <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800664e:	78fb      	ldrb	r3, [r7, #3]
 8006650:	b25b      	sxtb	r3, r3
 8006652:	2b00      	cmp	r3, #0
 8006654:	da0e      	bge.n	8006674 <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8006656:	4b0a      	ldr	r3, [pc, #40]	; (8006680 <_HandleIncomingPacket+0xdc>)
 8006658:	7e1b      	ldrb	r3, [r3, #24]
 800665a:	4618      	mov	r0, r3
 800665c:	1cfb      	adds	r3, r7, #3
 800665e:	2201      	movs	r2, #1
 8006660:	4619      	mov	r1, r3
 8006662:	f7ff fe0d 	bl	8006280 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8006666:	e005      	b.n	8006674 <_HandleIncomingPacket+0xd0>
    }
  }
 8006668:	bf00      	nop
 800666a:	e004      	b.n	8006676 <_HandleIncomingPacket+0xd2>
      break;
 800666c:	bf00      	nop
 800666e:	e002      	b.n	8006676 <_HandleIncomingPacket+0xd2>
      break;
 8006670:	bf00      	nop
 8006672:	e000      	b.n	8006676 <_HandleIncomingPacket+0xd2>
      break;
 8006674:	bf00      	nop
}
 8006676:	bf00      	nop
 8006678:	3708      	adds	r7, #8
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}
 800667e:	bf00      	nop
 8006680:	200024d4 	.word	0x200024d4

08006684 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8006684:	b580      	push	{r7, lr}
 8006686:	b08c      	sub	sp, #48	; 0x30
 8006688:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800668a:	2301      	movs	r3, #1
 800668c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800668e:	1d3b      	adds	r3, r7, #4
 8006690:	3301      	adds	r3, #1
 8006692:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8006694:	69fb      	ldr	r3, [r7, #28]
 8006696:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006698:	4b31      	ldr	r3, [pc, #196]	; (8006760 <_TrySendOverflowPacket+0xdc>)
 800669a:	695b      	ldr	r3, [r3, #20]
 800669c:	62bb      	str	r3, [r7, #40]	; 0x28
 800669e:	e00b      	b.n	80066b8 <_TrySendOverflowPacket+0x34>
 80066a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066a2:	b2da      	uxtb	r2, r3
 80066a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066a6:	1c59      	adds	r1, r3, #1
 80066a8:	62f9      	str	r1, [r7, #44]	; 0x2c
 80066aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066ae:	b2d2      	uxtb	r2, r2
 80066b0:	701a      	strb	r2, [r3, #0]
 80066b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066b4:	09db      	lsrs	r3, r3, #7
 80066b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80066b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ba:	2b7f      	cmp	r3, #127	; 0x7f
 80066bc:	d8f0      	bhi.n	80066a0 <_TrySendOverflowPacket+0x1c>
 80066be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066c0:	1c5a      	adds	r2, r3, #1
 80066c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80066c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066c6:	b2d2      	uxtb	r2, r2
 80066c8:	701a      	strb	r2, [r3, #0]
 80066ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066cc:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80066ce:	4b25      	ldr	r3, [pc, #148]	; (8006764 <_TrySendOverflowPacket+0xe0>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80066d4:	4b22      	ldr	r3, [pc, #136]	; (8006760 <_TrySendOverflowPacket+0xdc>)
 80066d6:	68db      	ldr	r3, [r3, #12]
 80066d8:	69ba      	ldr	r2, [r7, #24]
 80066da:	1ad3      	subs	r3, r2, r3
 80066dc:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80066de:	69fb      	ldr	r3, [r7, #28]
 80066e0:	627b      	str	r3, [r7, #36]	; 0x24
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	623b      	str	r3, [r7, #32]
 80066e6:	e00b      	b.n	8006700 <_TrySendOverflowPacket+0x7c>
 80066e8:	6a3b      	ldr	r3, [r7, #32]
 80066ea:	b2da      	uxtb	r2, r3
 80066ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ee:	1c59      	adds	r1, r3, #1
 80066f0:	6279      	str	r1, [r7, #36]	; 0x24
 80066f2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066f6:	b2d2      	uxtb	r2, r2
 80066f8:	701a      	strb	r2, [r3, #0]
 80066fa:	6a3b      	ldr	r3, [r7, #32]
 80066fc:	09db      	lsrs	r3, r3, #7
 80066fe:	623b      	str	r3, [r7, #32]
 8006700:	6a3b      	ldr	r3, [r7, #32]
 8006702:	2b7f      	cmp	r3, #127	; 0x7f
 8006704:	d8f0      	bhi.n	80066e8 <_TrySendOverflowPacket+0x64>
 8006706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006708:	1c5a      	adds	r2, r3, #1
 800670a:	627a      	str	r2, [r7, #36]	; 0x24
 800670c:	6a3a      	ldr	r2, [r7, #32]
 800670e:	b2d2      	uxtb	r2, r2
 8006710:	701a      	strb	r2, [r3, #0]
 8006712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006714:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8006716:	4b12      	ldr	r3, [pc, #72]	; (8006760 <_TrySendOverflowPacket+0xdc>)
 8006718:	785b      	ldrb	r3, [r3, #1]
 800671a:	4618      	mov	r0, r3
 800671c:	1d3b      	adds	r3, r7, #4
 800671e:	69fa      	ldr	r2, [r7, #28]
 8006720:	1ad3      	subs	r3, r2, r3
 8006722:	461a      	mov	r2, r3
 8006724:	1d3b      	adds	r3, r7, #4
 8006726:	4619      	mov	r1, r3
 8006728:	f7f9 fd52 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800672c:	4603      	mov	r3, r0
 800672e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8006730:	693b      	ldr	r3, [r7, #16]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d009      	beq.n	800674a <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8006736:	4a0a      	ldr	r2, [pc, #40]	; (8006760 <_TrySendOverflowPacket+0xdc>)
 8006738:	69bb      	ldr	r3, [r7, #24]
 800673a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800673c:	4b08      	ldr	r3, [pc, #32]	; (8006760 <_TrySendOverflowPacket+0xdc>)
 800673e:	781b      	ldrb	r3, [r3, #0]
 8006740:	3b01      	subs	r3, #1
 8006742:	b2da      	uxtb	r2, r3
 8006744:	4b06      	ldr	r3, [pc, #24]	; (8006760 <_TrySendOverflowPacket+0xdc>)
 8006746:	701a      	strb	r2, [r3, #0]
 8006748:	e004      	b.n	8006754 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800674a:	4b05      	ldr	r3, [pc, #20]	; (8006760 <_TrySendOverflowPacket+0xdc>)
 800674c:	695b      	ldr	r3, [r3, #20]
 800674e:	3301      	adds	r3, #1
 8006750:	4a03      	ldr	r2, [pc, #12]	; (8006760 <_TrySendOverflowPacket+0xdc>)
 8006752:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8006754:	693b      	ldr	r3, [r7, #16]
}
 8006756:	4618      	mov	r0, r3
 8006758:	3730      	adds	r7, #48	; 0x30
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}
 800675e:	bf00      	nop
 8006760:	200024d4 	.word	0x200024d4
 8006764:	e0001004 	.word	0xe0001004

08006768 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8006768:	b580      	push	{r7, lr}
 800676a:	b08a      	sub	sp, #40	; 0x28
 800676c:	af00      	add	r7, sp, #0
 800676e:	60f8      	str	r0, [r7, #12]
 8006770:	60b9      	str	r1, [r7, #8]
 8006772:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8006774:	4b98      	ldr	r3, [pc, #608]	; (80069d8 <_SendPacket+0x270>)
 8006776:	781b      	ldrb	r3, [r3, #0]
 8006778:	2b01      	cmp	r3, #1
 800677a:	d010      	beq.n	800679e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800677c:	4b96      	ldr	r3, [pc, #600]	; (80069d8 <_SendPacket+0x270>)
 800677e:	781b      	ldrb	r3, [r3, #0]
 8006780:	2b00      	cmp	r3, #0
 8006782:	f000 812d 	beq.w	80069e0 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8006786:	4b94      	ldr	r3, [pc, #592]	; (80069d8 <_SendPacket+0x270>)
 8006788:	781b      	ldrb	r3, [r3, #0]
 800678a:	2b02      	cmp	r3, #2
 800678c:	d109      	bne.n	80067a2 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800678e:	f7ff ff79 	bl	8006684 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8006792:	4b91      	ldr	r3, [pc, #580]	; (80069d8 <_SendPacket+0x270>)
 8006794:	781b      	ldrb	r3, [r3, #0]
 8006796:	2b01      	cmp	r3, #1
 8006798:	f040 8124 	bne.w	80069e4 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 800679c:	e001      	b.n	80067a2 <_SendPacket+0x3a>
    goto Send;
 800679e:	bf00      	nop
 80067a0:	e000      	b.n	80067a4 <_SendPacket+0x3c>
Send:
 80067a2:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2b1f      	cmp	r3, #31
 80067a8:	d809      	bhi.n	80067be <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80067aa:	4b8b      	ldr	r3, [pc, #556]	; (80069d8 <_SendPacket+0x270>)
 80067ac:	69da      	ldr	r2, [r3, #28]
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	fa22 f303 	lsr.w	r3, r2, r3
 80067b4:	f003 0301 	and.w	r3, r3, #1
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	f040 8115 	bne.w	80069e8 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2b17      	cmp	r3, #23
 80067c2:	d807      	bhi.n	80067d4 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	3b01      	subs	r3, #1
 80067c8:	60fb      	str	r3, [r7, #12]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	b2da      	uxtb	r2, r3
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	701a      	strb	r2, [r3, #0]
 80067d2:	e0c4      	b.n	800695e <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 80067d4:	68ba      	ldr	r2, [r7, #8]
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	1ad3      	subs	r3, r2, r3
 80067da:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 80067dc:	69fb      	ldr	r3, [r7, #28]
 80067de:	2b7f      	cmp	r3, #127	; 0x7f
 80067e0:	d912      	bls.n	8006808 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 80067e2:	69fb      	ldr	r3, [r7, #28]
 80067e4:	09da      	lsrs	r2, r3, #7
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	3b01      	subs	r3, #1
 80067ea:	60fb      	str	r3, [r7, #12]
 80067ec:	b2d2      	uxtb	r2, r2
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 80067f2:	69fb      	ldr	r3, [r7, #28]
 80067f4:	b2db      	uxtb	r3, r3
 80067f6:	68fa      	ldr	r2, [r7, #12]
 80067f8:	3a01      	subs	r2, #1
 80067fa:	60fa      	str	r2, [r7, #12]
 80067fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006800:	b2da      	uxtb	r2, r3
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	701a      	strb	r2, [r3, #0]
 8006806:	e006      	b.n	8006816 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	3b01      	subs	r3, #1
 800680c:	60fb      	str	r3, [r7, #12]
 800680e:	69fb      	ldr	r3, [r7, #28]
 8006810:	b2da      	uxtb	r2, r3
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2b7e      	cmp	r3, #126	; 0x7e
 800681a:	d807      	bhi.n	800682c <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	3b01      	subs	r3, #1
 8006820:	60fb      	str	r3, [r7, #12]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	b2da      	uxtb	r2, r3
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	701a      	strb	r2, [r3, #0]
 800682a:	e098      	b.n	800695e <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006832:	d212      	bcs.n	800685a <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	09da      	lsrs	r2, r3, #7
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	3b01      	subs	r3, #1
 800683c:	60fb      	str	r3, [r7, #12]
 800683e:	b2d2      	uxtb	r2, r2
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	b2db      	uxtb	r3, r3
 8006848:	68fa      	ldr	r2, [r7, #12]
 800684a:	3a01      	subs	r2, #1
 800684c:	60fa      	str	r2, [r7, #12]
 800684e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006852:	b2da      	uxtb	r2, r3
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	701a      	strb	r2, [r3, #0]
 8006858:	e081      	b.n	800695e <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006860:	d21d      	bcs.n	800689e <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	0b9a      	lsrs	r2, r3, #14
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	3b01      	subs	r3, #1
 800686a:	60fb      	str	r3, [r7, #12]
 800686c:	b2d2      	uxtb	r2, r2
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	09db      	lsrs	r3, r3, #7
 8006876:	b2db      	uxtb	r3, r3
 8006878:	68fa      	ldr	r2, [r7, #12]
 800687a:	3a01      	subs	r2, #1
 800687c:	60fa      	str	r2, [r7, #12]
 800687e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006882:	b2da      	uxtb	r2, r3
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	b2db      	uxtb	r3, r3
 800688c:	68fa      	ldr	r2, [r7, #12]
 800688e:	3a01      	subs	r2, #1
 8006890:	60fa      	str	r2, [r7, #12]
 8006892:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006896:	b2da      	uxtb	r2, r3
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	701a      	strb	r2, [r3, #0]
 800689c:	e05f      	b.n	800695e <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80068a4:	d228      	bcs.n	80068f8 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	0d5a      	lsrs	r2, r3, #21
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	3b01      	subs	r3, #1
 80068ae:	60fb      	str	r3, [r7, #12]
 80068b0:	b2d2      	uxtb	r2, r2
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	0b9b      	lsrs	r3, r3, #14
 80068ba:	b2db      	uxtb	r3, r3
 80068bc:	68fa      	ldr	r2, [r7, #12]
 80068be:	3a01      	subs	r2, #1
 80068c0:	60fa      	str	r2, [r7, #12]
 80068c2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80068c6:	b2da      	uxtb	r2, r3
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	09db      	lsrs	r3, r3, #7
 80068d0:	b2db      	uxtb	r3, r3
 80068d2:	68fa      	ldr	r2, [r7, #12]
 80068d4:	3a01      	subs	r2, #1
 80068d6:	60fa      	str	r2, [r7, #12]
 80068d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80068dc:	b2da      	uxtb	r2, r3
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	b2db      	uxtb	r3, r3
 80068e6:	68fa      	ldr	r2, [r7, #12]
 80068e8:	3a01      	subs	r2, #1
 80068ea:	60fa      	str	r2, [r7, #12]
 80068ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80068f0:	b2da      	uxtb	r2, r3
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	701a      	strb	r2, [r3, #0]
 80068f6:	e032      	b.n	800695e <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	0f1a      	lsrs	r2, r3, #28
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	3b01      	subs	r3, #1
 8006900:	60fb      	str	r3, [r7, #12]
 8006902:	b2d2      	uxtb	r2, r2
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	0d5b      	lsrs	r3, r3, #21
 800690c:	b2db      	uxtb	r3, r3
 800690e:	68fa      	ldr	r2, [r7, #12]
 8006910:	3a01      	subs	r2, #1
 8006912:	60fa      	str	r2, [r7, #12]
 8006914:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006918:	b2da      	uxtb	r2, r3
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	0b9b      	lsrs	r3, r3, #14
 8006922:	b2db      	uxtb	r3, r3
 8006924:	68fa      	ldr	r2, [r7, #12]
 8006926:	3a01      	subs	r2, #1
 8006928:	60fa      	str	r2, [r7, #12]
 800692a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800692e:	b2da      	uxtb	r2, r3
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	09db      	lsrs	r3, r3, #7
 8006938:	b2db      	uxtb	r3, r3
 800693a:	68fa      	ldr	r2, [r7, #12]
 800693c:	3a01      	subs	r2, #1
 800693e:	60fa      	str	r2, [r7, #12]
 8006940:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006944:	b2da      	uxtb	r2, r3
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	b2db      	uxtb	r3, r3
 800694e:	68fa      	ldr	r2, [r7, #12]
 8006950:	3a01      	subs	r2, #1
 8006952:	60fa      	str	r2, [r7, #12]
 8006954:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006958:	b2da      	uxtb	r2, r3
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800695e:	4b1f      	ldr	r3, [pc, #124]	; (80069dc <_SendPacket+0x274>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8006964:	4b1c      	ldr	r3, [pc, #112]	; (80069d8 <_SendPacket+0x270>)
 8006966:	68db      	ldr	r3, [r3, #12]
 8006968:	69ba      	ldr	r2, [r7, #24]
 800696a:	1ad3      	subs	r3, r2, r3
 800696c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	627b      	str	r3, [r7, #36]	; 0x24
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	623b      	str	r3, [r7, #32]
 8006976:	e00b      	b.n	8006990 <_SendPacket+0x228>
 8006978:	6a3b      	ldr	r3, [r7, #32]
 800697a:	b2da      	uxtb	r2, r3
 800697c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800697e:	1c59      	adds	r1, r3, #1
 8006980:	6279      	str	r1, [r7, #36]	; 0x24
 8006982:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006986:	b2d2      	uxtb	r2, r2
 8006988:	701a      	strb	r2, [r3, #0]
 800698a:	6a3b      	ldr	r3, [r7, #32]
 800698c:	09db      	lsrs	r3, r3, #7
 800698e:	623b      	str	r3, [r7, #32]
 8006990:	6a3b      	ldr	r3, [r7, #32]
 8006992:	2b7f      	cmp	r3, #127	; 0x7f
 8006994:	d8f0      	bhi.n	8006978 <_SendPacket+0x210>
 8006996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006998:	1c5a      	adds	r2, r3, #1
 800699a:	627a      	str	r2, [r7, #36]	; 0x24
 800699c:	6a3a      	ldr	r2, [r7, #32]
 800699e:	b2d2      	uxtb	r2, r2
 80069a0:	701a      	strb	r2, [r3, #0]
 80069a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a4:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 80069a6:	4b0c      	ldr	r3, [pc, #48]	; (80069d8 <_SendPacket+0x270>)
 80069a8:	785b      	ldrb	r3, [r3, #1]
 80069aa:	4618      	mov	r0, r3
 80069ac:	68ba      	ldr	r2, [r7, #8]
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	1ad3      	subs	r3, r2, r3
 80069b2:	461a      	mov	r2, r3
 80069b4:	68f9      	ldr	r1, [r7, #12]
 80069b6:	f7f9 fc0b 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80069ba:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 80069bc:	693b      	ldr	r3, [r7, #16]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d003      	beq.n	80069ca <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80069c2:	4a05      	ldr	r2, [pc, #20]	; (80069d8 <_SendPacket+0x270>)
 80069c4:	69bb      	ldr	r3, [r7, #24]
 80069c6:	60d3      	str	r3, [r2, #12]
 80069c8:	e00f      	b.n	80069ea <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80069ca:	4b03      	ldr	r3, [pc, #12]	; (80069d8 <_SendPacket+0x270>)
 80069cc:	781b      	ldrb	r3, [r3, #0]
 80069ce:	3301      	adds	r3, #1
 80069d0:	b2da      	uxtb	r2, r3
 80069d2:	4b01      	ldr	r3, [pc, #4]	; (80069d8 <_SendPacket+0x270>)
 80069d4:	701a      	strb	r2, [r3, #0]
 80069d6:	e008      	b.n	80069ea <_SendPacket+0x282>
 80069d8:	200024d4 	.word	0x200024d4
 80069dc:	e0001004 	.word	0xe0001004
    goto SendDone;
 80069e0:	bf00      	nop
 80069e2:	e002      	b.n	80069ea <_SendPacket+0x282>
      goto SendDone;
 80069e4:	bf00      	nop
 80069e6:	e000      	b.n	80069ea <_SendPacket+0x282>
      goto SendDone;
 80069e8:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80069ea:	4b14      	ldr	r3, [pc, #80]	; (8006a3c <_SendPacket+0x2d4>)
 80069ec:	7e1b      	ldrb	r3, [r3, #24]
 80069ee:	4619      	mov	r1, r3
 80069f0:	4a13      	ldr	r2, [pc, #76]	; (8006a40 <_SendPacket+0x2d8>)
 80069f2:	460b      	mov	r3, r1
 80069f4:	005b      	lsls	r3, r3, #1
 80069f6:	440b      	add	r3, r1
 80069f8:	00db      	lsls	r3, r3, #3
 80069fa:	4413      	add	r3, r2
 80069fc:	336c      	adds	r3, #108	; 0x6c
 80069fe:	681a      	ldr	r2, [r3, #0]
 8006a00:	4b0e      	ldr	r3, [pc, #56]	; (8006a3c <_SendPacket+0x2d4>)
 8006a02:	7e1b      	ldrb	r3, [r3, #24]
 8006a04:	4618      	mov	r0, r3
 8006a06:	490e      	ldr	r1, [pc, #56]	; (8006a40 <_SendPacket+0x2d8>)
 8006a08:	4603      	mov	r3, r0
 8006a0a:	005b      	lsls	r3, r3, #1
 8006a0c:	4403      	add	r3, r0
 8006a0e:	00db      	lsls	r3, r3, #3
 8006a10:	440b      	add	r3, r1
 8006a12:	3370      	adds	r3, #112	; 0x70
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	429a      	cmp	r2, r3
 8006a18:	d00b      	beq.n	8006a32 <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8006a1a:	4b08      	ldr	r3, [pc, #32]	; (8006a3c <_SendPacket+0x2d4>)
 8006a1c:	789b      	ldrb	r3, [r3, #2]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d107      	bne.n	8006a32 <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8006a22:	4b06      	ldr	r3, [pc, #24]	; (8006a3c <_SendPacket+0x2d4>)
 8006a24:	2201      	movs	r2, #1
 8006a26:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8006a28:	f7ff fdbc 	bl	80065a4 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8006a2c:	4b03      	ldr	r3, [pc, #12]	; (8006a3c <_SendPacket+0x2d4>)
 8006a2e:	2200      	movs	r2, #0
 8006a30:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8006a32:	bf00      	nop
 8006a34:	3728      	adds	r7, #40	; 0x28
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}
 8006a3a:	bf00      	nop
 8006a3c:	200024d4 	.word	0x200024d4
 8006a40:	20001c14 	.word	0x20001c14

08006a44 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b086      	sub	sp, #24
 8006a48:	af02      	add	r7, sp, #8
 8006a4a:	60f8      	str	r0, [r7, #12]
 8006a4c:	60b9      	str	r1, [r7, #8]
 8006a4e:	607a      	str	r2, [r7, #4]
 8006a50:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006a52:	2300      	movs	r3, #0
 8006a54:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006a58:	4917      	ldr	r1, [pc, #92]	; (8006ab8 <SEGGER_SYSVIEW_Init+0x74>)
 8006a5a:	4818      	ldr	r0, [pc, #96]	; (8006abc <SEGGER_SYSVIEW_Init+0x78>)
 8006a5c:	f7ff fc96 	bl	800638c <SEGGER_RTT_AllocUpBuffer>
 8006a60:	4603      	mov	r3, r0
 8006a62:	b2da      	uxtb	r2, r3
 8006a64:	4b16      	ldr	r3, [pc, #88]	; (8006ac0 <SEGGER_SYSVIEW_Init+0x7c>)
 8006a66:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8006a68:	4b15      	ldr	r3, [pc, #84]	; (8006ac0 <SEGGER_SYSVIEW_Init+0x7c>)
 8006a6a:	785a      	ldrb	r2, [r3, #1]
 8006a6c:	4b14      	ldr	r3, [pc, #80]	; (8006ac0 <SEGGER_SYSVIEW_Init+0x7c>)
 8006a6e:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006a70:	4b13      	ldr	r3, [pc, #76]	; (8006ac0 <SEGGER_SYSVIEW_Init+0x7c>)
 8006a72:	7e1b      	ldrb	r3, [r3, #24]
 8006a74:	4618      	mov	r0, r3
 8006a76:	2300      	movs	r3, #0
 8006a78:	9300      	str	r3, [sp, #0]
 8006a7a:	2308      	movs	r3, #8
 8006a7c:	4a11      	ldr	r2, [pc, #68]	; (8006ac4 <SEGGER_SYSVIEW_Init+0x80>)
 8006a7e:	490f      	ldr	r1, [pc, #60]	; (8006abc <SEGGER_SYSVIEW_Init+0x78>)
 8006a80:	f7ff fd08 	bl	8006494 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8006a84:	4b0e      	ldr	r3, [pc, #56]	; (8006ac0 <SEGGER_SYSVIEW_Init+0x7c>)
 8006a86:	2200      	movs	r2, #0
 8006a88:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006a8a:	4b0f      	ldr	r3, [pc, #60]	; (8006ac8 <SEGGER_SYSVIEW_Init+0x84>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a0c      	ldr	r2, [pc, #48]	; (8006ac0 <SEGGER_SYSVIEW_Init+0x7c>)
 8006a90:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8006a92:	4a0b      	ldr	r2, [pc, #44]	; (8006ac0 <SEGGER_SYSVIEW_Init+0x7c>)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8006a98:	4a09      	ldr	r2, [pc, #36]	; (8006ac0 <SEGGER_SYSVIEW_Init+0x7c>)
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8006a9e:	4a08      	ldr	r2, [pc, #32]	; (8006ac0 <SEGGER_SYSVIEW_Init+0x7c>)
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8006aa4:	4a06      	ldr	r2, [pc, #24]	; (8006ac0 <SEGGER_SYSVIEW_Init+0x7c>)
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8006aaa:	4b05      	ldr	r3, [pc, #20]	; (8006ac0 <SEGGER_SYSVIEW_Init+0x7c>)
 8006aac:	2200      	movs	r2, #0
 8006aae:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8006ab0:	bf00      	nop
 8006ab2:	3710      	adds	r7, #16
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}
 8006ab8:	200020cc 	.word	0x200020cc
 8006abc:	08007b98 	.word	0x08007b98
 8006ac0:	200024d4 	.word	0x200024d4
 8006ac4:	200024cc 	.word	0x200024cc
 8006ac8:	e0001004 	.word	0xe0001004

08006acc <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8006acc:	b480      	push	{r7}
 8006ace:	b083      	sub	sp, #12
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8006ad4:	4a04      	ldr	r2, [pc, #16]	; (8006ae8 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6113      	str	r3, [r2, #16]
}
 8006ada:	bf00      	nop
 8006adc:	370c      	adds	r7, #12
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae4:	4770      	bx	lr
 8006ae6:	bf00      	nop
 8006ae8:	200024d4 	.word	0x200024d4

08006aec <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b084      	sub	sp, #16
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006af4:	f3ef 8311 	mrs	r3, BASEPRI
 8006af8:	f04f 0120 	mov.w	r1, #32
 8006afc:	f381 8811 	msr	BASEPRI, r1
 8006b00:	60fb      	str	r3, [r7, #12]
 8006b02:	4808      	ldr	r0, [pc, #32]	; (8006b24 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8006b04:	f7ff fd42 	bl	800658c <_PreparePacket>
 8006b08:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8006b0a:	687a      	ldr	r2, [r7, #4]
 8006b0c:	68b9      	ldr	r1, [r7, #8]
 8006b0e:	68b8      	ldr	r0, [r7, #8]
 8006b10:	f7ff fe2a 	bl	8006768 <_SendPacket>
  RECORD_END();
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	f383 8811 	msr	BASEPRI, r3
}
 8006b1a:	bf00      	nop
 8006b1c:	3710      	adds	r7, #16
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}
 8006b22:	bf00      	nop
 8006b24:	20002504 	.word	0x20002504

08006b28 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b088      	sub	sp, #32
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
 8006b30:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006b32:	f3ef 8311 	mrs	r3, BASEPRI
 8006b36:	f04f 0120 	mov.w	r1, #32
 8006b3a:	f381 8811 	msr	BASEPRI, r1
 8006b3e:	617b      	str	r3, [r7, #20]
 8006b40:	4816      	ldr	r0, [pc, #88]	; (8006b9c <SEGGER_SYSVIEW_RecordU32+0x74>)
 8006b42:	f7ff fd23 	bl	800658c <_PreparePacket>
 8006b46:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	61fb      	str	r3, [r7, #28]
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	61bb      	str	r3, [r7, #24]
 8006b54:	e00b      	b.n	8006b6e <SEGGER_SYSVIEW_RecordU32+0x46>
 8006b56:	69bb      	ldr	r3, [r7, #24]
 8006b58:	b2da      	uxtb	r2, r3
 8006b5a:	69fb      	ldr	r3, [r7, #28]
 8006b5c:	1c59      	adds	r1, r3, #1
 8006b5e:	61f9      	str	r1, [r7, #28]
 8006b60:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b64:	b2d2      	uxtb	r2, r2
 8006b66:	701a      	strb	r2, [r3, #0]
 8006b68:	69bb      	ldr	r3, [r7, #24]
 8006b6a:	09db      	lsrs	r3, r3, #7
 8006b6c:	61bb      	str	r3, [r7, #24]
 8006b6e:	69bb      	ldr	r3, [r7, #24]
 8006b70:	2b7f      	cmp	r3, #127	; 0x7f
 8006b72:	d8f0      	bhi.n	8006b56 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8006b74:	69fb      	ldr	r3, [r7, #28]
 8006b76:	1c5a      	adds	r2, r3, #1
 8006b78:	61fa      	str	r2, [r7, #28]
 8006b7a:	69ba      	ldr	r2, [r7, #24]
 8006b7c:	b2d2      	uxtb	r2, r2
 8006b7e:	701a      	strb	r2, [r3, #0]
 8006b80:	69fb      	ldr	r3, [r7, #28]
 8006b82:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006b84:	687a      	ldr	r2, [r7, #4]
 8006b86:	68f9      	ldr	r1, [r7, #12]
 8006b88:	6938      	ldr	r0, [r7, #16]
 8006b8a:	f7ff fded 	bl	8006768 <_SendPacket>
  RECORD_END();
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	f383 8811 	msr	BASEPRI, r3
}
 8006b94:	bf00      	nop
 8006b96:	3720      	adds	r7, #32
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}
 8006b9c:	20002504 	.word	0x20002504

08006ba0 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b08c      	sub	sp, #48	; 0x30
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	60f8      	str	r0, [r7, #12]
 8006ba8:	60b9      	str	r1, [r7, #8]
 8006baa:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006bac:	f3ef 8311 	mrs	r3, BASEPRI
 8006bb0:	f04f 0120 	mov.w	r1, #32
 8006bb4:	f381 8811 	msr	BASEPRI, r1
 8006bb8:	61fb      	str	r3, [r7, #28]
 8006bba:	4825      	ldr	r0, [pc, #148]	; (8006c50 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8006bbc:	f7ff fce6 	bl	800658c <_PreparePacket>
 8006bc0:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006bc2:	69bb      	ldr	r3, [r7, #24]
 8006bc4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	62bb      	str	r3, [r7, #40]	; 0x28
 8006bce:	e00b      	b.n	8006be8 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8006bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bd2:	b2da      	uxtb	r2, r3
 8006bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bd6:	1c59      	adds	r1, r3, #1
 8006bd8:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006bda:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006bde:	b2d2      	uxtb	r2, r2
 8006be0:	701a      	strb	r2, [r3, #0]
 8006be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006be4:	09db      	lsrs	r3, r3, #7
 8006be6:	62bb      	str	r3, [r7, #40]	; 0x28
 8006be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bea:	2b7f      	cmp	r3, #127	; 0x7f
 8006bec:	d8f0      	bhi.n	8006bd0 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8006bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bf0:	1c5a      	adds	r2, r3, #1
 8006bf2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006bf4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006bf6:	b2d2      	uxtb	r2, r2
 8006bf8:	701a      	strb	r2, [r3, #0]
 8006bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bfc:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	627b      	str	r3, [r7, #36]	; 0x24
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	623b      	str	r3, [r7, #32]
 8006c06:	e00b      	b.n	8006c20 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8006c08:	6a3b      	ldr	r3, [r7, #32]
 8006c0a:	b2da      	uxtb	r2, r3
 8006c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c0e:	1c59      	adds	r1, r3, #1
 8006c10:	6279      	str	r1, [r7, #36]	; 0x24
 8006c12:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c16:	b2d2      	uxtb	r2, r2
 8006c18:	701a      	strb	r2, [r3, #0]
 8006c1a:	6a3b      	ldr	r3, [r7, #32]
 8006c1c:	09db      	lsrs	r3, r3, #7
 8006c1e:	623b      	str	r3, [r7, #32]
 8006c20:	6a3b      	ldr	r3, [r7, #32]
 8006c22:	2b7f      	cmp	r3, #127	; 0x7f
 8006c24:	d8f0      	bhi.n	8006c08 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8006c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c28:	1c5a      	adds	r2, r3, #1
 8006c2a:	627a      	str	r2, [r7, #36]	; 0x24
 8006c2c:	6a3a      	ldr	r2, [r7, #32]
 8006c2e:	b2d2      	uxtb	r2, r2
 8006c30:	701a      	strb	r2, [r3, #0]
 8006c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c34:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006c36:	68fa      	ldr	r2, [r7, #12]
 8006c38:	6979      	ldr	r1, [r7, #20]
 8006c3a:	69b8      	ldr	r0, [r7, #24]
 8006c3c:	f7ff fd94 	bl	8006768 <_SendPacket>
  RECORD_END();
 8006c40:	69fb      	ldr	r3, [r7, #28]
 8006c42:	f383 8811 	msr	BASEPRI, r3
}
 8006c46:	bf00      	nop
 8006c48:	3730      	adds	r7, #48	; 0x30
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}
 8006c4e:	bf00      	nop
 8006c50:	20002504 	.word	0x20002504

08006c54 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b08e      	sub	sp, #56	; 0x38
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	60f8      	str	r0, [r7, #12]
 8006c5c:	60b9      	str	r1, [r7, #8]
 8006c5e:	607a      	str	r2, [r7, #4]
 8006c60:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8006c62:	f3ef 8311 	mrs	r3, BASEPRI
 8006c66:	f04f 0120 	mov.w	r1, #32
 8006c6a:	f381 8811 	msr	BASEPRI, r1
 8006c6e:	61fb      	str	r3, [r7, #28]
 8006c70:	4832      	ldr	r0, [pc, #200]	; (8006d3c <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8006c72:	f7ff fc8b 	bl	800658c <_PreparePacket>
 8006c76:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006c78:	69bb      	ldr	r3, [r7, #24]
 8006c7a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	637b      	str	r3, [r7, #52]	; 0x34
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	633b      	str	r3, [r7, #48]	; 0x30
 8006c84:	e00b      	b.n	8006c9e <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8006c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c88:	b2da      	uxtb	r2, r3
 8006c8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c8c:	1c59      	adds	r1, r3, #1
 8006c8e:	6379      	str	r1, [r7, #52]	; 0x34
 8006c90:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c94:	b2d2      	uxtb	r2, r2
 8006c96:	701a      	strb	r2, [r3, #0]
 8006c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c9a:	09db      	lsrs	r3, r3, #7
 8006c9c:	633b      	str	r3, [r7, #48]	; 0x30
 8006c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ca0:	2b7f      	cmp	r3, #127	; 0x7f
 8006ca2:	d8f0      	bhi.n	8006c86 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8006ca4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ca6:	1c5a      	adds	r2, r3, #1
 8006ca8:	637a      	str	r2, [r7, #52]	; 0x34
 8006caa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cac:	b2d2      	uxtb	r2, r2
 8006cae:	701a      	strb	r2, [r3, #0]
 8006cb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cb2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	62bb      	str	r3, [r7, #40]	; 0x28
 8006cbc:	e00b      	b.n	8006cd6 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8006cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cc0:	b2da      	uxtb	r2, r3
 8006cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cc4:	1c59      	adds	r1, r3, #1
 8006cc6:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006cc8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ccc:	b2d2      	uxtb	r2, r2
 8006cce:	701a      	strb	r2, [r3, #0]
 8006cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cd2:	09db      	lsrs	r3, r3, #7
 8006cd4:	62bb      	str	r3, [r7, #40]	; 0x28
 8006cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cd8:	2b7f      	cmp	r3, #127	; 0x7f
 8006cda:	d8f0      	bhi.n	8006cbe <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8006cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cde:	1c5a      	adds	r2, r3, #1
 8006ce0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006ce2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ce4:	b2d2      	uxtb	r2, r2
 8006ce6:	701a      	strb	r2, [r3, #0]
 8006ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cea:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	627b      	str	r3, [r7, #36]	; 0x24
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	623b      	str	r3, [r7, #32]
 8006cf4:	e00b      	b.n	8006d0e <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8006cf6:	6a3b      	ldr	r3, [r7, #32]
 8006cf8:	b2da      	uxtb	r2, r3
 8006cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cfc:	1c59      	adds	r1, r3, #1
 8006cfe:	6279      	str	r1, [r7, #36]	; 0x24
 8006d00:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d04:	b2d2      	uxtb	r2, r2
 8006d06:	701a      	strb	r2, [r3, #0]
 8006d08:	6a3b      	ldr	r3, [r7, #32]
 8006d0a:	09db      	lsrs	r3, r3, #7
 8006d0c:	623b      	str	r3, [r7, #32]
 8006d0e:	6a3b      	ldr	r3, [r7, #32]
 8006d10:	2b7f      	cmp	r3, #127	; 0x7f
 8006d12:	d8f0      	bhi.n	8006cf6 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8006d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d16:	1c5a      	adds	r2, r3, #1
 8006d18:	627a      	str	r2, [r7, #36]	; 0x24
 8006d1a:	6a3a      	ldr	r2, [r7, #32]
 8006d1c:	b2d2      	uxtb	r2, r2
 8006d1e:	701a      	strb	r2, [r3, #0]
 8006d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d22:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006d24:	68fa      	ldr	r2, [r7, #12]
 8006d26:	6979      	ldr	r1, [r7, #20]
 8006d28:	69b8      	ldr	r0, [r7, #24]
 8006d2a:	f7ff fd1d 	bl	8006768 <_SendPacket>
  RECORD_END();
 8006d2e:	69fb      	ldr	r3, [r7, #28]
 8006d30:	f383 8811 	msr	BASEPRI, r3
}
 8006d34:	bf00      	nop
 8006d36:	3738      	adds	r7, #56	; 0x38
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}
 8006d3c:	20002504 	.word	0x20002504

08006d40 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b090      	sub	sp, #64	; 0x40
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	60f8      	str	r0, [r7, #12]
 8006d48:	60b9      	str	r1, [r7, #8]
 8006d4a:	607a      	str	r2, [r7, #4]
 8006d4c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006d4e:	f3ef 8311 	mrs	r3, BASEPRI
 8006d52:	f04f 0120 	mov.w	r1, #32
 8006d56:	f381 8811 	msr	BASEPRI, r1
 8006d5a:	61fb      	str	r3, [r7, #28]
 8006d5c:	4840      	ldr	r0, [pc, #256]	; (8006e60 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8006d5e:	f7ff fc15 	bl	800658c <_PreparePacket>
 8006d62:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006d64:	69bb      	ldr	r3, [r7, #24]
 8006d66:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d70:	e00b      	b.n	8006d8a <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8006d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d74:	b2da      	uxtb	r2, r3
 8006d76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d78:	1c59      	adds	r1, r3, #1
 8006d7a:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006d7c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d80:	b2d2      	uxtb	r2, r2
 8006d82:	701a      	strb	r2, [r3, #0]
 8006d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d86:	09db      	lsrs	r3, r3, #7
 8006d88:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d8c:	2b7f      	cmp	r3, #127	; 0x7f
 8006d8e:	d8f0      	bhi.n	8006d72 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8006d90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d92:	1c5a      	adds	r2, r3, #1
 8006d94:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006d96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d98:	b2d2      	uxtb	r2, r2
 8006d9a:	701a      	strb	r2, [r3, #0]
 8006d9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d9e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	637b      	str	r3, [r7, #52]	; 0x34
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	633b      	str	r3, [r7, #48]	; 0x30
 8006da8:	e00b      	b.n	8006dc2 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8006daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dac:	b2da      	uxtb	r2, r3
 8006dae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006db0:	1c59      	adds	r1, r3, #1
 8006db2:	6379      	str	r1, [r7, #52]	; 0x34
 8006db4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006db8:	b2d2      	uxtb	r2, r2
 8006dba:	701a      	strb	r2, [r3, #0]
 8006dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dbe:	09db      	lsrs	r3, r3, #7
 8006dc0:	633b      	str	r3, [r7, #48]	; 0x30
 8006dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dc4:	2b7f      	cmp	r3, #127	; 0x7f
 8006dc6:	d8f0      	bhi.n	8006daa <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8006dc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dca:	1c5a      	adds	r2, r3, #1
 8006dcc:	637a      	str	r2, [r7, #52]	; 0x34
 8006dce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006dd0:	b2d2      	uxtb	r2, r2
 8006dd2:	701a      	strb	r2, [r3, #0]
 8006dd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dd6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	62bb      	str	r3, [r7, #40]	; 0x28
 8006de0:	e00b      	b.n	8006dfa <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8006de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006de4:	b2da      	uxtb	r2, r3
 8006de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006de8:	1c59      	adds	r1, r3, #1
 8006dea:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006dec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006df0:	b2d2      	uxtb	r2, r2
 8006df2:	701a      	strb	r2, [r3, #0]
 8006df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006df6:	09db      	lsrs	r3, r3, #7
 8006df8:	62bb      	str	r3, [r7, #40]	; 0x28
 8006dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dfc:	2b7f      	cmp	r3, #127	; 0x7f
 8006dfe:	d8f0      	bhi.n	8006de2 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8006e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e02:	1c5a      	adds	r2, r3, #1
 8006e04:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006e06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e08:	b2d2      	uxtb	r2, r2
 8006e0a:	701a      	strb	r2, [r3, #0]
 8006e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e0e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	627b      	str	r3, [r7, #36]	; 0x24
 8006e14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e16:	623b      	str	r3, [r7, #32]
 8006e18:	e00b      	b.n	8006e32 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8006e1a:	6a3b      	ldr	r3, [r7, #32]
 8006e1c:	b2da      	uxtb	r2, r3
 8006e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e20:	1c59      	adds	r1, r3, #1
 8006e22:	6279      	str	r1, [r7, #36]	; 0x24
 8006e24:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e28:	b2d2      	uxtb	r2, r2
 8006e2a:	701a      	strb	r2, [r3, #0]
 8006e2c:	6a3b      	ldr	r3, [r7, #32]
 8006e2e:	09db      	lsrs	r3, r3, #7
 8006e30:	623b      	str	r3, [r7, #32]
 8006e32:	6a3b      	ldr	r3, [r7, #32]
 8006e34:	2b7f      	cmp	r3, #127	; 0x7f
 8006e36:	d8f0      	bhi.n	8006e1a <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8006e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e3a:	1c5a      	adds	r2, r3, #1
 8006e3c:	627a      	str	r2, [r7, #36]	; 0x24
 8006e3e:	6a3a      	ldr	r2, [r7, #32]
 8006e40:	b2d2      	uxtb	r2, r2
 8006e42:	701a      	strb	r2, [r3, #0]
 8006e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e46:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006e48:	68fa      	ldr	r2, [r7, #12]
 8006e4a:	6979      	ldr	r1, [r7, #20]
 8006e4c:	69b8      	ldr	r0, [r7, #24]
 8006e4e:	f7ff fc8b 	bl	8006768 <_SendPacket>
  RECORD_END();
 8006e52:	69fb      	ldr	r3, [r7, #28]
 8006e54:	f383 8811 	msr	BASEPRI, r3
}
 8006e58:	bf00      	nop
 8006e5a:	3740      	adds	r7, #64	; 0x40
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}
 8006e60:	20002504 	.word	0x20002504

08006e64 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b08c      	sub	sp, #48	; 0x30
 8006e68:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8006e6a:	4b58      	ldr	r3, [pc, #352]	; (8006fcc <SEGGER_SYSVIEW_Start+0x168>)
 8006e6c:	2201      	movs	r2, #1
 8006e6e:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006e70:	f3ef 8311 	mrs	r3, BASEPRI
 8006e74:	f04f 0120 	mov.w	r1, #32
 8006e78:	f381 8811 	msr	BASEPRI, r1
 8006e7c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8006e7e:	4b53      	ldr	r3, [pc, #332]	; (8006fcc <SEGGER_SYSVIEW_Start+0x168>)
 8006e80:	785b      	ldrb	r3, [r3, #1]
 8006e82:	220a      	movs	r2, #10
 8006e84:	4952      	ldr	r1, [pc, #328]	; (8006fd0 <SEGGER_SYSVIEW_Start+0x16c>)
 8006e86:	4618      	mov	r0, r3
 8006e88:	f7f9 f9a2 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8006e92:	200a      	movs	r0, #10
 8006e94:	f7ff fe2a 	bl	8006aec <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006e98:	f3ef 8311 	mrs	r3, BASEPRI
 8006e9c:	f04f 0120 	mov.w	r1, #32
 8006ea0:	f381 8811 	msr	BASEPRI, r1
 8006ea4:	60bb      	str	r3, [r7, #8]
 8006ea6:	484b      	ldr	r0, [pc, #300]	; (8006fd4 <SEGGER_SYSVIEW_Start+0x170>)
 8006ea8:	f7ff fb70 	bl	800658c <_PreparePacket>
 8006eac:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006eb6:	4b45      	ldr	r3, [pc, #276]	; (8006fcc <SEGGER_SYSVIEW_Start+0x168>)
 8006eb8:	685b      	ldr	r3, [r3, #4]
 8006eba:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ebc:	e00b      	b.n	8006ed6 <SEGGER_SYSVIEW_Start+0x72>
 8006ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ec0:	b2da      	uxtb	r2, r3
 8006ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ec4:	1c59      	adds	r1, r3, #1
 8006ec6:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006ec8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ecc:	b2d2      	uxtb	r2, r2
 8006ece:	701a      	strb	r2, [r3, #0]
 8006ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ed2:	09db      	lsrs	r3, r3, #7
 8006ed4:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ed8:	2b7f      	cmp	r3, #127	; 0x7f
 8006eda:	d8f0      	bhi.n	8006ebe <SEGGER_SYSVIEW_Start+0x5a>
 8006edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ede:	1c5a      	adds	r2, r3, #1
 8006ee0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006ee2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ee4:	b2d2      	uxtb	r2, r2
 8006ee6:	701a      	strb	r2, [r3, #0]
 8006ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eea:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	627b      	str	r3, [r7, #36]	; 0x24
 8006ef0:	4b36      	ldr	r3, [pc, #216]	; (8006fcc <SEGGER_SYSVIEW_Start+0x168>)
 8006ef2:	689b      	ldr	r3, [r3, #8]
 8006ef4:	623b      	str	r3, [r7, #32]
 8006ef6:	e00b      	b.n	8006f10 <SEGGER_SYSVIEW_Start+0xac>
 8006ef8:	6a3b      	ldr	r3, [r7, #32]
 8006efa:	b2da      	uxtb	r2, r3
 8006efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006efe:	1c59      	adds	r1, r3, #1
 8006f00:	6279      	str	r1, [r7, #36]	; 0x24
 8006f02:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f06:	b2d2      	uxtb	r2, r2
 8006f08:	701a      	strb	r2, [r3, #0]
 8006f0a:	6a3b      	ldr	r3, [r7, #32]
 8006f0c:	09db      	lsrs	r3, r3, #7
 8006f0e:	623b      	str	r3, [r7, #32]
 8006f10:	6a3b      	ldr	r3, [r7, #32]
 8006f12:	2b7f      	cmp	r3, #127	; 0x7f
 8006f14:	d8f0      	bhi.n	8006ef8 <SEGGER_SYSVIEW_Start+0x94>
 8006f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f18:	1c5a      	adds	r2, r3, #1
 8006f1a:	627a      	str	r2, [r7, #36]	; 0x24
 8006f1c:	6a3a      	ldr	r2, [r7, #32]
 8006f1e:	b2d2      	uxtb	r2, r2
 8006f20:	701a      	strb	r2, [r3, #0]
 8006f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f24:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	61fb      	str	r3, [r7, #28]
 8006f2a:	4b28      	ldr	r3, [pc, #160]	; (8006fcc <SEGGER_SYSVIEW_Start+0x168>)
 8006f2c:	691b      	ldr	r3, [r3, #16]
 8006f2e:	61bb      	str	r3, [r7, #24]
 8006f30:	e00b      	b.n	8006f4a <SEGGER_SYSVIEW_Start+0xe6>
 8006f32:	69bb      	ldr	r3, [r7, #24]
 8006f34:	b2da      	uxtb	r2, r3
 8006f36:	69fb      	ldr	r3, [r7, #28]
 8006f38:	1c59      	adds	r1, r3, #1
 8006f3a:	61f9      	str	r1, [r7, #28]
 8006f3c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f40:	b2d2      	uxtb	r2, r2
 8006f42:	701a      	strb	r2, [r3, #0]
 8006f44:	69bb      	ldr	r3, [r7, #24]
 8006f46:	09db      	lsrs	r3, r3, #7
 8006f48:	61bb      	str	r3, [r7, #24]
 8006f4a:	69bb      	ldr	r3, [r7, #24]
 8006f4c:	2b7f      	cmp	r3, #127	; 0x7f
 8006f4e:	d8f0      	bhi.n	8006f32 <SEGGER_SYSVIEW_Start+0xce>
 8006f50:	69fb      	ldr	r3, [r7, #28]
 8006f52:	1c5a      	adds	r2, r3, #1
 8006f54:	61fa      	str	r2, [r7, #28]
 8006f56:	69ba      	ldr	r2, [r7, #24]
 8006f58:	b2d2      	uxtb	r2, r2
 8006f5a:	701a      	strb	r2, [r3, #0]
 8006f5c:	69fb      	ldr	r3, [r7, #28]
 8006f5e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	617b      	str	r3, [r7, #20]
 8006f64:	2300      	movs	r3, #0
 8006f66:	613b      	str	r3, [r7, #16]
 8006f68:	e00b      	b.n	8006f82 <SEGGER_SYSVIEW_Start+0x11e>
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	b2da      	uxtb	r2, r3
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	1c59      	adds	r1, r3, #1
 8006f72:	6179      	str	r1, [r7, #20]
 8006f74:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f78:	b2d2      	uxtb	r2, r2
 8006f7a:	701a      	strb	r2, [r3, #0]
 8006f7c:	693b      	ldr	r3, [r7, #16]
 8006f7e:	09db      	lsrs	r3, r3, #7
 8006f80:	613b      	str	r3, [r7, #16]
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	2b7f      	cmp	r3, #127	; 0x7f
 8006f86:	d8f0      	bhi.n	8006f6a <SEGGER_SYSVIEW_Start+0x106>
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	1c5a      	adds	r2, r3, #1
 8006f8c:	617a      	str	r2, [r7, #20]
 8006f8e:	693a      	ldr	r2, [r7, #16]
 8006f90:	b2d2      	uxtb	r2, r2
 8006f92:	701a      	strb	r2, [r3, #0]
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006f98:	2218      	movs	r2, #24
 8006f9a:	6839      	ldr	r1, [r7, #0]
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f7ff fbe3 	bl	8006768 <_SendPacket>
      RECORD_END();
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006fa8:	4b08      	ldr	r3, [pc, #32]	; (8006fcc <SEGGER_SYSVIEW_Start+0x168>)
 8006faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d002      	beq.n	8006fb6 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006fb0:	4b06      	ldr	r3, [pc, #24]	; (8006fcc <SEGGER_SYSVIEW_Start+0x168>)
 8006fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb4:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8006fb6:	f000 f9eb 	bl	8007390 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8006fba:	f000 f9b1 	bl	8007320 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8006fbe:	f000 fbb3 	bl	8007728 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8006fc2:	bf00      	nop
 8006fc4:	3730      	adds	r7, #48	; 0x30
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}
 8006fca:	bf00      	nop
 8006fcc:	200024d4 	.word	0x200024d4
 8006fd0:	08007bf4 	.word	0x08007bf4
 8006fd4:	20002504 	.word	0x20002504

08006fd8 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b082      	sub	sp, #8
 8006fdc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006fde:	f3ef 8311 	mrs	r3, BASEPRI
 8006fe2:	f04f 0120 	mov.w	r1, #32
 8006fe6:	f381 8811 	msr	BASEPRI, r1
 8006fea:	607b      	str	r3, [r7, #4]
 8006fec:	480b      	ldr	r0, [pc, #44]	; (800701c <SEGGER_SYSVIEW_Stop+0x44>)
 8006fee:	f7ff facd 	bl	800658c <_PreparePacket>
 8006ff2:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8006ff4:	4b0a      	ldr	r3, [pc, #40]	; (8007020 <SEGGER_SYSVIEW_Stop+0x48>)
 8006ff6:	781b      	ldrb	r3, [r3, #0]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d007      	beq.n	800700c <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006ffc:	220b      	movs	r2, #11
 8006ffe:	6839      	ldr	r1, [r7, #0]
 8007000:	6838      	ldr	r0, [r7, #0]
 8007002:	f7ff fbb1 	bl	8006768 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8007006:	4b06      	ldr	r3, [pc, #24]	; (8007020 <SEGGER_SYSVIEW_Stop+0x48>)
 8007008:	2200      	movs	r2, #0
 800700a:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f383 8811 	msr	BASEPRI, r3
}
 8007012:	bf00      	nop
 8007014:	3708      	adds	r7, #8
 8007016:	46bd      	mov	sp, r7
 8007018:	bd80      	pop	{r7, pc}
 800701a:	bf00      	nop
 800701c:	20002504 	.word	0x20002504
 8007020:	200024d4 	.word	0x200024d4

08007024 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8007024:	b580      	push	{r7, lr}
 8007026:	b08c      	sub	sp, #48	; 0x30
 8007028:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800702a:	f3ef 8311 	mrs	r3, BASEPRI
 800702e:	f04f 0120 	mov.w	r1, #32
 8007032:	f381 8811 	msr	BASEPRI, r1
 8007036:	60fb      	str	r3, [r7, #12]
 8007038:	4845      	ldr	r0, [pc, #276]	; (8007150 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800703a:	f7ff faa7 	bl	800658c <_PreparePacket>
 800703e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007048:	4b42      	ldr	r3, [pc, #264]	; (8007154 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	62bb      	str	r3, [r7, #40]	; 0x28
 800704e:	e00b      	b.n	8007068 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8007050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007052:	b2da      	uxtb	r2, r3
 8007054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007056:	1c59      	adds	r1, r3, #1
 8007058:	62f9      	str	r1, [r7, #44]	; 0x2c
 800705a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800705e:	b2d2      	uxtb	r2, r2
 8007060:	701a      	strb	r2, [r3, #0]
 8007062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007064:	09db      	lsrs	r3, r3, #7
 8007066:	62bb      	str	r3, [r7, #40]	; 0x28
 8007068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800706a:	2b7f      	cmp	r3, #127	; 0x7f
 800706c:	d8f0      	bhi.n	8007050 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800706e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007070:	1c5a      	adds	r2, r3, #1
 8007072:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007074:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007076:	b2d2      	uxtb	r2, r2
 8007078:	701a      	strb	r2, [r3, #0]
 800707a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800707c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	627b      	str	r3, [r7, #36]	; 0x24
 8007082:	4b34      	ldr	r3, [pc, #208]	; (8007154 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007084:	689b      	ldr	r3, [r3, #8]
 8007086:	623b      	str	r3, [r7, #32]
 8007088:	e00b      	b.n	80070a2 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800708a:	6a3b      	ldr	r3, [r7, #32]
 800708c:	b2da      	uxtb	r2, r3
 800708e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007090:	1c59      	adds	r1, r3, #1
 8007092:	6279      	str	r1, [r7, #36]	; 0x24
 8007094:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007098:	b2d2      	uxtb	r2, r2
 800709a:	701a      	strb	r2, [r3, #0]
 800709c:	6a3b      	ldr	r3, [r7, #32]
 800709e:	09db      	lsrs	r3, r3, #7
 80070a0:	623b      	str	r3, [r7, #32]
 80070a2:	6a3b      	ldr	r3, [r7, #32]
 80070a4:	2b7f      	cmp	r3, #127	; 0x7f
 80070a6:	d8f0      	bhi.n	800708a <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80070a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070aa:	1c5a      	adds	r2, r3, #1
 80070ac:	627a      	str	r2, [r7, #36]	; 0x24
 80070ae:	6a3a      	ldr	r2, [r7, #32]
 80070b0:	b2d2      	uxtb	r2, r2
 80070b2:	701a      	strb	r2, [r3, #0]
 80070b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	61fb      	str	r3, [r7, #28]
 80070bc:	4b25      	ldr	r3, [pc, #148]	; (8007154 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80070be:	691b      	ldr	r3, [r3, #16]
 80070c0:	61bb      	str	r3, [r7, #24]
 80070c2:	e00b      	b.n	80070dc <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80070c4:	69bb      	ldr	r3, [r7, #24]
 80070c6:	b2da      	uxtb	r2, r3
 80070c8:	69fb      	ldr	r3, [r7, #28]
 80070ca:	1c59      	adds	r1, r3, #1
 80070cc:	61f9      	str	r1, [r7, #28]
 80070ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80070d2:	b2d2      	uxtb	r2, r2
 80070d4:	701a      	strb	r2, [r3, #0]
 80070d6:	69bb      	ldr	r3, [r7, #24]
 80070d8:	09db      	lsrs	r3, r3, #7
 80070da:	61bb      	str	r3, [r7, #24]
 80070dc:	69bb      	ldr	r3, [r7, #24]
 80070de:	2b7f      	cmp	r3, #127	; 0x7f
 80070e0:	d8f0      	bhi.n	80070c4 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80070e2:	69fb      	ldr	r3, [r7, #28]
 80070e4:	1c5a      	adds	r2, r3, #1
 80070e6:	61fa      	str	r2, [r7, #28]
 80070e8:	69ba      	ldr	r2, [r7, #24]
 80070ea:	b2d2      	uxtb	r2, r2
 80070ec:	701a      	strb	r2, [r3, #0]
 80070ee:	69fb      	ldr	r3, [r7, #28]
 80070f0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	617b      	str	r3, [r7, #20]
 80070f6:	2300      	movs	r3, #0
 80070f8:	613b      	str	r3, [r7, #16]
 80070fa:	e00b      	b.n	8007114 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	b2da      	uxtb	r2, r3
 8007100:	697b      	ldr	r3, [r7, #20]
 8007102:	1c59      	adds	r1, r3, #1
 8007104:	6179      	str	r1, [r7, #20]
 8007106:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800710a:	b2d2      	uxtb	r2, r2
 800710c:	701a      	strb	r2, [r3, #0]
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	09db      	lsrs	r3, r3, #7
 8007112:	613b      	str	r3, [r7, #16]
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	2b7f      	cmp	r3, #127	; 0x7f
 8007118:	d8f0      	bhi.n	80070fc <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	1c5a      	adds	r2, r3, #1
 800711e:	617a      	str	r2, [r7, #20]
 8007120:	693a      	ldr	r2, [r7, #16]
 8007122:	b2d2      	uxtb	r2, r2
 8007124:	701a      	strb	r2, [r3, #0]
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800712a:	2218      	movs	r2, #24
 800712c:	6879      	ldr	r1, [r7, #4]
 800712e:	68b8      	ldr	r0, [r7, #8]
 8007130:	f7ff fb1a 	bl	8006768 <_SendPacket>
  RECORD_END();
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800713a:	4b06      	ldr	r3, [pc, #24]	; (8007154 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800713c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800713e:	2b00      	cmp	r3, #0
 8007140:	d002      	beq.n	8007148 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8007142:	4b04      	ldr	r3, [pc, #16]	; (8007154 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007146:	4798      	blx	r3
  }
}
 8007148:	bf00      	nop
 800714a:	3730      	adds	r7, #48	; 0x30
 800714c:	46bd      	mov	sp, r7
 800714e:	bd80      	pop	{r7, pc}
 8007150:	20002504 	.word	0x20002504
 8007154:	200024d4 	.word	0x200024d4

08007158 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8007158:	b580      	push	{r7, lr}
 800715a:	b092      	sub	sp, #72	; 0x48
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8007160:	f3ef 8311 	mrs	r3, BASEPRI
 8007164:	f04f 0120 	mov.w	r1, #32
 8007168:	f381 8811 	msr	BASEPRI, r1
 800716c:	617b      	str	r3, [r7, #20]
 800716e:	486a      	ldr	r0, [pc, #424]	; (8007318 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8007170:	f7ff fa0c 	bl	800658c <_PreparePacket>
 8007174:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	647b      	str	r3, [r7, #68]	; 0x44
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681a      	ldr	r2, [r3, #0]
 8007182:	4b66      	ldr	r3, [pc, #408]	; (800731c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8007184:	691b      	ldr	r3, [r3, #16]
 8007186:	1ad3      	subs	r3, r2, r3
 8007188:	643b      	str	r3, [r7, #64]	; 0x40
 800718a:	e00b      	b.n	80071a4 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 800718c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800718e:	b2da      	uxtb	r2, r3
 8007190:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007192:	1c59      	adds	r1, r3, #1
 8007194:	6479      	str	r1, [r7, #68]	; 0x44
 8007196:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800719a:	b2d2      	uxtb	r2, r2
 800719c:	701a      	strb	r2, [r3, #0]
 800719e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071a0:	09db      	lsrs	r3, r3, #7
 80071a2:	643b      	str	r3, [r7, #64]	; 0x40
 80071a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071a6:	2b7f      	cmp	r3, #127	; 0x7f
 80071a8:	d8f0      	bhi.n	800718c <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80071aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071ac:	1c5a      	adds	r2, r3, #1
 80071ae:	647a      	str	r2, [r7, #68]	; 0x44
 80071b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80071b2:	b2d2      	uxtb	r2, r2
 80071b4:	701a      	strb	r2, [r3, #0]
 80071b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071b8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	689b      	ldr	r3, [r3, #8]
 80071c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80071c4:	e00b      	b.n	80071de <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80071c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071c8:	b2da      	uxtb	r2, r3
 80071ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071cc:	1c59      	adds	r1, r3, #1
 80071ce:	63f9      	str	r1, [r7, #60]	; 0x3c
 80071d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80071d4:	b2d2      	uxtb	r2, r2
 80071d6:	701a      	strb	r2, [r3, #0]
 80071d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071da:	09db      	lsrs	r3, r3, #7
 80071dc:	63bb      	str	r3, [r7, #56]	; 0x38
 80071de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071e0:	2b7f      	cmp	r3, #127	; 0x7f
 80071e2:	d8f0      	bhi.n	80071c6 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80071e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071e6:	1c5a      	adds	r2, r3, #1
 80071e8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80071ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80071ec:	b2d2      	uxtb	r2, r2
 80071ee:	701a      	strb	r2, [r3, #0]
 80071f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071f2:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	2220      	movs	r2, #32
 80071fa:	4619      	mov	r1, r3
 80071fc:	68f8      	ldr	r0, [r7, #12]
 80071fe:	f7ff f995 	bl	800652c <_EncodeStr>
 8007202:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8007204:	2209      	movs	r2, #9
 8007206:	68f9      	ldr	r1, [r7, #12]
 8007208:	6938      	ldr	r0, [r7, #16]
 800720a:	f7ff faad 	bl	8006768 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	637b      	str	r3, [r7, #52]	; 0x34
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681a      	ldr	r2, [r3, #0]
 800721a:	4b40      	ldr	r3, [pc, #256]	; (800731c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800721c:	691b      	ldr	r3, [r3, #16]
 800721e:	1ad3      	subs	r3, r2, r3
 8007220:	633b      	str	r3, [r7, #48]	; 0x30
 8007222:	e00b      	b.n	800723c <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8007224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007226:	b2da      	uxtb	r2, r3
 8007228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800722a:	1c59      	adds	r1, r3, #1
 800722c:	6379      	str	r1, [r7, #52]	; 0x34
 800722e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007232:	b2d2      	uxtb	r2, r2
 8007234:	701a      	strb	r2, [r3, #0]
 8007236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007238:	09db      	lsrs	r3, r3, #7
 800723a:	633b      	str	r3, [r7, #48]	; 0x30
 800723c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800723e:	2b7f      	cmp	r3, #127	; 0x7f
 8007240:	d8f0      	bhi.n	8007224 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8007242:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007244:	1c5a      	adds	r2, r3, #1
 8007246:	637a      	str	r2, [r7, #52]	; 0x34
 8007248:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800724a:	b2d2      	uxtb	r2, r2
 800724c:	701a      	strb	r2, [r3, #0]
 800724e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007250:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	68db      	ldr	r3, [r3, #12]
 800725a:	62bb      	str	r3, [r7, #40]	; 0x28
 800725c:	e00b      	b.n	8007276 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800725e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007260:	b2da      	uxtb	r2, r3
 8007262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007264:	1c59      	adds	r1, r3, #1
 8007266:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007268:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800726c:	b2d2      	uxtb	r2, r2
 800726e:	701a      	strb	r2, [r3, #0]
 8007270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007272:	09db      	lsrs	r3, r3, #7
 8007274:	62bb      	str	r3, [r7, #40]	; 0x28
 8007276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007278:	2b7f      	cmp	r3, #127	; 0x7f
 800727a:	d8f0      	bhi.n	800725e <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 800727c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800727e:	1c5a      	adds	r2, r3, #1
 8007280:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007282:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007284:	b2d2      	uxtb	r2, r2
 8007286:	701a      	strb	r2, [r3, #0]
 8007288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800728a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	627b      	str	r3, [r7, #36]	; 0x24
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	691b      	ldr	r3, [r3, #16]
 8007294:	623b      	str	r3, [r7, #32]
 8007296:	e00b      	b.n	80072b0 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8007298:	6a3b      	ldr	r3, [r7, #32]
 800729a:	b2da      	uxtb	r2, r3
 800729c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800729e:	1c59      	adds	r1, r3, #1
 80072a0:	6279      	str	r1, [r7, #36]	; 0x24
 80072a2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80072a6:	b2d2      	uxtb	r2, r2
 80072a8:	701a      	strb	r2, [r3, #0]
 80072aa:	6a3b      	ldr	r3, [r7, #32]
 80072ac:	09db      	lsrs	r3, r3, #7
 80072ae:	623b      	str	r3, [r7, #32]
 80072b0:	6a3b      	ldr	r3, [r7, #32]
 80072b2:	2b7f      	cmp	r3, #127	; 0x7f
 80072b4:	d8f0      	bhi.n	8007298 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80072b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b8:	1c5a      	adds	r2, r3, #1
 80072ba:	627a      	str	r2, [r7, #36]	; 0x24
 80072bc:	6a3a      	ldr	r2, [r7, #32]
 80072be:	b2d2      	uxtb	r2, r2
 80072c0:	701a      	strb	r2, [r3, #0]
 80072c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072c4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	61fb      	str	r3, [r7, #28]
 80072ca:	2300      	movs	r3, #0
 80072cc:	61bb      	str	r3, [r7, #24]
 80072ce:	e00b      	b.n	80072e8 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80072d0:	69bb      	ldr	r3, [r7, #24]
 80072d2:	b2da      	uxtb	r2, r3
 80072d4:	69fb      	ldr	r3, [r7, #28]
 80072d6:	1c59      	adds	r1, r3, #1
 80072d8:	61f9      	str	r1, [r7, #28]
 80072da:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80072de:	b2d2      	uxtb	r2, r2
 80072e0:	701a      	strb	r2, [r3, #0]
 80072e2:	69bb      	ldr	r3, [r7, #24]
 80072e4:	09db      	lsrs	r3, r3, #7
 80072e6:	61bb      	str	r3, [r7, #24]
 80072e8:	69bb      	ldr	r3, [r7, #24]
 80072ea:	2b7f      	cmp	r3, #127	; 0x7f
 80072ec:	d8f0      	bhi.n	80072d0 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80072ee:	69fb      	ldr	r3, [r7, #28]
 80072f0:	1c5a      	adds	r2, r3, #1
 80072f2:	61fa      	str	r2, [r7, #28]
 80072f4:	69ba      	ldr	r2, [r7, #24]
 80072f6:	b2d2      	uxtb	r2, r2
 80072f8:	701a      	strb	r2, [r3, #0]
 80072fa:	69fb      	ldr	r3, [r7, #28]
 80072fc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80072fe:	2215      	movs	r2, #21
 8007300:	68f9      	ldr	r1, [r7, #12]
 8007302:	6938      	ldr	r0, [r7, #16]
 8007304:	f7ff fa30 	bl	8006768 <_SendPacket>
  RECORD_END();
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	f383 8811 	msr	BASEPRI, r3
}
 800730e:	bf00      	nop
 8007310:	3748      	adds	r7, #72	; 0x48
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}
 8007316:	bf00      	nop
 8007318:	20002504 	.word	0x20002504
 800731c:	200024d4 	.word	0x200024d4

08007320 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8007320:	b580      	push	{r7, lr}
 8007322:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8007324:	4b07      	ldr	r3, [pc, #28]	; (8007344 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8007326:	6a1b      	ldr	r3, [r3, #32]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d008      	beq.n	800733e <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800732c:	4b05      	ldr	r3, [pc, #20]	; (8007344 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800732e:	6a1b      	ldr	r3, [r3, #32]
 8007330:	685b      	ldr	r3, [r3, #4]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d003      	beq.n	800733e <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8007336:	4b03      	ldr	r3, [pc, #12]	; (8007344 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8007338:	6a1b      	ldr	r3, [r3, #32]
 800733a:	685b      	ldr	r3, [r3, #4]
 800733c:	4798      	blx	r3
  }
}
 800733e:	bf00      	nop
 8007340:	bd80      	pop	{r7, pc}
 8007342:	bf00      	nop
 8007344:	200024d4 	.word	0x200024d4

08007348 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8007348:	b580      	push	{r7, lr}
 800734a:	b086      	sub	sp, #24
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007350:	f3ef 8311 	mrs	r3, BASEPRI
 8007354:	f04f 0120 	mov.w	r1, #32
 8007358:	f381 8811 	msr	BASEPRI, r1
 800735c:	617b      	str	r3, [r7, #20]
 800735e:	480b      	ldr	r0, [pc, #44]	; (800738c <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8007360:	f7ff f914 	bl	800658c <_PreparePacket>
 8007364:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007366:	2280      	movs	r2, #128	; 0x80
 8007368:	6879      	ldr	r1, [r7, #4]
 800736a:	6938      	ldr	r0, [r7, #16]
 800736c:	f7ff f8de 	bl	800652c <_EncodeStr>
 8007370:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8007372:	220e      	movs	r2, #14
 8007374:	68f9      	ldr	r1, [r7, #12]
 8007376:	6938      	ldr	r0, [r7, #16]
 8007378:	f7ff f9f6 	bl	8006768 <_SendPacket>
  RECORD_END();
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	f383 8811 	msr	BASEPRI, r3
}
 8007382:	bf00      	nop
 8007384:	3718      	adds	r7, #24
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}
 800738a:	bf00      	nop
 800738c:	20002504 	.word	0x20002504

08007390 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8007390:	b590      	push	{r4, r7, lr}
 8007392:	b083      	sub	sp, #12
 8007394:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8007396:	4b15      	ldr	r3, [pc, #84]	; (80073ec <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007398:	6a1b      	ldr	r3, [r3, #32]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d01a      	beq.n	80073d4 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800739e:	4b13      	ldr	r3, [pc, #76]	; (80073ec <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80073a0:	6a1b      	ldr	r3, [r3, #32]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d015      	beq.n	80073d4 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80073a8:	4b10      	ldr	r3, [pc, #64]	; (80073ec <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80073aa:	6a1b      	ldr	r3, [r3, #32]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	4798      	blx	r3
 80073b0:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80073b4:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80073b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80073ba:	f04f 0200 	mov.w	r2, #0
 80073be:	f04f 0300 	mov.w	r3, #0
 80073c2:	000a      	movs	r2, r1
 80073c4:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80073c6:	4613      	mov	r3, r2
 80073c8:	461a      	mov	r2, r3
 80073ca:	4621      	mov	r1, r4
 80073cc:	200d      	movs	r0, #13
 80073ce:	f7ff fbe7 	bl	8006ba0 <SEGGER_SYSVIEW_RecordU32x2>
 80073d2:	e006      	b.n	80073e2 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80073d4:	4b06      	ldr	r3, [pc, #24]	; (80073f0 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4619      	mov	r1, r3
 80073da:	200c      	movs	r0, #12
 80073dc:	f7ff fba4 	bl	8006b28 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80073e0:	bf00      	nop
 80073e2:	bf00      	nop
 80073e4:	370c      	adds	r7, #12
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd90      	pop	{r4, r7, pc}
 80073ea:	bf00      	nop
 80073ec:	200024d4 	.word	0x200024d4
 80073f0:	e0001004 	.word	0xe0001004

080073f4 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b082      	sub	sp, #8
 80073f8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80073fa:	f3ef 8311 	mrs	r3, BASEPRI
 80073fe:	f04f 0120 	mov.w	r1, #32
 8007402:	f381 8811 	msr	BASEPRI, r1
 8007406:	607b      	str	r3, [r7, #4]
 8007408:	4807      	ldr	r0, [pc, #28]	; (8007428 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800740a:	f7ff f8bf 	bl	800658c <_PreparePacket>
 800740e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8007410:	2211      	movs	r2, #17
 8007412:	6839      	ldr	r1, [r7, #0]
 8007414:	6838      	ldr	r0, [r7, #0]
 8007416:	f7ff f9a7 	bl	8006768 <_SendPacket>
  RECORD_END();
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	f383 8811 	msr	BASEPRI, r3
}
 8007420:	bf00      	nop
 8007422:	3708      	adds	r7, #8
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}
 8007428:	20002504 	.word	0x20002504

0800742c <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800742c:	b580      	push	{r7, lr}
 800742e:	b088      	sub	sp, #32
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007434:	f3ef 8311 	mrs	r3, BASEPRI
 8007438:	f04f 0120 	mov.w	r1, #32
 800743c:	f381 8811 	msr	BASEPRI, r1
 8007440:	617b      	str	r3, [r7, #20]
 8007442:	4819      	ldr	r0, [pc, #100]	; (80074a8 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8007444:	f7ff f8a2 	bl	800658c <_PreparePacket>
 8007448:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800744e:	4b17      	ldr	r3, [pc, #92]	; (80074ac <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8007450:	691b      	ldr	r3, [r3, #16]
 8007452:	687a      	ldr	r2, [r7, #4]
 8007454:	1ad3      	subs	r3, r2, r3
 8007456:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	61fb      	str	r3, [r7, #28]
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	61bb      	str	r3, [r7, #24]
 8007460:	e00b      	b.n	800747a <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8007462:	69bb      	ldr	r3, [r7, #24]
 8007464:	b2da      	uxtb	r2, r3
 8007466:	69fb      	ldr	r3, [r7, #28]
 8007468:	1c59      	adds	r1, r3, #1
 800746a:	61f9      	str	r1, [r7, #28]
 800746c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007470:	b2d2      	uxtb	r2, r2
 8007472:	701a      	strb	r2, [r3, #0]
 8007474:	69bb      	ldr	r3, [r7, #24]
 8007476:	09db      	lsrs	r3, r3, #7
 8007478:	61bb      	str	r3, [r7, #24]
 800747a:	69bb      	ldr	r3, [r7, #24]
 800747c:	2b7f      	cmp	r3, #127	; 0x7f
 800747e:	d8f0      	bhi.n	8007462 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8007480:	69fb      	ldr	r3, [r7, #28]
 8007482:	1c5a      	adds	r2, r3, #1
 8007484:	61fa      	str	r2, [r7, #28]
 8007486:	69ba      	ldr	r2, [r7, #24]
 8007488:	b2d2      	uxtb	r2, r2
 800748a:	701a      	strb	r2, [r3, #0]
 800748c:	69fb      	ldr	r3, [r7, #28]
 800748e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8007490:	2208      	movs	r2, #8
 8007492:	68f9      	ldr	r1, [r7, #12]
 8007494:	6938      	ldr	r0, [r7, #16]
 8007496:	f7ff f967 	bl	8006768 <_SendPacket>
  RECORD_END();
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	f383 8811 	msr	BASEPRI, r3
}
 80074a0:	bf00      	nop
 80074a2:	3720      	adds	r7, #32
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}
 80074a8:	20002504 	.word	0x20002504
 80074ac:	200024d4 	.word	0x200024d4

080074b0 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b088      	sub	sp, #32
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80074b8:	f3ef 8311 	mrs	r3, BASEPRI
 80074bc:	f04f 0120 	mov.w	r1, #32
 80074c0:	f381 8811 	msr	BASEPRI, r1
 80074c4:	617b      	str	r3, [r7, #20]
 80074c6:	4819      	ldr	r0, [pc, #100]	; (800752c <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80074c8:	f7ff f860 	bl	800658c <_PreparePacket>
 80074cc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80074ce:	693b      	ldr	r3, [r7, #16]
 80074d0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80074d2:	4b17      	ldr	r3, [pc, #92]	; (8007530 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80074d4:	691b      	ldr	r3, [r3, #16]
 80074d6:	687a      	ldr	r2, [r7, #4]
 80074d8:	1ad3      	subs	r3, r2, r3
 80074da:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	61fb      	str	r3, [r7, #28]
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	61bb      	str	r3, [r7, #24]
 80074e4:	e00b      	b.n	80074fe <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80074e6:	69bb      	ldr	r3, [r7, #24]
 80074e8:	b2da      	uxtb	r2, r3
 80074ea:	69fb      	ldr	r3, [r7, #28]
 80074ec:	1c59      	adds	r1, r3, #1
 80074ee:	61f9      	str	r1, [r7, #28]
 80074f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80074f4:	b2d2      	uxtb	r2, r2
 80074f6:	701a      	strb	r2, [r3, #0]
 80074f8:	69bb      	ldr	r3, [r7, #24]
 80074fa:	09db      	lsrs	r3, r3, #7
 80074fc:	61bb      	str	r3, [r7, #24]
 80074fe:	69bb      	ldr	r3, [r7, #24]
 8007500:	2b7f      	cmp	r3, #127	; 0x7f
 8007502:	d8f0      	bhi.n	80074e6 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8007504:	69fb      	ldr	r3, [r7, #28]
 8007506:	1c5a      	adds	r2, r3, #1
 8007508:	61fa      	str	r2, [r7, #28]
 800750a:	69ba      	ldr	r2, [r7, #24]
 800750c:	b2d2      	uxtb	r2, r2
 800750e:	701a      	strb	r2, [r3, #0]
 8007510:	69fb      	ldr	r3, [r7, #28]
 8007512:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8007514:	2204      	movs	r2, #4
 8007516:	68f9      	ldr	r1, [r7, #12]
 8007518:	6938      	ldr	r0, [r7, #16]
 800751a:	f7ff f925 	bl	8006768 <_SendPacket>
  RECORD_END();
 800751e:	697b      	ldr	r3, [r7, #20]
 8007520:	f383 8811 	msr	BASEPRI, r3
}
 8007524:	bf00      	nop
 8007526:	3720      	adds	r7, #32
 8007528:	46bd      	mov	sp, r7
 800752a:	bd80      	pop	{r7, pc}
 800752c:	20002504 	.word	0x20002504
 8007530:	200024d4 	.word	0x200024d4

08007534 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8007534:	b580      	push	{r7, lr}
 8007536:	b088      	sub	sp, #32
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800753c:	f3ef 8311 	mrs	r3, BASEPRI
 8007540:	f04f 0120 	mov.w	r1, #32
 8007544:	f381 8811 	msr	BASEPRI, r1
 8007548:	617b      	str	r3, [r7, #20]
 800754a:	4819      	ldr	r0, [pc, #100]	; (80075b0 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800754c:	f7ff f81e 	bl	800658c <_PreparePacket>
 8007550:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007552:	693b      	ldr	r3, [r7, #16]
 8007554:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007556:	4b17      	ldr	r3, [pc, #92]	; (80075b4 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8007558:	691b      	ldr	r3, [r3, #16]
 800755a:	687a      	ldr	r2, [r7, #4]
 800755c:	1ad3      	subs	r3, r2, r3
 800755e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	61fb      	str	r3, [r7, #28]
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	61bb      	str	r3, [r7, #24]
 8007568:	e00b      	b.n	8007582 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800756a:	69bb      	ldr	r3, [r7, #24]
 800756c:	b2da      	uxtb	r2, r3
 800756e:	69fb      	ldr	r3, [r7, #28]
 8007570:	1c59      	adds	r1, r3, #1
 8007572:	61f9      	str	r1, [r7, #28]
 8007574:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007578:	b2d2      	uxtb	r2, r2
 800757a:	701a      	strb	r2, [r3, #0]
 800757c:	69bb      	ldr	r3, [r7, #24]
 800757e:	09db      	lsrs	r3, r3, #7
 8007580:	61bb      	str	r3, [r7, #24]
 8007582:	69bb      	ldr	r3, [r7, #24]
 8007584:	2b7f      	cmp	r3, #127	; 0x7f
 8007586:	d8f0      	bhi.n	800756a <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8007588:	69fb      	ldr	r3, [r7, #28]
 800758a:	1c5a      	adds	r2, r3, #1
 800758c:	61fa      	str	r2, [r7, #28]
 800758e:	69ba      	ldr	r2, [r7, #24]
 8007590:	b2d2      	uxtb	r2, r2
 8007592:	701a      	strb	r2, [r3, #0]
 8007594:	69fb      	ldr	r3, [r7, #28]
 8007596:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8007598:	2206      	movs	r2, #6
 800759a:	68f9      	ldr	r1, [r7, #12]
 800759c:	6938      	ldr	r0, [r7, #16]
 800759e:	f7ff f8e3 	bl	8006768 <_SendPacket>
  RECORD_END();
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	f383 8811 	msr	BASEPRI, r3
}
 80075a8:	bf00      	nop
 80075aa:	3720      	adds	r7, #32
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bd80      	pop	{r7, pc}
 80075b0:	20002504 	.word	0x20002504
 80075b4:	200024d4 	.word	0x200024d4

080075b8 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80075b8:	b480      	push	{r7}
 80075ba:	b083      	sub	sp, #12
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80075c0:	4b04      	ldr	r3, [pc, #16]	; (80075d4 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80075c2:	691b      	ldr	r3, [r3, #16]
 80075c4:	687a      	ldr	r2, [r7, #4]
 80075c6:	1ad3      	subs	r3, r2, r3
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	370c      	adds	r7, #12
 80075cc:	46bd      	mov	sp, r7
 80075ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d2:	4770      	bx	lr
 80075d4:	200024d4 	.word	0x200024d4

080075d8 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80075d8:	b580      	push	{r7, lr}
 80075da:	b08c      	sub	sp, #48	; 0x30
 80075dc:	af00      	add	r7, sp, #0
 80075de:	4603      	mov	r3, r0
 80075e0:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80075e2:	4b40      	ldr	r3, [pc, #256]	; (80076e4 <SEGGER_SYSVIEW_SendModule+0x10c>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d077      	beq.n	80076da <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 80075ea:	4b3e      	ldr	r3, [pc, #248]	; (80076e4 <SEGGER_SYSVIEW_SendModule+0x10c>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80075f0:	2300      	movs	r3, #0
 80075f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80075f4:	e008      	b.n	8007608 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80075f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075f8:	691b      	ldr	r3, [r3, #16]
 80075fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80075fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d007      	beq.n	8007612 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8007602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007604:	3301      	adds	r3, #1
 8007606:	62bb      	str	r3, [r7, #40]	; 0x28
 8007608:	79fb      	ldrb	r3, [r7, #7]
 800760a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800760c:	429a      	cmp	r2, r3
 800760e:	d3f2      	bcc.n	80075f6 <SEGGER_SYSVIEW_SendModule+0x1e>
 8007610:	e000      	b.n	8007614 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8007612:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8007614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007616:	2b00      	cmp	r3, #0
 8007618:	d055      	beq.n	80076c6 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800761a:	f3ef 8311 	mrs	r3, BASEPRI
 800761e:	f04f 0120 	mov.w	r1, #32
 8007622:	f381 8811 	msr	BASEPRI, r1
 8007626:	617b      	str	r3, [r7, #20]
 8007628:	482f      	ldr	r0, [pc, #188]	; (80076e8 <SEGGER_SYSVIEW_SendModule+0x110>)
 800762a:	f7fe ffaf 	bl	800658c <_PreparePacket>
 800762e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	627b      	str	r3, [r7, #36]	; 0x24
 8007638:	79fb      	ldrb	r3, [r7, #7]
 800763a:	623b      	str	r3, [r7, #32]
 800763c:	e00b      	b.n	8007656 <SEGGER_SYSVIEW_SendModule+0x7e>
 800763e:	6a3b      	ldr	r3, [r7, #32]
 8007640:	b2da      	uxtb	r2, r3
 8007642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007644:	1c59      	adds	r1, r3, #1
 8007646:	6279      	str	r1, [r7, #36]	; 0x24
 8007648:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800764c:	b2d2      	uxtb	r2, r2
 800764e:	701a      	strb	r2, [r3, #0]
 8007650:	6a3b      	ldr	r3, [r7, #32]
 8007652:	09db      	lsrs	r3, r3, #7
 8007654:	623b      	str	r3, [r7, #32]
 8007656:	6a3b      	ldr	r3, [r7, #32]
 8007658:	2b7f      	cmp	r3, #127	; 0x7f
 800765a:	d8f0      	bhi.n	800763e <SEGGER_SYSVIEW_SendModule+0x66>
 800765c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800765e:	1c5a      	adds	r2, r3, #1
 8007660:	627a      	str	r2, [r7, #36]	; 0x24
 8007662:	6a3a      	ldr	r2, [r7, #32]
 8007664:	b2d2      	uxtb	r2, r2
 8007666:	701a      	strb	r2, [r3, #0]
 8007668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800766a:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	61fb      	str	r3, [r7, #28]
 8007670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007672:	689b      	ldr	r3, [r3, #8]
 8007674:	61bb      	str	r3, [r7, #24]
 8007676:	e00b      	b.n	8007690 <SEGGER_SYSVIEW_SendModule+0xb8>
 8007678:	69bb      	ldr	r3, [r7, #24]
 800767a:	b2da      	uxtb	r2, r3
 800767c:	69fb      	ldr	r3, [r7, #28]
 800767e:	1c59      	adds	r1, r3, #1
 8007680:	61f9      	str	r1, [r7, #28]
 8007682:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007686:	b2d2      	uxtb	r2, r2
 8007688:	701a      	strb	r2, [r3, #0]
 800768a:	69bb      	ldr	r3, [r7, #24]
 800768c:	09db      	lsrs	r3, r3, #7
 800768e:	61bb      	str	r3, [r7, #24]
 8007690:	69bb      	ldr	r3, [r7, #24]
 8007692:	2b7f      	cmp	r3, #127	; 0x7f
 8007694:	d8f0      	bhi.n	8007678 <SEGGER_SYSVIEW_SendModule+0xa0>
 8007696:	69fb      	ldr	r3, [r7, #28]
 8007698:	1c5a      	adds	r2, r3, #1
 800769a:	61fa      	str	r2, [r7, #28]
 800769c:	69ba      	ldr	r2, [r7, #24]
 800769e:	b2d2      	uxtb	r2, r2
 80076a0:	701a      	strb	r2, [r3, #0]
 80076a2:	69fb      	ldr	r3, [r7, #28]
 80076a4:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80076a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	2280      	movs	r2, #128	; 0x80
 80076ac:	4619      	mov	r1, r3
 80076ae:	68f8      	ldr	r0, [r7, #12]
 80076b0:	f7fe ff3c 	bl	800652c <_EncodeStr>
 80076b4:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80076b6:	2216      	movs	r2, #22
 80076b8:	68f9      	ldr	r1, [r7, #12]
 80076ba:	6938      	ldr	r0, [r7, #16]
 80076bc:	f7ff f854 	bl	8006768 <_SendPacket>
      RECORD_END();
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 80076c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d006      	beq.n	80076da <SEGGER_SYSVIEW_SendModule+0x102>
 80076cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076ce:	68db      	ldr	r3, [r3, #12]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d002      	beq.n	80076da <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 80076d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076d6:	68db      	ldr	r3, [r3, #12]
 80076d8:	4798      	blx	r3
    }
  }
}
 80076da:	bf00      	nop
 80076dc:	3730      	adds	r7, #48	; 0x30
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}
 80076e2:	bf00      	nop
 80076e4:	200024fc 	.word	0x200024fc
 80076e8:	20002504 	.word	0x20002504

080076ec <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b082      	sub	sp, #8
 80076f0:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80076f2:	4b0c      	ldr	r3, [pc, #48]	; (8007724 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d00f      	beq.n	800771a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80076fa:	4b0a      	ldr	r3, [pc, #40]	; (8007724 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	68db      	ldr	r3, [r3, #12]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d002      	beq.n	800770e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	68db      	ldr	r3, [r3, #12]
 800770c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	691b      	ldr	r3, [r3, #16]
 8007712:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d1f2      	bne.n	8007700 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800771a:	bf00      	nop
 800771c:	3708      	adds	r7, #8
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}
 8007722:	bf00      	nop
 8007724:	200024fc 	.word	0x200024fc

08007728 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8007728:	b580      	push	{r7, lr}
 800772a:	b086      	sub	sp, #24
 800772c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800772e:	f3ef 8311 	mrs	r3, BASEPRI
 8007732:	f04f 0120 	mov.w	r1, #32
 8007736:	f381 8811 	msr	BASEPRI, r1
 800773a:	60fb      	str	r3, [r7, #12]
 800773c:	4817      	ldr	r0, [pc, #92]	; (800779c <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800773e:	f7fe ff25 	bl	800658c <_PreparePacket>
 8007742:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	617b      	str	r3, [r7, #20]
 800774c:	4b14      	ldr	r3, [pc, #80]	; (80077a0 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800774e:	781b      	ldrb	r3, [r3, #0]
 8007750:	613b      	str	r3, [r7, #16]
 8007752:	e00b      	b.n	800776c <SEGGER_SYSVIEW_SendNumModules+0x44>
 8007754:	693b      	ldr	r3, [r7, #16]
 8007756:	b2da      	uxtb	r2, r3
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	1c59      	adds	r1, r3, #1
 800775c:	6179      	str	r1, [r7, #20]
 800775e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007762:	b2d2      	uxtb	r2, r2
 8007764:	701a      	strb	r2, [r3, #0]
 8007766:	693b      	ldr	r3, [r7, #16]
 8007768:	09db      	lsrs	r3, r3, #7
 800776a:	613b      	str	r3, [r7, #16]
 800776c:	693b      	ldr	r3, [r7, #16]
 800776e:	2b7f      	cmp	r3, #127	; 0x7f
 8007770:	d8f0      	bhi.n	8007754 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8007772:	697b      	ldr	r3, [r7, #20]
 8007774:	1c5a      	adds	r2, r3, #1
 8007776:	617a      	str	r2, [r7, #20]
 8007778:	693a      	ldr	r2, [r7, #16]
 800777a:	b2d2      	uxtb	r2, r2
 800777c:	701a      	strb	r2, [r3, #0]
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8007782:	221b      	movs	r2, #27
 8007784:	6879      	ldr	r1, [r7, #4]
 8007786:	68b8      	ldr	r0, [r7, #8]
 8007788:	f7fe ffee 	bl	8006768 <_SendPacket>
  RECORD_END();
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	f383 8811 	msr	BASEPRI, r3
}
 8007792:	bf00      	nop
 8007794:	3718      	adds	r7, #24
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}
 800779a:	bf00      	nop
 800779c:	20002504 	.word	0x20002504
 80077a0:	20002500 	.word	0x20002500

080077a4 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b08a      	sub	sp, #40	; 0x28
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80077ac:	f3ef 8311 	mrs	r3, BASEPRI
 80077b0:	f04f 0120 	mov.w	r1, #32
 80077b4:	f381 8811 	msr	BASEPRI, r1
 80077b8:	617b      	str	r3, [r7, #20]
 80077ba:	4827      	ldr	r0, [pc, #156]	; (8007858 <SEGGER_SYSVIEW_Warn+0xb4>)
 80077bc:	f7fe fee6 	bl	800658c <_PreparePacket>
 80077c0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80077c2:	2280      	movs	r2, #128	; 0x80
 80077c4:	6879      	ldr	r1, [r7, #4]
 80077c6:	6938      	ldr	r0, [r7, #16]
 80077c8:	f7fe feb0 	bl	800652c <_EncodeStr>
 80077cc:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	627b      	str	r3, [r7, #36]	; 0x24
 80077d2:	2301      	movs	r3, #1
 80077d4:	623b      	str	r3, [r7, #32]
 80077d6:	e00b      	b.n	80077f0 <SEGGER_SYSVIEW_Warn+0x4c>
 80077d8:	6a3b      	ldr	r3, [r7, #32]
 80077da:	b2da      	uxtb	r2, r3
 80077dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077de:	1c59      	adds	r1, r3, #1
 80077e0:	6279      	str	r1, [r7, #36]	; 0x24
 80077e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80077e6:	b2d2      	uxtb	r2, r2
 80077e8:	701a      	strb	r2, [r3, #0]
 80077ea:	6a3b      	ldr	r3, [r7, #32]
 80077ec:	09db      	lsrs	r3, r3, #7
 80077ee:	623b      	str	r3, [r7, #32]
 80077f0:	6a3b      	ldr	r3, [r7, #32]
 80077f2:	2b7f      	cmp	r3, #127	; 0x7f
 80077f4:	d8f0      	bhi.n	80077d8 <SEGGER_SYSVIEW_Warn+0x34>
 80077f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f8:	1c5a      	adds	r2, r3, #1
 80077fa:	627a      	str	r2, [r7, #36]	; 0x24
 80077fc:	6a3a      	ldr	r2, [r7, #32]
 80077fe:	b2d2      	uxtb	r2, r2
 8007800:	701a      	strb	r2, [r3, #0]
 8007802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007804:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	61fb      	str	r3, [r7, #28]
 800780a:	2300      	movs	r3, #0
 800780c:	61bb      	str	r3, [r7, #24]
 800780e:	e00b      	b.n	8007828 <SEGGER_SYSVIEW_Warn+0x84>
 8007810:	69bb      	ldr	r3, [r7, #24]
 8007812:	b2da      	uxtb	r2, r3
 8007814:	69fb      	ldr	r3, [r7, #28]
 8007816:	1c59      	adds	r1, r3, #1
 8007818:	61f9      	str	r1, [r7, #28]
 800781a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800781e:	b2d2      	uxtb	r2, r2
 8007820:	701a      	strb	r2, [r3, #0]
 8007822:	69bb      	ldr	r3, [r7, #24]
 8007824:	09db      	lsrs	r3, r3, #7
 8007826:	61bb      	str	r3, [r7, #24]
 8007828:	69bb      	ldr	r3, [r7, #24]
 800782a:	2b7f      	cmp	r3, #127	; 0x7f
 800782c:	d8f0      	bhi.n	8007810 <SEGGER_SYSVIEW_Warn+0x6c>
 800782e:	69fb      	ldr	r3, [r7, #28]
 8007830:	1c5a      	adds	r2, r3, #1
 8007832:	61fa      	str	r2, [r7, #28]
 8007834:	69ba      	ldr	r2, [r7, #24]
 8007836:	b2d2      	uxtb	r2, r2
 8007838:	701a      	strb	r2, [r3, #0]
 800783a:	69fb      	ldr	r3, [r7, #28]
 800783c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800783e:	221a      	movs	r2, #26
 8007840:	68f9      	ldr	r1, [r7, #12]
 8007842:	6938      	ldr	r0, [r7, #16]
 8007844:	f7fe ff90 	bl	8006768 <_SendPacket>
  RECORD_END();
 8007848:	697b      	ldr	r3, [r7, #20]
 800784a:	f383 8811 	msr	BASEPRI, r3
}
 800784e:	bf00      	nop
 8007850:	3728      	adds	r7, #40	; 0x28
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}
 8007856:	bf00      	nop
 8007858:	20002504 	.word	0x20002504

0800785c <__libc_init_array>:
 800785c:	b570      	push	{r4, r5, r6, lr}
 800785e:	4d0d      	ldr	r5, [pc, #52]	; (8007894 <__libc_init_array+0x38>)
 8007860:	4c0d      	ldr	r4, [pc, #52]	; (8007898 <__libc_init_array+0x3c>)
 8007862:	1b64      	subs	r4, r4, r5
 8007864:	10a4      	asrs	r4, r4, #2
 8007866:	2600      	movs	r6, #0
 8007868:	42a6      	cmp	r6, r4
 800786a:	d109      	bne.n	8007880 <__libc_init_array+0x24>
 800786c:	4d0b      	ldr	r5, [pc, #44]	; (800789c <__libc_init_array+0x40>)
 800786e:	4c0c      	ldr	r4, [pc, #48]	; (80078a0 <__libc_init_array+0x44>)
 8007870:	f000 f902 	bl	8007a78 <_init>
 8007874:	1b64      	subs	r4, r4, r5
 8007876:	10a4      	asrs	r4, r4, #2
 8007878:	2600      	movs	r6, #0
 800787a:	42a6      	cmp	r6, r4
 800787c:	d105      	bne.n	800788a <__libc_init_array+0x2e>
 800787e:	bd70      	pop	{r4, r5, r6, pc}
 8007880:	f855 3b04 	ldr.w	r3, [r5], #4
 8007884:	4798      	blx	r3
 8007886:	3601      	adds	r6, #1
 8007888:	e7ee      	b.n	8007868 <__libc_init_array+0xc>
 800788a:	f855 3b04 	ldr.w	r3, [r5], #4
 800788e:	4798      	blx	r3
 8007890:	3601      	adds	r6, #1
 8007892:	e7f2      	b.n	800787a <__libc_init_array+0x1e>
 8007894:	08007c60 	.word	0x08007c60
 8007898:	08007c60 	.word	0x08007c60
 800789c:	08007c60 	.word	0x08007c60
 80078a0:	08007c64 	.word	0x08007c64

080078a4 <__retarget_lock_acquire_recursive>:
 80078a4:	4770      	bx	lr

080078a6 <__retarget_lock_release_recursive>:
 80078a6:	4770      	bx	lr

080078a8 <memcmp>:
 80078a8:	b510      	push	{r4, lr}
 80078aa:	3901      	subs	r1, #1
 80078ac:	4402      	add	r2, r0
 80078ae:	4290      	cmp	r0, r2
 80078b0:	d101      	bne.n	80078b6 <memcmp+0xe>
 80078b2:	2000      	movs	r0, #0
 80078b4:	e005      	b.n	80078c2 <memcmp+0x1a>
 80078b6:	7803      	ldrb	r3, [r0, #0]
 80078b8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80078bc:	42a3      	cmp	r3, r4
 80078be:	d001      	beq.n	80078c4 <memcmp+0x1c>
 80078c0:	1b18      	subs	r0, r3, r4
 80078c2:	bd10      	pop	{r4, pc}
 80078c4:	3001      	adds	r0, #1
 80078c6:	e7f2      	b.n	80078ae <memcmp+0x6>

080078c8 <memcpy>:
 80078c8:	440a      	add	r2, r1
 80078ca:	4291      	cmp	r1, r2
 80078cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80078d0:	d100      	bne.n	80078d4 <memcpy+0xc>
 80078d2:	4770      	bx	lr
 80078d4:	b510      	push	{r4, lr}
 80078d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80078da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80078de:	4291      	cmp	r1, r2
 80078e0:	d1f9      	bne.n	80078d6 <memcpy+0xe>
 80078e2:	bd10      	pop	{r4, pc}

080078e4 <memset>:
 80078e4:	4402      	add	r2, r0
 80078e6:	4603      	mov	r3, r0
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d100      	bne.n	80078ee <memset+0xa>
 80078ec:	4770      	bx	lr
 80078ee:	f803 1b01 	strb.w	r1, [r3], #1
 80078f2:	e7f9      	b.n	80078e8 <memset+0x4>

080078f4 <cleanup_glue>:
 80078f4:	b538      	push	{r3, r4, r5, lr}
 80078f6:	460c      	mov	r4, r1
 80078f8:	6809      	ldr	r1, [r1, #0]
 80078fa:	4605      	mov	r5, r0
 80078fc:	b109      	cbz	r1, 8007902 <cleanup_glue+0xe>
 80078fe:	f7ff fff9 	bl	80078f4 <cleanup_glue>
 8007902:	4621      	mov	r1, r4
 8007904:	4628      	mov	r0, r5
 8007906:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800790a:	f000 b869 	b.w	80079e0 <_free_r>
	...

08007910 <_reclaim_reent>:
 8007910:	4b2c      	ldr	r3, [pc, #176]	; (80079c4 <_reclaim_reent+0xb4>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4283      	cmp	r3, r0
 8007916:	b570      	push	{r4, r5, r6, lr}
 8007918:	4604      	mov	r4, r0
 800791a:	d051      	beq.n	80079c0 <_reclaim_reent+0xb0>
 800791c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800791e:	b143      	cbz	r3, 8007932 <_reclaim_reent+0x22>
 8007920:	68db      	ldr	r3, [r3, #12]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d14a      	bne.n	80079bc <_reclaim_reent+0xac>
 8007926:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007928:	6819      	ldr	r1, [r3, #0]
 800792a:	b111      	cbz	r1, 8007932 <_reclaim_reent+0x22>
 800792c:	4620      	mov	r0, r4
 800792e:	f000 f857 	bl	80079e0 <_free_r>
 8007932:	6961      	ldr	r1, [r4, #20]
 8007934:	b111      	cbz	r1, 800793c <_reclaim_reent+0x2c>
 8007936:	4620      	mov	r0, r4
 8007938:	f000 f852 	bl	80079e0 <_free_r>
 800793c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800793e:	b111      	cbz	r1, 8007946 <_reclaim_reent+0x36>
 8007940:	4620      	mov	r0, r4
 8007942:	f000 f84d 	bl	80079e0 <_free_r>
 8007946:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007948:	b111      	cbz	r1, 8007950 <_reclaim_reent+0x40>
 800794a:	4620      	mov	r0, r4
 800794c:	f000 f848 	bl	80079e0 <_free_r>
 8007950:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007952:	b111      	cbz	r1, 800795a <_reclaim_reent+0x4a>
 8007954:	4620      	mov	r0, r4
 8007956:	f000 f843 	bl	80079e0 <_free_r>
 800795a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800795c:	b111      	cbz	r1, 8007964 <_reclaim_reent+0x54>
 800795e:	4620      	mov	r0, r4
 8007960:	f000 f83e 	bl	80079e0 <_free_r>
 8007964:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007966:	b111      	cbz	r1, 800796e <_reclaim_reent+0x5e>
 8007968:	4620      	mov	r0, r4
 800796a:	f000 f839 	bl	80079e0 <_free_r>
 800796e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007970:	b111      	cbz	r1, 8007978 <_reclaim_reent+0x68>
 8007972:	4620      	mov	r0, r4
 8007974:	f000 f834 	bl	80079e0 <_free_r>
 8007978:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800797a:	b111      	cbz	r1, 8007982 <_reclaim_reent+0x72>
 800797c:	4620      	mov	r0, r4
 800797e:	f000 f82f 	bl	80079e0 <_free_r>
 8007982:	69a3      	ldr	r3, [r4, #24]
 8007984:	b1e3      	cbz	r3, 80079c0 <_reclaim_reent+0xb0>
 8007986:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007988:	4620      	mov	r0, r4
 800798a:	4798      	blx	r3
 800798c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800798e:	b1b9      	cbz	r1, 80079c0 <_reclaim_reent+0xb0>
 8007990:	4620      	mov	r0, r4
 8007992:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007996:	f7ff bfad 	b.w	80078f4 <cleanup_glue>
 800799a:	5949      	ldr	r1, [r1, r5]
 800799c:	b941      	cbnz	r1, 80079b0 <_reclaim_reent+0xa0>
 800799e:	3504      	adds	r5, #4
 80079a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80079a2:	2d80      	cmp	r5, #128	; 0x80
 80079a4:	68d9      	ldr	r1, [r3, #12]
 80079a6:	d1f8      	bne.n	800799a <_reclaim_reent+0x8a>
 80079a8:	4620      	mov	r0, r4
 80079aa:	f000 f819 	bl	80079e0 <_free_r>
 80079ae:	e7ba      	b.n	8007926 <_reclaim_reent+0x16>
 80079b0:	680e      	ldr	r6, [r1, #0]
 80079b2:	4620      	mov	r0, r4
 80079b4:	f000 f814 	bl	80079e0 <_free_r>
 80079b8:	4631      	mov	r1, r6
 80079ba:	e7ef      	b.n	800799c <_reclaim_reent+0x8c>
 80079bc:	2500      	movs	r5, #0
 80079be:	e7ef      	b.n	80079a0 <_reclaim_reent+0x90>
 80079c0:	bd70      	pop	{r4, r5, r6, pc}
 80079c2:	bf00      	nop
 80079c4:	20000010 	.word	0x20000010

080079c8 <__malloc_lock>:
 80079c8:	4801      	ldr	r0, [pc, #4]	; (80079d0 <__malloc_lock+0x8>)
 80079ca:	f7ff bf6b 	b.w	80078a4 <__retarget_lock_acquire_recursive>
 80079ce:	bf00      	nop
 80079d0:	200025e7 	.word	0x200025e7

080079d4 <__malloc_unlock>:
 80079d4:	4801      	ldr	r0, [pc, #4]	; (80079dc <__malloc_unlock+0x8>)
 80079d6:	f7ff bf66 	b.w	80078a6 <__retarget_lock_release_recursive>
 80079da:	bf00      	nop
 80079dc:	200025e7 	.word	0x200025e7

080079e0 <_free_r>:
 80079e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80079e2:	2900      	cmp	r1, #0
 80079e4:	d044      	beq.n	8007a70 <_free_r+0x90>
 80079e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079ea:	9001      	str	r0, [sp, #4]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	f1a1 0404 	sub.w	r4, r1, #4
 80079f2:	bfb8      	it	lt
 80079f4:	18e4      	addlt	r4, r4, r3
 80079f6:	f7ff ffe7 	bl	80079c8 <__malloc_lock>
 80079fa:	4a1e      	ldr	r2, [pc, #120]	; (8007a74 <_free_r+0x94>)
 80079fc:	9801      	ldr	r0, [sp, #4]
 80079fe:	6813      	ldr	r3, [r2, #0]
 8007a00:	b933      	cbnz	r3, 8007a10 <_free_r+0x30>
 8007a02:	6063      	str	r3, [r4, #4]
 8007a04:	6014      	str	r4, [r2, #0]
 8007a06:	b003      	add	sp, #12
 8007a08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007a0c:	f7ff bfe2 	b.w	80079d4 <__malloc_unlock>
 8007a10:	42a3      	cmp	r3, r4
 8007a12:	d908      	bls.n	8007a26 <_free_r+0x46>
 8007a14:	6825      	ldr	r5, [r4, #0]
 8007a16:	1961      	adds	r1, r4, r5
 8007a18:	428b      	cmp	r3, r1
 8007a1a:	bf01      	itttt	eq
 8007a1c:	6819      	ldreq	r1, [r3, #0]
 8007a1e:	685b      	ldreq	r3, [r3, #4]
 8007a20:	1949      	addeq	r1, r1, r5
 8007a22:	6021      	streq	r1, [r4, #0]
 8007a24:	e7ed      	b.n	8007a02 <_free_r+0x22>
 8007a26:	461a      	mov	r2, r3
 8007a28:	685b      	ldr	r3, [r3, #4]
 8007a2a:	b10b      	cbz	r3, 8007a30 <_free_r+0x50>
 8007a2c:	42a3      	cmp	r3, r4
 8007a2e:	d9fa      	bls.n	8007a26 <_free_r+0x46>
 8007a30:	6811      	ldr	r1, [r2, #0]
 8007a32:	1855      	adds	r5, r2, r1
 8007a34:	42a5      	cmp	r5, r4
 8007a36:	d10b      	bne.n	8007a50 <_free_r+0x70>
 8007a38:	6824      	ldr	r4, [r4, #0]
 8007a3a:	4421      	add	r1, r4
 8007a3c:	1854      	adds	r4, r2, r1
 8007a3e:	42a3      	cmp	r3, r4
 8007a40:	6011      	str	r1, [r2, #0]
 8007a42:	d1e0      	bne.n	8007a06 <_free_r+0x26>
 8007a44:	681c      	ldr	r4, [r3, #0]
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	6053      	str	r3, [r2, #4]
 8007a4a:	4421      	add	r1, r4
 8007a4c:	6011      	str	r1, [r2, #0]
 8007a4e:	e7da      	b.n	8007a06 <_free_r+0x26>
 8007a50:	d902      	bls.n	8007a58 <_free_r+0x78>
 8007a52:	230c      	movs	r3, #12
 8007a54:	6003      	str	r3, [r0, #0]
 8007a56:	e7d6      	b.n	8007a06 <_free_r+0x26>
 8007a58:	6825      	ldr	r5, [r4, #0]
 8007a5a:	1961      	adds	r1, r4, r5
 8007a5c:	428b      	cmp	r3, r1
 8007a5e:	bf04      	itt	eq
 8007a60:	6819      	ldreq	r1, [r3, #0]
 8007a62:	685b      	ldreq	r3, [r3, #4]
 8007a64:	6063      	str	r3, [r4, #4]
 8007a66:	bf04      	itt	eq
 8007a68:	1949      	addeq	r1, r1, r5
 8007a6a:	6021      	streq	r1, [r4, #0]
 8007a6c:	6054      	str	r4, [r2, #4]
 8007a6e:	e7ca      	b.n	8007a06 <_free_r+0x26>
 8007a70:	b003      	add	sp, #12
 8007a72:	bd30      	pop	{r4, r5, pc}
 8007a74:	200025e8 	.word	0x200025e8

08007a78 <_init>:
 8007a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a7a:	bf00      	nop
 8007a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a7e:	bc08      	pop	{r3}
 8007a80:	469e      	mov	lr, r3
 8007a82:	4770      	bx	lr

08007a84 <_fini>:
 8007a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a86:	bf00      	nop
 8007a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a8a:	bc08      	pop	{r3}
 8007a8c:	469e      	mov	lr, r3
 8007a8e:	4770      	bx	lr
